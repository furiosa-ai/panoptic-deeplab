Command Line Args: Namespace(config_file='experiments/lr_1e-3_batch32_4812/panoptic_deeplab_X_65_os16_mg124_poly_90k_bs32_crop_512_1024_dsconv_eval.yaml', resume=False, eval_only=True, num_gpus=1, num_machines=1, machine_rank=0, dist_url='tcp://127.0.0.1:49152', opts=['MODEL.WEIGHTS', 'experiments/lr_1e-3_batch32_4812/model_0054999.pth'])
[32m[06/28 13:32:23 detectron2]: [0mRank of current process: 0. World size: 1
[32m[06/28 13:32:25 detectron2]: [0mEnvironment info:
----------------------  ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.9.12 | packaged by conda-forge | (main, Mar 24 2022, 23:25:59) [GCC 10.3.0]
numpy                   1.22.4
detectron2              0.6 @/root/ljh726/detectron2/detectron2
detectron2._C           not built correctly: /root/ljh726/detectron2/detectron2/_C.cpython-39-x86_64-linux-gnu.so: undefined symbol: _ZN5torch3jit17parseSchemaOrNameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
Compiler ($CXX)         c++ (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0
CUDA compiler           Build cuda_11.6.r11.6/compiler.30794723_0
detectron2 arch flags   /root/ljh726/detectron2/detectron2/_C.cpython-39-x86_64-linux-gnu.so
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.11.0 @/root/.conda/envs/py3912/lib/python3.9/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1                 NVIDIA A100-SXM4-80GB (arch=8.0)
Driver version          470.82.01
CUDA_HOME               /usr/local/cuda
TORCH_CUDA_ARCH_LIST    5.2 6.0 6.1 7.0 7.5 8.0 8.6+PTX
Pillow                  9.1.1
torchvision             0.12.0 @/root/.conda/envs/py3912/lib/python3.9/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5, 8.0, 8.6
fvcore                  0.1.5.post20220512
iopath                  0.1.9
cv2                     4.5.5
----------------------  ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2022.1-Product Build 20220311 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.5
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.3.2
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.5, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[32m[06/28 13:32:25 detectron2]: [0mCommand line arguments: Namespace(config_file='experiments/lr_1e-3_batch32_4812/panoptic_deeplab_X_65_os16_mg124_poly_90k_bs32_crop_512_1024_dsconv_eval.yaml', resume=False, eval_only=True, num_gpus=1, num_machines=1, machine_rank=0, dist_url='tcp://127.0.0.1:49152', opts=['MODEL.WEIGHTS', 'experiments/lr_1e-3_batch32_4812/model_0054999.pth'])
[32m[06/28 13:32:25 detectron2]: [0mContents of args.config_file=experiments/lr_1e-3_batch32_4812/panoptic_deeplab_X_65_os16_mg124_poly_90k_bs32_crop_512_1024_dsconv_eval.yaml:
[38;5;197m_BASE_[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mBase-PanopticDeepLab-OS16.yaml[39m
[38;5;197mMODEL[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mWEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186m./pretrained/x65.pkl[39m[38;5;186m"[39m
[38;5;15m  [39m[38;5;197mPIXEL_MEAN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15m128[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m128[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m128[39m[38;5;15m][39m
[38;5;15m  [39m[38;5;197mPIXEL_STD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15m128[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m128[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m128[39m[38;5;15m][39m
[38;5;15m  [39m[38;5;197mBACKBONE[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186md2_xception_65[39m[38;5;186m"[39m
[38;5;15m  [39m[38;5;197mRESNETS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mBN[39m[38;5;186m"[39m[38;5;15m [39m[38;5;242m#SyncBN: Multi-GPU[39m
[38;5;15m    [39m[38;5;197mRES4_DILATION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mRES5_DILATION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m
[38;5;15m  [39m[38;5;197mPANOPTIC_DEEPLAB[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mUSE_DEPTHWISE_SEPARABLE_CONV[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mTrue[39m
[38;5;15m  [39m[38;5;197mSEM_SEG_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mUSE_DEPTHWISE_SEPARABLE_CONV[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mTrue[39m
[38;5;197mSOLVER[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mOPTIMIZER[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mADAM[39m[38;5;186m"[39m
[38;5;15m  [39m[38;5;197mBASE_LR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.001[39m
[38;5;15m  [39m[38;5;197mWEIGHT_DECAY[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m  [39m[38;5;197mWEIGHT_DECAY_NORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m  [39m[38;5;197mWEIGHT_DECAY_BIAS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m  [39m[38;5;197mMAX_ITER[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m60000[39m
[38;5;15m  [39m[38;5;197mLR_SCHEDULER_NAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mWarmupPolyLR[39m[38;5;186m"[39m
[38;5;15m  [39m[38;5;197mIMS_PER_BATCH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;197mINPUT[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mFORMAT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mRGB[39m[38;5;186m"[39m
[38;5;15m  [39m[38;5;197mCROP[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mTrue[39m
[38;5;15m    [39m[38;5;197mTYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mabsolute[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;197mSIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m(512,[39m[38;5;141m [39m[38;5;141m1024)[39m
[38;5;197mOUTPUT_DIR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186m./experiments/lr_1e-3_batch32_4812[39m[38;5;186m"[39m
[38;5;197mDATALOADER[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mNUM_WORKERS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m8[39m

[32m[06/28 13:32:25 detectron2]: [0mRunning with full config:
[38;5;197mCUDNN_BENCHMARK[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;197mDATALOADER[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mASPECT_RATIO_GROUPING[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m  [39m[38;5;197mFILTER_EMPTY_ANNOTATIONS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m  [39m[38;5;197mNUM_WORKERS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m8[39m
[38;5;15m  [39m[38;5;197mREPEAT_THRESHOLD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m  [39m[38;5;197mSAMPLER_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mTrainingSampler[39m
[38;5;197mDATASETS[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mPRECOMPUTED_PROPOSAL_TOPK_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1000[39m
[38;5;15m  [39m[38;5;197mPRECOMPUTED_PROPOSAL_TOPK_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2000[39m
[38;5;15m  [39m[38;5;197mPROPOSAL_FILES_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15m][39m
[38;5;15m  [39m[38;5;197mPROPOSAL_FILES_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15m][39m
[38;5;15m  [39m[38;5;197mTEST[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mcityscapes_fine_panoptic_val[39m
[38;5;15m  [39m[38;5;197mTRAIN[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mcityscapes_fine_panoptic_train[39m
[38;5;197mGLOBAL[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mHACK[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;197mINPUT[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mCROP[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mSINGLE_CATEGORY_MAX_AREA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mSIZE[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1024[39m
[38;5;15m    [39m[38;5;197mTYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mabsolute[39m
[38;5;15m  [39m[38;5;197mFORMAT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mRGB[39m
[38;5;15m  [39m[38;5;197mGAUSSIAN_SIGMA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m10[39m
[38;5;15m  [39m[38;5;197mIGNORE_CROWD_IN_SEMANTIC[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mIGNORE_STUFF_IN_OFFSET[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m  [39m[38;5;197mMASK_FORMAT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mpolygon[39m
[38;5;15m  [39m[38;5;197mMAX_SIZE_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2048[39m
[38;5;15m  [39m[38;5;197mMAX_SIZE_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4096[39m
[38;5;15m  [39m[38;5;197mMIN_SIZE_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1024[39m
[38;5;15m  [39m[38;5;197mMIN_SIZE_TRAIN[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m640[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m704[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m832[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m896[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1024[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1152[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1216[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1344[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1408[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1536[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1664[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1728[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1856[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1920[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m2048[39m
[38;5;15m  [39m[38;5;197mMIN_SIZE_TRAIN_SAMPLING[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mchoice[39m
[38;5;15m  [39m[38;5;197mRANDOM_FLIP[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mhorizontal[39m
[38;5;15m  [39m[38;5;197mSMALL_INSTANCE_AREA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4096[39m
[38;5;15m  [39m[38;5;197mSMALL_INSTANCE_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m3[39m
[38;5;197mMODEL[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mANCHOR_GENERATOR[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mANGLES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m-90[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m90[39m
[38;5;15m    [39m[38;5;197mASPECT_RATIOS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m2.0[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mDefaultAnchorGenerator[39m
[38;5;15m    [39m[38;5;197mOFFSET[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m    [39m[38;5;197mSIZES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m32[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m64[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m128[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m  [39m[38;5;197mBACKBONE[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mFREEZE_AT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141md2_xception_65[39m
[38;5;15m  [39m[38;5;197mDEVICE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mcuda[39m
[38;5;15m  [39m[38;5;197mFPN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mFUSE_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141msum[39m
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15m][39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mOUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m  [39m[38;5;197mINS_EMBED_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mASPP_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mASPP_DILATIONS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m8[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m12[39m
[38;5;15m    [39m[38;5;197mASPP_DROPOUT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m
[38;5;15m    [39m[38;5;197mCENTER_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m200.0[39m
[38;5;15m    [39m[38;5;197mCOMMON_STRIDE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;197mCONVS_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m128[39m
[38;5;15m    [39m[38;5;197mHEAD_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m32[39m
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres2[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres5[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mPanopticDeepLabInsEmbedHead[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mBN[39m
[38;5;15m    [39m[38;5;197mOFFSET_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.01[39m
[38;5;15m    [39m[38;5;197mPROJECT_CHANNELS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m32[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m64[39m
[38;5;15m    [39m[38;5;197mPROJECT_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres2[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres3[39m
[38;5;15m  [39m[38;5;197mKEYPOINT_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mLOAD_PROPOSALS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mMASK_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mMETA_ARCHITECTURE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mPanopticDeepLab[39m
[38;5;15m  [39m[38;5;197mPANOPTIC_DEEPLAB[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBENCHMARK_NETWORK_SPEED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mCENTER_THRESHOLD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m
[38;5;15m    [39m[38;5;197mNMS_KERNEL[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m7[39m
[38;5;15m    [39m[38;5;197mPREDICT_INSTANCES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mSIZE_DIVISIBILITY[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m-1[39m
[38;5;15m    [39m[38;5;197mSTUFF_AREA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2048[39m
[38;5;15m    [39m[38;5;197mTOP_K_INSTANCE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m200[39m
[38;5;15m    [39m[38;5;197mUSE_DEPTHWISE_SEPARABLE_CONV[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m  [39m[38;5;197mPANOPTIC_FPN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCOMBINE[39m[38;5;15m:[39m
[38;5;15m      [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m      [39m[38;5;197mINSTANCES_CONFIDENCE_THRESH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m      [39m[38;5;197mOVERLAP_THRESH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m      [39m[38;5;197mSTUFF_AREA_LIMIT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4096[39m
[38;5;15m    [39m[38;5;197mINSTANCE_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m  [39m[38;5;197mPIXEL_MEAN[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m128[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m128[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m128[39m
[38;5;15m  [39m[38;5;197mPIXEL_STD[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m128[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m128[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m128[39m
[38;5;15m  [39m[38;5;197mPROPOSAL_GENERATOR[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mMIN_SIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mRPN[39m
[38;5;15m  [39m[38;5;197mRESNETS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mDEFORM_MODULATED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mDEFORM_NUM_GROUPS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mDEFORM_ON_PER_STAGE[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mDEPTH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m50[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mBN[39m
[38;5;15m    [39m[38;5;197mNUM_GROUPS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mOUT_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres2[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres5[39m
[38;5;15m    [39m[38;5;197mRES2_OUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mRES4_DILATION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mRES5_DILATION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m
[38;5;15m    [39m[38;5;197mRES5_MULTI_GRID[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m2[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;197mSTEM_OUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m64[39m
[38;5;15m    [39m[38;5;197mSTEM_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mdeeplab[39m
[38;5;15m    [39m[38;5;197mSTRIDE_IN_1X1[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mWIDTH_PER_GROUP[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m64[39m
[38;5;15m  [39m[38;5;197mRETINANET[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141msmooth_l1[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_WEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m&id002[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mFOCAL_LOSS_ALPHA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.25[39m
[38;5;15m    [39m[38;5;197mFOCAL_LOSS_GAMMA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2.0[39m
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp5[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp6[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp7[39m
[38;5;15m    [39m[38;5;197mIOU_LABELS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m-1[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mIOU_THRESHOLDS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mNMS_THRESH_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m80[39m
[38;5;15m    [39m[38;5;197mNUM_CONVS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;197mPRIOR_PROB[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.01[39m
[38;5;15m    [39m[38;5;197mSCORE_THRESH_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.05[39m
[38;5;15m    [39m[38;5;197mSMOOTH_L1_LOSS_BETA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m
[38;5;15m    [39m[38;5;197mTOPK_CANDIDATES_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1000[39m
[38;5;15m  [39m[38;5;197mROI_BOX_CASCADE_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_WEIGHTS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m&id001[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m10.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m10.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m5.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m5.0[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m20.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m20.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m10.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m10.0[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m30.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m30.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m15.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m15.0[39m
[38;5;15m    [39m[38;5;197mIOUS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.6[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.7[39m
[38;5;15m  [39m[38;5;197mROI_BOX_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141msmooth_l1[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_WEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m*id001[39m
[38;5;15m    [39m[38;5;197mCLS_AGNOSTIC_BBOX_REG[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mCONV_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mFC_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1024[39m
[38;5;15m    [39m[38;5;197mFED_LOSS_FREQ_WEIGHT_POWER[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mFED_LOSS_NUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m50[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mNUM_CONV[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;197mNUM_FC[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;197mPOOLER_RESOLUTION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m14[39m
[38;5;15m    [39m[38;5;197mPOOLER_SAMPLING_RATIO[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;197mPOOLER_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mROIAlignV2[39m
[38;5;15m    [39m[38;5;197mSMOOTH_L1_BETA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m    [39m[38;5;197mTRAIN_ON_PRED_BOXES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mUSE_FED_LOSS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mUSE_SIGMOID_CE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mROI_HEADS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBATCH_SIZE_PER_IMAGE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres4[39m
[38;5;15m    [39m[38;5;197mIOU_LABELS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mIOU_THRESHOLDS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mRes5ROIHeads[39m
[38;5;15m    [39m[38;5;197mNMS_THRESH_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m80[39m
[38;5;15m    [39m[38;5;197mPOSITIVE_FRACTION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.25[39m
[38;5;15m    [39m[38;5;197mPROPOSAL_APPEND_GT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mSCORE_THRESH_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.05[39m
[38;5;15m  [39m[38;5;197mROI_KEYPOINT_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCONV_DIMS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mMIN_KEYPOINTS_PER_IMAGE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mKRCNNConvDeconvUpsampleHead[39m
[38;5;15m    [39m[38;5;197mNORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mNUM_KEYPOINTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m17[39m
[38;5;15m    [39m[38;5;197mPOOLER_RESOLUTION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m14[39m
[38;5;15m    [39m[38;5;197mPOOLER_SAMPLING_RATIO[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;197mPOOLER_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mROIAlignV2[39m
[38;5;15m  [39m[38;5;197mROI_MASK_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCLS_AGNOSTIC_MASK[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mCONV_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mMaskRCNNConvUpsampleHead[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mNUM_CONV[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;197mPOOLER_RESOLUTION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m14[39m
[38;5;15m    [39m[38;5;197mPOOLER_SAMPLING_RATIO[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;197mPOOLER_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mROIAlignV2[39m
[38;5;15m  [39m[38;5;197mRPN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBATCH_SIZE_PER_IMAGE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141msmooth_l1[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_WEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m*id002[39m
[38;5;15m    [39m[38;5;197mBOUNDARY_THRESH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m-1[39m
[38;5;15m    [39m[38;5;197mCONV_DIMS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m-1[39m
[38;5;15m    [39m[38;5;197mHEAD_NAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mStandardRPNHead[39m
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres4[39m
[38;5;15m    [39m[38;5;197mIOU_LABELS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m-1[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mIOU_THRESHOLDS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.7[39m
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mNMS_THRESH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.7[39m
[38;5;15m    [39m[38;5;197mPOSITIVE_FRACTION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mPOST_NMS_TOPK_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1000[39m
[38;5;15m    [39m[38;5;197mPOST_NMS_TOPK_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2000[39m
[38;5;15m    [39m[38;5;197mPRE_NMS_TOPK_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m6000[39m
[38;5;15m    [39m[38;5;197mPRE_NMS_TOPK_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m12000[39m
[38;5;15m    [39m[38;5;197mSMOOTH_L1_BETA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m  [39m[38;5;197mSEM_SEG_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mASPP_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mASPP_DILATIONS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m8[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m12[39m
[38;5;15m    [39m[38;5;197mASPP_DROPOUT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m
[38;5;15m    [39m[38;5;197mCOMMON_STRIDE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;197mCONVS_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mHEAD_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mIGNORE_VALUE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m255[39m
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres2[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres5[39m
[38;5;15m    [39m[38;5;197mLOSS_TOP_K[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.2[39m
[38;5;15m    [39m[38;5;197mLOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mhard_pixel_mining[39m
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mPanopticDeepLabSemSegHead[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mBN[39m
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m19[39m
[38;5;15m    [39m[38;5;197mPROJECT_CHANNELS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m32[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m64[39m
[38;5;15m    [39m[38;5;197mPROJECT_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres2[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres3[39m
[38;5;15m    [39m[38;5;197mUSE_DEPTHWISE_SEPARABLE_CONV[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m  [39m[38;5;197mWEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mexperiments/lr_1e-3_batch32_4812/model_0054999.pth[39m
[38;5;197mOUTPUT_DIR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m./experiments/lr_1e-3_batch32_4812[39m
[38;5;197mSEED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m-1[39m
[38;5;197mSOLVER[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mAMP[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mBASE_LR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.001[39m
[38;5;15m  [39m[38;5;197mBASE_LR_END[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m  [39m[38;5;197mBIAS_LR_FACTOR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m  [39m[38;5;197mCHECKPOINT_PERIOD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5000[39m
[38;5;15m  [39m[38;5;197mCLIP_GRADIENTS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCLIP_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mvalue[39m
[38;5;15m    [39m[38;5;197mCLIP_VALUE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mNORM_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2.0[39m
[38;5;15m  [39m[38;5;197mGAMMA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m
[38;5;15m  [39m[38;5;197mIMS_PER_BATCH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m  [39m[38;5;197mLR_SCHEDULER_NAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mWarmupPolyLR[39m
[38;5;15m  [39m[38;5;197mMAX_ITER[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m60000[39m
[38;5;15m  [39m[38;5;197mMOMENTUM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.9[39m
[38;5;15m  [39m[38;5;197mNESTEROV[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mOPTIMIZER[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mADAM[39m
[38;5;15m  [39m[38;5;197mPOLY_LR_CONSTANT_ENDING[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m  [39m[38;5;197mPOLY_LR_POWER[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.9[39m
[38;5;15m  [39m[38;5;197mREFERENCE_WORLD_SIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m  [39m[38;5;197mSTEPS[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m30000[39m
[38;5;15m  [39m[38;5;197mWARMUP_FACTOR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.001[39m
[38;5;15m  [39m[38;5;197mWARMUP_ITERS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1000[39m
[38;5;15m  [39m[38;5;197mWARMUP_METHOD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mlinear[39m
[38;5;15m  [39m[38;5;197mWEIGHT_DECAY[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m  [39m[38;5;197mWEIGHT_DECAY_BIAS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m  [39m[38;5;197mWEIGHT_DECAY_NORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;197mTEST[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mAUG[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mFLIP[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mMAX_SIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4000[39m
[38;5;15m    [39m[38;5;197mMIN_SIZES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m400[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m500[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m600[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m700[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m800[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m900[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1000[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1100[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1200[39m
[38;5;15m  [39m[38;5;197mDETECTIONS_PER_IMAGE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m100[39m
[38;5;15m  [39m[38;5;197mEVAL_PERIOD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m  [39m[38;5;197mEXPECTED_RESULTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15m][39m
[38;5;15m  [39m[38;5;197mKEYPOINT_OKS_SIGMAS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15m][39m
[38;5;15m  [39m[38;5;197mPRECISE_BN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mNUM_ITER[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m200[39m
[38;5;197mVERSION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m
[38;5;197mVIS_PERIOD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m

[32m[06/28 13:32:25 detectron2]: [0mFull config saved to ./experiments/lr_1e-3_batch32_4812/config.yaml
[32m[06/28 13:32:25 d2.utils.env]: [0mUsing a generated random seed 27080069
[32m[06/28 13:32:30 d2.engine.defaults]: [0mModel:
PanopticDeepLab(
  (backbone): d2_xception_65(
    (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
    (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (block1): XceptionBlock(
      (conv): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (bn_depth): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128, bias=False)
          (bn_depth): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=128, bias=False)
          (bn_depth): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block2): XceptionBlock(
      (conv): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128, bias=False)
          (bn_depth): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256, bias=False)
          (bn_depth): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256, bias=False)
          (bn_depth): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block3): XceptionBlock(
      (conv): Conv2d(256, 728, kernel_size=(1, 1), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256, bias=False)
          (bn_depth): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(256, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block4): XceptionBlock(
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block5): XceptionBlock(
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block6): XceptionBlock(
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block7): XceptionBlock(
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block8): XceptionBlock(
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block9): XceptionBlock(
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block10): XceptionBlock(
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block11): XceptionBlock(
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block12): XceptionBlock(
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block13): XceptionBlock(
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block14): XceptionBlock(
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block15): XceptionBlock(
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block16): XceptionBlock(
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block17): XceptionBlock(
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block18): XceptionBlock(
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block19): XceptionBlock(
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block20): XceptionBlock(
      (conv): Conv2d(728, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1024, bias=False)
          (bn_depth): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block21): XceptionBlock(
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (depthwise): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=1024, bias=False)
          (bn_depth): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (pointwise): Conv2d(1024, 1536, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(1536, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (depthwise): Conv2d(1536, 1536, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=1536, bias=False)
          (bn_depth): BatchNorm2d(1536, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (pointwise): Conv2d(1536, 1536, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(1536, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (depthwise): Conv2d(1536, 1536, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=1536, bias=False)
          (bn_depth): BatchNorm2d(1536, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (pointwise): Conv2d(1536, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
        )
      )
    )
  )
  (sem_seg_head): PanopticDeepLabSemSegHead(
    (qconcat): ModuleDict(
      (res2): QConcat(
        (conv1): Conv2d(32, 288, kernel_size=(1, 1), stride=(1, 1))
        (conv2): Conv2d(256, 288, kernel_size=(1, 1), stride=(1, 1))
      )
      (res3): QConcat(
        (conv1): Conv2d(64, 320, kernel_size=(1, 1), stride=(1, 1))
        (conv2): Conv2d(256, 320, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (decoder): ModuleDict(
      (res2): ModuleDict(
        (project_conv): Conv2d(
          256, 32, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (fuse_conv): DepthwiseSeparableConv2d(
          (depthwise): Conv2d(
            288, 288, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=288, bias=False
            (norm): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (pointwise): Conv2d(
            288, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (res3): ModuleDict(
        (project_conv): Conv2d(
          728, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (fuse_conv): DepthwiseSeparableConv2d(
          (depthwise): Conv2d(
            320, 320, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=320, bias=False
            (norm): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (pointwise): Conv2d(
            320, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (res5): ModuleDict(
        (project_conv): ASPP(
          (convs): ModuleList(
            (0): Conv2d(
              2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (1): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), groups=2048, bias=False
                (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (2): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(8, 8), dilation=(8, 8), groups=2048, bias=False
                (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (3): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(12, 12), dilation=(12, 12), groups=2048, bias=False
                (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (4): Sequential(
              (0): AdaptiveAvgPool2d(output_size=1)
              (1): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
            )
          )
          (qconcat): QConcat2(
            (convs): ModuleList(
              (0): Conv2d(256, 1280, kernel_size=(1, 1), stride=(1, 1))
              (1): Conv2d(256, 1280, kernel_size=(1, 1), stride=(1, 1))
              (2): Conv2d(256, 1280, kernel_size=(1, 1), stride=(1, 1))
              (3): Conv2d(256, 1280, kernel_size=(1, 1), stride=(1, 1))
              (4): Conv2d(256, 1280, kernel_size=(1, 1), stride=(1, 1))
            )
          )
          (project): Conv2d(
            1280, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (fuse_conv): None
      )
    )
    (head): DepthwiseSeparableConv2d(
      (depthwise): Conv2d(
        256, 256, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=256, bias=False
        (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (pointwise): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (predictor): Conv2d(256, 19, kernel_size=(1, 1), stride=(1, 1))
    (loss): DeepLabCE(
      (criterion): CrossEntropyLoss()
    )
  )
  (ins_embed_head): PanopticDeepLabInsEmbedHead(
    (qconcat): ModuleDict(
      (res2): QConcat(
        (conv1): Conv2d(32, 160, kernel_size=(1, 1), stride=(1, 1))
        (conv2): Conv2d(128, 160, kernel_size=(1, 1), stride=(1, 1))
      )
      (res3): QConcat(
        (conv1): Conv2d(64, 320, kernel_size=(1, 1), stride=(1, 1))
        (conv2): Conv2d(256, 320, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (decoder): ModuleDict(
      (res2): ModuleDict(
        (project_conv): Conv2d(
          256, 32, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (fuse_conv): DepthwiseSeparableConv2d(
          (depthwise): Conv2d(
            160, 160, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=160, bias=False
            (norm): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (pointwise): Conv2d(
            160, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (res3): ModuleDict(
        (project_conv): Conv2d(
          728, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (fuse_conv): DepthwiseSeparableConv2d(
          (depthwise): Conv2d(
            320, 320, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=320, bias=False
            (norm): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (pointwise): Conv2d(
            320, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (res5): ModuleDict(
        (project_conv): ASPP(
          (convs): ModuleList(
            (0): Conv2d(
              2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (1): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), groups=2048, bias=False
                (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (2): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(8, 8), dilation=(8, 8), groups=2048, bias=False
                (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (3): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(12, 12), dilation=(12, 12), groups=2048, bias=False
                (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (4): Sequential(
              (0): AdaptiveAvgPool2d(output_size=1)
              (1): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
            )
          )
          (qconcat): QConcat2(
            (convs): ModuleList(
              (0): Conv2d(256, 1280, kernel_size=(1, 1), stride=(1, 1))
              (1): Conv2d(256, 1280, kernel_size=(1, 1), stride=(1, 1))
              (2): Conv2d(256, 1280, kernel_size=(1, 1), stride=(1, 1))
              (3): Conv2d(256, 1280, kernel_size=(1, 1), stride=(1, 1))
              (4): Conv2d(256, 1280, kernel_size=(1, 1), stride=(1, 1))
            )
          )
          (project): Conv2d(
            1280, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (fuse_conv): None
      )
    )
    (center_head): Sequential(
      (0): Conv2d(
        128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): Conv2d(
        128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (center_predictor): Conv2d(32, 1, kernel_size=(1, 1), stride=(1, 1))
    (offset_head): DepthwiseSeparableConv2d(
      (depthwise): Conv2d(
        128, 128, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=128, bias=False
        (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (pointwise): Conv2d(
        128, 32, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (offset_predictor): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
    (center_loss): MSELoss()
    (offset_loss): L1Loss()
  )
)
GPU
[32m[06/28 13:32:35 d2.engine.defaults]: [0mModel:
PanopticDeepLab(
  (backbone): d2_xception_65(
    (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
    (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (block1): XceptionBlock(
      (conv): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (bn_depth): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128, bias=False)
          (bn_depth): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=128, bias=False)
          (bn_depth): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block2): XceptionBlock(
      (conv): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128, bias=False)
          (bn_depth): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256, bias=False)
          (bn_depth): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256, bias=False)
          (bn_depth): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block3): XceptionBlock(
      (conv): Conv2d(256, 728, kernel_size=(1, 1), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256, bias=False)
          (bn_depth): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(256, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block4): XceptionBlock(
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block5): XceptionBlock(
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block6): XceptionBlock(
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block7): XceptionBlock(
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block8): XceptionBlock(
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block9): XceptionBlock(
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block10): XceptionBlock(
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block11): XceptionBlock(
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block12): XceptionBlock(
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block13): XceptionBlock(
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block14): XceptionBlock(
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block15): XceptionBlock(
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block16): XceptionBlock(
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block17): XceptionBlock(
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block18): XceptionBlock(
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block19): XceptionBlock(
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block20): XceptionBlock(
      (conv): Conv2d(728, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1024, bias=False)
          (bn_depth): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block21): XceptionBlock(
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (depthwise): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=1024, bias=False)
          (bn_depth): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (pointwise): Conv2d(1024, 1536, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(1536, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (depthwise): Conv2d(1536, 1536, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=1536, bias=False)
          (bn_depth): BatchNorm2d(1536, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (pointwise): Conv2d(1536, 1536, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(1536, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (depthwise): Conv2d(1536, 1536, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=1536, bias=False)
          (bn_depth): BatchNorm2d(1536, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (pointwise): Conv2d(1536, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
        )
      )
    )
  )
  (sem_seg_head): PanopticDeepLabSemSegHead(
    (qconcat): ModuleDict(
      (res2): QConcat(
        (conv1): Conv2d(32, 288, kernel_size=(1, 1), stride=(1, 1))
        (conv2): Conv2d(256, 288, kernel_size=(1, 1), stride=(1, 1))
      )
      (res3): QConcat(
        (conv1): Conv2d(64, 320, kernel_size=(1, 1), stride=(1, 1))
        (conv2): Conv2d(256, 320, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (decoder): ModuleDict(
      (res2): ModuleDict(
        (project_conv): Conv2d(
          256, 32, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (fuse_conv): DepthwiseSeparableConv2d(
          (depthwise): Conv2d(
            288, 288, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=288, bias=False
            (norm): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (pointwise): Conv2d(
            288, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (res3): ModuleDict(
        (project_conv): Conv2d(
          728, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (fuse_conv): DepthwiseSeparableConv2d(
          (depthwise): Conv2d(
            320, 320, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=320, bias=False
            (norm): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (pointwise): Conv2d(
            320, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (res5): ModuleDict(
        (project_conv): ASPP(
          (convs): ModuleList(
            (0): Conv2d(
              2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (1): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), groups=2048, bias=False
                (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (2): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(8, 8), dilation=(8, 8), groups=2048, bias=False
                (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (3): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(12, 12), dilation=(12, 12), groups=2048, bias=False
                (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (4): Sequential(
              (0): AdaptiveAvgPool2d(output_size=1)
              (1): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
            )
          )
          (qconcat): QConcat2(
            (convs): ModuleList(
              (0): Conv2d(256, 1280, kernel_size=(1, 1), stride=(1, 1))
              (1): Conv2d(256, 1280, kernel_size=(1, 1), stride=(1, 1))
              (2): Conv2d(256, 1280, kernel_size=(1, 1), stride=(1, 1))
              (3): Conv2d(256, 1280, kernel_size=(1, 1), stride=(1, 1))
              (4): Conv2d(256, 1280, kernel_size=(1, 1), stride=(1, 1))
            )
          )
          (project): Conv2d(
            1280, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (fuse_conv): None
      )
    )
    (head): DepthwiseSeparableConv2d(
      (depthwise): Conv2d(
        256, 256, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=256, bias=False
        (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (pointwise): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (predictor): Conv2d(256, 19, kernel_size=(1, 1), stride=(1, 1))
    (loss): DeepLabCE(
      (criterion): CrossEntropyLoss()
    )
  )
  (ins_embed_head): PanopticDeepLabInsEmbedHead(
    (qconcat): ModuleDict(
      (res2): QConcat(
        (conv1): Conv2d(32, 160, kernel_size=(1, 1), stride=(1, 1))
        (conv2): Conv2d(128, 160, kernel_size=(1, 1), stride=(1, 1))
      )
      (res3): QConcat(
        (conv1): Conv2d(64, 320, kernel_size=(1, 1), stride=(1, 1))
        (conv2): Conv2d(256, 320, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (decoder): ModuleDict(
      (res2): ModuleDict(
        (project_conv): Conv2d(
          256, 32, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (fuse_conv): DepthwiseSeparableConv2d(
          (depthwise): Conv2d(
            160, 160, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=160, bias=False
            (norm): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (pointwise): Conv2d(
            160, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (res3): ModuleDict(
        (project_conv): Conv2d(
          728, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (fuse_conv): DepthwiseSeparableConv2d(
          (depthwise): Conv2d(
            320, 320, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=320, bias=False
            (norm): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (pointwise): Conv2d(
            320, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (res5): ModuleDict(
        (project_conv): ASPP(
          (convs): ModuleList(
            (0): Conv2d(
              2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (1): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), groups=2048, bias=False
                (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (2): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(8, 8), dilation=(8, 8), groups=2048, bias=False
                (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (3): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(12, 12), dilation=(12, 12), groups=2048, bias=False
                (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (4): Sequential(
              (0): AdaptiveAvgPool2d(output_size=1)
              (1): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
            )
          )
          (qconcat): QConcat2(
            (convs): ModuleList(
              (0): Conv2d(256, 1280, kernel_size=(1, 1), stride=(1, 1))
              (1): Conv2d(256, 1280, kernel_size=(1, 1), stride=(1, 1))
              (2): Conv2d(256, 1280, kernel_size=(1, 1), stride=(1, 1))
              (3): Conv2d(256, 1280, kernel_size=(1, 1), stride=(1, 1))
              (4): Conv2d(256, 1280, kernel_size=(1, 1), stride=(1, 1))
            )
          )
          (project): Conv2d(
            1280, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (fuse_conv): None
      )
    )
    (center_head): Sequential(
      (0): Conv2d(
        128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): Conv2d(
        128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (center_predictor): Conv2d(32, 1, kernel_size=(1, 1), stride=(1, 1))
    (offset_head): DepthwiseSeparableConv2d(
      (depthwise): Conv2d(
        128, 128, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=128, bias=False
        (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (pointwise): Conv2d(
        128, 32, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (offset_predictor): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
    (center_loss): MSELoss()
    (offset_loss): L1Loss()
  )
)
[32m[06/28 13:32:35 fvcore.common.checkpoint]: [0m[Checkpointer] Loading from experiments/lr_1e-3_batch32_4812/model_0054999.pth ...
[32m[06/28 13:32:36 d2.checkpoint.c2_model_loading]: [0mFollowing weights matched with model:
| Names in Model                                               | Names in Checkpoint                                                                                                                                   | Shapes                                          |
|:-------------------------------------------------------------|:------------------------------------------------------------------------------------------------------------------------------------------------------|:------------------------------------------------|
| backbone.block1.bn.*                                         | backbone.block1.bn.{bias,num_batches_tracked,running_mean,running_var,weight}                                                                         | (128,) () (128,) (128,) (128,)                  |
| backbone.block1.conv.weight                                  | backbone.block1.conv.weight                                                                                                                           | (128, 64, 1, 1)                                 |
| backbone.block1.sep_conv1.block.bn_depth.*                   | backbone.block1.sep_conv1.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (64,) () (64,) (64,) (64,)                      |
| backbone.block1.sep_conv1.block.bn_point.*                   | backbone.block1.sep_conv1.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (128,) () (128,) (128,) (128,)                  |
| backbone.block1.sep_conv1.block.depthwise.weight             | backbone.block1.sep_conv1.block.depthwise.weight                                                                                                      | (64, 1, 3, 3)                                   |
| backbone.block1.sep_conv1.block.pointwise.weight             | backbone.block1.sep_conv1.block.pointwise.weight                                                                                                      | (128, 64, 1, 1)                                 |
| backbone.block1.sep_conv2.block.bn_depth.*                   | backbone.block1.sep_conv2.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (128,) () (128,) (128,) (128,)                  |
| backbone.block1.sep_conv2.block.bn_point.*                   | backbone.block1.sep_conv2.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (128,) () (128,) (128,) (128,)                  |
| backbone.block1.sep_conv2.block.depthwise.weight             | backbone.block1.sep_conv2.block.depthwise.weight                                                                                                      | (128, 1, 3, 3)                                  |
| backbone.block1.sep_conv2.block.pointwise.weight             | backbone.block1.sep_conv2.block.pointwise.weight                                                                                                      | (128, 128, 1, 1)                                |
| backbone.block1.sep_conv3.block.bn_depth.*                   | backbone.block1.sep_conv3.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (128,) () (128,) (128,) (128,)                  |
| backbone.block1.sep_conv3.block.bn_point.*                   | backbone.block1.sep_conv3.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (128,) () (128,) (128,) (128,)                  |
| backbone.block1.sep_conv3.block.depthwise.weight             | backbone.block1.sep_conv3.block.depthwise.weight                                                                                                      | (128, 1, 3, 3)                                  |
| backbone.block1.sep_conv3.block.pointwise.weight             | backbone.block1.sep_conv3.block.pointwise.weight                                                                                                      | (128, 128, 1, 1)                                |
| backbone.block10.sep_conv1.block.bn_depth.*                  | backbone.block10.sep_conv1.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block10.sep_conv1.block.bn_point.*                  | backbone.block10.sep_conv1.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block10.sep_conv1.block.depthwise.weight            | backbone.block10.sep_conv1.block.depthwise.weight                                                                                                     | (728, 1, 3, 3)                                  |
| backbone.block10.sep_conv1.block.pointwise.weight            | backbone.block10.sep_conv1.block.pointwise.weight                                                                                                     | (728, 728, 1, 1)                                |
| backbone.block10.sep_conv2.block.bn_depth.*                  | backbone.block10.sep_conv2.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block10.sep_conv2.block.bn_point.*                  | backbone.block10.sep_conv2.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block10.sep_conv2.block.depthwise.weight            | backbone.block10.sep_conv2.block.depthwise.weight                                                                                                     | (728, 1, 3, 3)                                  |
| backbone.block10.sep_conv2.block.pointwise.weight            | backbone.block10.sep_conv2.block.pointwise.weight                                                                                                     | (728, 728, 1, 1)                                |
| backbone.block10.sep_conv3.block.bn_depth.*                  | backbone.block10.sep_conv3.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block10.sep_conv3.block.bn_point.*                  | backbone.block10.sep_conv3.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block10.sep_conv3.block.depthwise.weight            | backbone.block10.sep_conv3.block.depthwise.weight                                                                                                     | (728, 1, 3, 3)                                  |
| backbone.block10.sep_conv3.block.pointwise.weight            | backbone.block10.sep_conv3.block.pointwise.weight                                                                                                     | (728, 728, 1, 1)                                |
| backbone.block11.sep_conv1.block.bn_depth.*                  | backbone.block11.sep_conv1.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block11.sep_conv1.block.bn_point.*                  | backbone.block11.sep_conv1.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block11.sep_conv1.block.depthwise.weight            | backbone.block11.sep_conv1.block.depthwise.weight                                                                                                     | (728, 1, 3, 3)                                  |
| backbone.block11.sep_conv1.block.pointwise.weight            | backbone.block11.sep_conv1.block.pointwise.weight                                                                                                     | (728, 728, 1, 1)                                |
| backbone.block11.sep_conv2.block.bn_depth.*                  | backbone.block11.sep_conv2.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block11.sep_conv2.block.bn_point.*                  | backbone.block11.sep_conv2.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block11.sep_conv2.block.depthwise.weight            | backbone.block11.sep_conv2.block.depthwise.weight                                                                                                     | (728, 1, 3, 3)                                  |
| backbone.block11.sep_conv2.block.pointwise.weight            | backbone.block11.sep_conv2.block.pointwise.weight                                                                                                     | (728, 728, 1, 1)                                |
| backbone.block11.sep_conv3.block.bn_depth.*                  | backbone.block11.sep_conv3.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block11.sep_conv3.block.bn_point.*                  | backbone.block11.sep_conv3.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block11.sep_conv3.block.depthwise.weight            | backbone.block11.sep_conv3.block.depthwise.weight                                                                                                     | (728, 1, 3, 3)                                  |
| backbone.block11.sep_conv3.block.pointwise.weight            | backbone.block11.sep_conv3.block.pointwise.weight                                                                                                     | (728, 728, 1, 1)                                |
| backbone.block12.sep_conv1.block.bn_depth.*                  | backbone.block12.sep_conv1.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block12.sep_conv1.block.bn_point.*                  | backbone.block12.sep_conv1.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block12.sep_conv1.block.depthwise.weight            | backbone.block12.sep_conv1.block.depthwise.weight                                                                                                     | (728, 1, 3, 3)                                  |
| backbone.block12.sep_conv1.block.pointwise.weight            | backbone.block12.sep_conv1.block.pointwise.weight                                                                                                     | (728, 728, 1, 1)                                |
| backbone.block12.sep_conv2.block.bn_depth.*                  | backbone.block12.sep_conv2.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block12.sep_conv2.block.bn_point.*                  | backbone.block12.sep_conv2.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block12.sep_conv2.block.depthwise.weight            | backbone.block12.sep_conv2.block.depthwise.weight                                                                                                     | (728, 1, 3, 3)                                  |
| backbone.block12.sep_conv2.block.pointwise.weight            | backbone.block12.sep_conv2.block.pointwise.weight                                                                                                     | (728, 728, 1, 1)                                |
| backbone.block12.sep_conv3.block.bn_depth.*                  | backbone.block12.sep_conv3.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block12.sep_conv3.block.bn_point.*                  | backbone.block12.sep_conv3.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block12.sep_conv3.block.depthwise.weight            | backbone.block12.sep_conv3.block.depthwise.weight                                                                                                     | (728, 1, 3, 3)                                  |
| backbone.block12.sep_conv3.block.pointwise.weight            | backbone.block12.sep_conv3.block.pointwise.weight                                                                                                     | (728, 728, 1, 1)                                |
| backbone.block13.sep_conv1.block.bn_depth.*                  | backbone.block13.sep_conv1.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block13.sep_conv1.block.bn_point.*                  | backbone.block13.sep_conv1.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block13.sep_conv1.block.depthwise.weight            | backbone.block13.sep_conv1.block.depthwise.weight                                                                                                     | (728, 1, 3, 3)                                  |
| backbone.block13.sep_conv1.block.pointwise.weight            | backbone.block13.sep_conv1.block.pointwise.weight                                                                                                     | (728, 728, 1, 1)                                |
| backbone.block13.sep_conv2.block.bn_depth.*                  | backbone.block13.sep_conv2.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block13.sep_conv2.block.bn_point.*                  | backbone.block13.sep_conv2.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block13.sep_conv2.block.depthwise.weight            | backbone.block13.sep_conv2.block.depthwise.weight                                                                                                     | (728, 1, 3, 3)                                  |
| backbone.block13.sep_conv2.block.pointwise.weight            | backbone.block13.sep_conv2.block.pointwise.weight                                                                                                     | (728, 728, 1, 1)                                |
| backbone.block13.sep_conv3.block.bn_depth.*                  | backbone.block13.sep_conv3.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block13.sep_conv3.block.bn_point.*                  | backbone.block13.sep_conv3.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block13.sep_conv3.block.depthwise.weight            | backbone.block13.sep_conv3.block.depthwise.weight                                                                                                     | (728, 1, 3, 3)                                  |
| backbone.block13.sep_conv3.block.pointwise.weight            | backbone.block13.sep_conv3.block.pointwise.weight                                                                                                     | (728, 728, 1, 1)                                |
| backbone.block14.sep_conv1.block.bn_depth.*                  | backbone.block14.sep_conv1.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block14.sep_conv1.block.bn_point.*                  | backbone.block14.sep_conv1.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block14.sep_conv1.block.depthwise.weight            | backbone.block14.sep_conv1.block.depthwise.weight                                                                                                     | (728, 1, 3, 3)                                  |
| backbone.block14.sep_conv1.block.pointwise.weight            | backbone.block14.sep_conv1.block.pointwise.weight                                                                                                     | (728, 728, 1, 1)                                |
| backbone.block14.sep_conv2.block.bn_depth.*                  | backbone.block14.sep_conv2.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block14.sep_conv2.block.bn_point.*                  | backbone.block14.sep_conv2.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block14.sep_conv2.block.depthwise.weight            | backbone.block14.sep_conv2.block.depthwise.weight                                                                                                     | (728, 1, 3, 3)                                  |
| backbone.block14.sep_conv2.block.pointwise.weight            | backbone.block14.sep_conv2.block.pointwise.weight                                                                                                     | (728, 728, 1, 1)                                |
| backbone.block14.sep_conv3.block.bn_depth.*                  | backbone.block14.sep_conv3.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block14.sep_conv3.block.bn_point.*                  | backbone.block14.sep_conv3.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block14.sep_conv3.block.depthwise.weight            | backbone.block14.sep_conv3.block.depthwise.weight                                                                                                     | (728, 1, 3, 3)                                  |
| backbone.block14.sep_conv3.block.pointwise.weight            | backbone.block14.sep_conv3.block.pointwise.weight                                                                                                     | (728, 728, 1, 1)                                |
| backbone.block15.sep_conv1.block.bn_depth.*                  | backbone.block15.sep_conv1.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block15.sep_conv1.block.bn_point.*                  | backbone.block15.sep_conv1.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block15.sep_conv1.block.depthwise.weight            | backbone.block15.sep_conv1.block.depthwise.weight                                                                                                     | (728, 1, 3, 3)                                  |
| backbone.block15.sep_conv1.block.pointwise.weight            | backbone.block15.sep_conv1.block.pointwise.weight                                                                                                     | (728, 728, 1, 1)                                |
| backbone.block15.sep_conv2.block.bn_depth.*                  | backbone.block15.sep_conv2.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block15.sep_conv2.block.bn_point.*                  | backbone.block15.sep_conv2.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block15.sep_conv2.block.depthwise.weight            | backbone.block15.sep_conv2.block.depthwise.weight                                                                                                     | (728, 1, 3, 3)                                  |
| backbone.block15.sep_conv2.block.pointwise.weight            | backbone.block15.sep_conv2.block.pointwise.weight                                                                                                     | (728, 728, 1, 1)                                |
| backbone.block15.sep_conv3.block.bn_depth.*                  | backbone.block15.sep_conv3.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block15.sep_conv3.block.bn_point.*                  | backbone.block15.sep_conv3.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block15.sep_conv3.block.depthwise.weight            | backbone.block15.sep_conv3.block.depthwise.weight                                                                                                     | (728, 1, 3, 3)                                  |
| backbone.block15.sep_conv3.block.pointwise.weight            | backbone.block15.sep_conv3.block.pointwise.weight                                                                                                     | (728, 728, 1, 1)                                |
| backbone.block16.sep_conv1.block.bn_depth.*                  | backbone.block16.sep_conv1.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block16.sep_conv1.block.bn_point.*                  | backbone.block16.sep_conv1.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block16.sep_conv1.block.depthwise.weight            | backbone.block16.sep_conv1.block.depthwise.weight                                                                                                     | (728, 1, 3, 3)                                  |
| backbone.block16.sep_conv1.block.pointwise.weight            | backbone.block16.sep_conv1.block.pointwise.weight                                                                                                     | (728, 728, 1, 1)                                |
| backbone.block16.sep_conv2.block.bn_depth.*                  | backbone.block16.sep_conv2.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block16.sep_conv2.block.bn_point.*                  | backbone.block16.sep_conv2.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block16.sep_conv2.block.depthwise.weight            | backbone.block16.sep_conv2.block.depthwise.weight                                                                                                     | (728, 1, 3, 3)                                  |
| backbone.block16.sep_conv2.block.pointwise.weight            | backbone.block16.sep_conv2.block.pointwise.weight                                                                                                     | (728, 728, 1, 1)                                |
| backbone.block16.sep_conv3.block.bn_depth.*                  | backbone.block16.sep_conv3.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block16.sep_conv3.block.bn_point.*                  | backbone.block16.sep_conv3.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block16.sep_conv3.block.depthwise.weight            | backbone.block16.sep_conv3.block.depthwise.weight                                                                                                     | (728, 1, 3, 3)                                  |
| backbone.block16.sep_conv3.block.pointwise.weight            | backbone.block16.sep_conv3.block.pointwise.weight                                                                                                     | (728, 728, 1, 1)                                |
| backbone.block17.sep_conv1.block.bn_depth.*                  | backbone.block17.sep_conv1.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block17.sep_conv1.block.bn_point.*                  | backbone.block17.sep_conv1.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block17.sep_conv1.block.depthwise.weight            | backbone.block17.sep_conv1.block.depthwise.weight                                                                                                     | (728, 1, 3, 3)                                  |
| backbone.block17.sep_conv1.block.pointwise.weight            | backbone.block17.sep_conv1.block.pointwise.weight                                                                                                     | (728, 728, 1, 1)                                |
| backbone.block17.sep_conv2.block.bn_depth.*                  | backbone.block17.sep_conv2.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block17.sep_conv2.block.bn_point.*                  | backbone.block17.sep_conv2.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block17.sep_conv2.block.depthwise.weight            | backbone.block17.sep_conv2.block.depthwise.weight                                                                                                     | (728, 1, 3, 3)                                  |
| backbone.block17.sep_conv2.block.pointwise.weight            | backbone.block17.sep_conv2.block.pointwise.weight                                                                                                     | (728, 728, 1, 1)                                |
| backbone.block17.sep_conv3.block.bn_depth.*                  | backbone.block17.sep_conv3.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block17.sep_conv3.block.bn_point.*                  | backbone.block17.sep_conv3.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block17.sep_conv3.block.depthwise.weight            | backbone.block17.sep_conv3.block.depthwise.weight                                                                                                     | (728, 1, 3, 3)                                  |
| backbone.block17.sep_conv3.block.pointwise.weight            | backbone.block17.sep_conv3.block.pointwise.weight                                                                                                     | (728, 728, 1, 1)                                |
| backbone.block18.sep_conv1.block.bn_depth.*                  | backbone.block18.sep_conv1.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block18.sep_conv1.block.bn_point.*                  | backbone.block18.sep_conv1.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block18.sep_conv1.block.depthwise.weight            | backbone.block18.sep_conv1.block.depthwise.weight                                                                                                     | (728, 1, 3, 3)                                  |
| backbone.block18.sep_conv1.block.pointwise.weight            | backbone.block18.sep_conv1.block.pointwise.weight                                                                                                     | (728, 728, 1, 1)                                |
| backbone.block18.sep_conv2.block.bn_depth.*                  | backbone.block18.sep_conv2.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block18.sep_conv2.block.bn_point.*                  | backbone.block18.sep_conv2.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block18.sep_conv2.block.depthwise.weight            | backbone.block18.sep_conv2.block.depthwise.weight                                                                                                     | (728, 1, 3, 3)                                  |
| backbone.block18.sep_conv2.block.pointwise.weight            | backbone.block18.sep_conv2.block.pointwise.weight                                                                                                     | (728, 728, 1, 1)                                |
| backbone.block18.sep_conv3.block.bn_depth.*                  | backbone.block18.sep_conv3.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block18.sep_conv3.block.bn_point.*                  | backbone.block18.sep_conv3.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block18.sep_conv3.block.depthwise.weight            | backbone.block18.sep_conv3.block.depthwise.weight                                                                                                     | (728, 1, 3, 3)                                  |
| backbone.block18.sep_conv3.block.pointwise.weight            | backbone.block18.sep_conv3.block.pointwise.weight                                                                                                     | (728, 728, 1, 1)                                |
| backbone.block19.sep_conv1.block.bn_depth.*                  | backbone.block19.sep_conv1.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block19.sep_conv1.block.bn_point.*                  | backbone.block19.sep_conv1.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block19.sep_conv1.block.depthwise.weight            | backbone.block19.sep_conv1.block.depthwise.weight                                                                                                     | (728, 1, 3, 3)                                  |
| backbone.block19.sep_conv1.block.pointwise.weight            | backbone.block19.sep_conv1.block.pointwise.weight                                                                                                     | (728, 728, 1, 1)                                |
| backbone.block19.sep_conv2.block.bn_depth.*                  | backbone.block19.sep_conv2.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block19.sep_conv2.block.bn_point.*                  | backbone.block19.sep_conv2.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block19.sep_conv2.block.depthwise.weight            | backbone.block19.sep_conv2.block.depthwise.weight                                                                                                     | (728, 1, 3, 3)                                  |
| backbone.block19.sep_conv2.block.pointwise.weight            | backbone.block19.sep_conv2.block.pointwise.weight                                                                                                     | (728, 728, 1, 1)                                |
| backbone.block19.sep_conv3.block.bn_depth.*                  | backbone.block19.sep_conv3.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block19.sep_conv3.block.bn_point.*                  | backbone.block19.sep_conv3.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block19.sep_conv3.block.depthwise.weight            | backbone.block19.sep_conv3.block.depthwise.weight                                                                                                     | (728, 1, 3, 3)                                  |
| backbone.block19.sep_conv3.block.pointwise.weight            | backbone.block19.sep_conv3.block.pointwise.weight                                                                                                     | (728, 728, 1, 1)                                |
| backbone.block2.bn.*                                         | backbone.block2.bn.{bias,num_batches_tracked,running_mean,running_var,weight}                                                                         | (256,) () (256,) (256,) (256,)                  |
| backbone.block2.conv.weight                                  | backbone.block2.conv.weight                                                                                                                           | (256, 128, 1, 1)                                |
| backbone.block2.sep_conv1.block.bn_depth.*                   | backbone.block2.sep_conv1.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (128,) () (128,) (128,) (128,)                  |
| backbone.block2.sep_conv1.block.bn_point.*                   | backbone.block2.sep_conv1.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (256,) () (256,) (256,) (256,)                  |
| backbone.block2.sep_conv1.block.depthwise.weight             | backbone.block2.sep_conv1.block.depthwise.weight                                                                                                      | (128, 1, 3, 3)                                  |
| backbone.block2.sep_conv1.block.pointwise.weight             | backbone.block2.sep_conv1.block.pointwise.weight                                                                                                      | (256, 128, 1, 1)                                |
| backbone.block2.sep_conv2.block.bn_depth.*                   | backbone.block2.sep_conv2.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (256,) () (256,) (256,) (256,)                  |
| backbone.block2.sep_conv2.block.bn_point.*                   | backbone.block2.sep_conv2.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (256,) () (256,) (256,) (256,)                  |
| backbone.block2.sep_conv2.block.depthwise.weight             | backbone.block2.sep_conv2.block.depthwise.weight                                                                                                      | (256, 1, 3, 3)                                  |
| backbone.block2.sep_conv2.block.pointwise.weight             | backbone.block2.sep_conv2.block.pointwise.weight                                                                                                      | (256, 256, 1, 1)                                |
| backbone.block2.sep_conv3.block.bn_depth.*                   | backbone.block2.sep_conv3.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (256,) () (256,) (256,) (256,)                  |
| backbone.block2.sep_conv3.block.bn_point.*                   | backbone.block2.sep_conv3.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (256,) () (256,) (256,) (256,)                  |
| backbone.block2.sep_conv3.block.depthwise.weight             | backbone.block2.sep_conv3.block.depthwise.weight                                                                                                      | (256, 1, 3, 3)                                  |
| backbone.block2.sep_conv3.block.pointwise.weight             | backbone.block2.sep_conv3.block.pointwise.weight                                                                                                      | (256, 256, 1, 1)                                |
| backbone.block20.bn.*                                        | backbone.block20.bn.{bias,num_batches_tracked,running_mean,running_var,weight}                                                                        | (1024,) () (1024,) (1024,) (1024,)              |
| backbone.block20.conv.weight                                 | backbone.block20.conv.weight                                                                                                                          | (1024, 728, 1, 1)                               |
| backbone.block20.sep_conv1.block.bn_depth.*                  | backbone.block20.sep_conv1.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block20.sep_conv1.block.bn_point.*                  | backbone.block20.sep_conv1.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block20.sep_conv1.block.depthwise.weight            | backbone.block20.sep_conv1.block.depthwise.weight                                                                                                     | (728, 1, 3, 3)                                  |
| backbone.block20.sep_conv1.block.pointwise.weight            | backbone.block20.sep_conv1.block.pointwise.weight                                                                                                     | (728, 728, 1, 1)                                |
| backbone.block20.sep_conv2.block.bn_depth.*                  | backbone.block20.sep_conv2.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block20.sep_conv2.block.bn_point.*                  | backbone.block20.sep_conv2.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (1024,) () (1024,) (1024,) (1024,)              |
| backbone.block20.sep_conv2.block.depthwise.weight            | backbone.block20.sep_conv2.block.depthwise.weight                                                                                                     | (728, 1, 3, 3)                                  |
| backbone.block20.sep_conv2.block.pointwise.weight            | backbone.block20.sep_conv2.block.pointwise.weight                                                                                                     | (1024, 728, 1, 1)                               |
| backbone.block20.sep_conv3.block.bn_depth.*                  | backbone.block20.sep_conv3.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (1024,) () (1024,) (1024,) (1024,)              |
| backbone.block20.sep_conv3.block.bn_point.*                  | backbone.block20.sep_conv3.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (1024,) () (1024,) (1024,) (1024,)              |
| backbone.block20.sep_conv3.block.depthwise.weight            | backbone.block20.sep_conv3.block.depthwise.weight                                                                                                     | (1024, 1, 3, 3)                                 |
| backbone.block20.sep_conv3.block.pointwise.weight            | backbone.block20.sep_conv3.block.pointwise.weight                                                                                                     | (1024, 1024, 1, 1)                              |
| backbone.block21.sep_conv1.block.bn_depth.*                  | backbone.block21.sep_conv1.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (1024,) () (1024,) (1024,) (1024,)              |
| backbone.block21.sep_conv1.block.bn_point.*                  | backbone.block21.sep_conv1.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (1536,) () (1536,) (1536,) (1536,)              |
| backbone.block21.sep_conv1.block.depthwise.weight            | backbone.block21.sep_conv1.block.depthwise.weight                                                                                                     | (1024, 1, 3, 3)                                 |
| backbone.block21.sep_conv1.block.pointwise.weight            | backbone.block21.sep_conv1.block.pointwise.weight                                                                                                     | (1536, 1024, 1, 1)                              |
| backbone.block21.sep_conv2.block.bn_depth.*                  | backbone.block21.sep_conv2.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (1536,) () (1536,) (1536,) (1536,)              |
| backbone.block21.sep_conv2.block.bn_point.*                  | backbone.block21.sep_conv2.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (1536,) () (1536,) (1536,) (1536,)              |
| backbone.block21.sep_conv2.block.depthwise.weight            | backbone.block21.sep_conv2.block.depthwise.weight                                                                                                     | (1536, 1, 3, 3)                                 |
| backbone.block21.sep_conv2.block.pointwise.weight            | backbone.block21.sep_conv2.block.pointwise.weight                                                                                                     | (1536, 1536, 1, 1)                              |
| backbone.block21.sep_conv3.block.bn_depth.*                  | backbone.block21.sep_conv3.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (1536,) () (1536,) (1536,) (1536,)              |
| backbone.block21.sep_conv3.block.bn_point.*                  | backbone.block21.sep_conv3.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (2048,) () (2048,) (2048,) (2048,)              |
| backbone.block21.sep_conv3.block.depthwise.weight            | backbone.block21.sep_conv3.block.depthwise.weight                                                                                                     | (1536, 1, 3, 3)                                 |
| backbone.block21.sep_conv3.block.pointwise.weight            | backbone.block21.sep_conv3.block.pointwise.weight                                                                                                     | (2048, 1536, 1, 1)                              |
| backbone.block3.bn.*                                         | backbone.block3.bn.{bias,num_batches_tracked,running_mean,running_var,weight}                                                                         | (728,) () (728,) (728,) (728,)                  |
| backbone.block3.conv.weight                                  | backbone.block3.conv.weight                                                                                                                           | (728, 256, 1, 1)                                |
| backbone.block3.sep_conv1.block.bn_depth.*                   | backbone.block3.sep_conv1.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (256,) () (256,) (256,) (256,)                  |
| backbone.block3.sep_conv1.block.bn_point.*                   | backbone.block3.sep_conv1.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block3.sep_conv1.block.depthwise.weight             | backbone.block3.sep_conv1.block.depthwise.weight                                                                                                      | (256, 1, 3, 3)                                  |
| backbone.block3.sep_conv1.block.pointwise.weight             | backbone.block3.sep_conv1.block.pointwise.weight                                                                                                      | (728, 256, 1, 1)                                |
| backbone.block3.sep_conv2.block.bn_depth.*                   | backbone.block3.sep_conv2.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block3.sep_conv2.block.bn_point.*                   | backbone.block3.sep_conv2.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block3.sep_conv2.block.depthwise.weight             | backbone.block3.sep_conv2.block.depthwise.weight                                                                                                      | (728, 1, 3, 3)                                  |
| backbone.block3.sep_conv2.block.pointwise.weight             | backbone.block3.sep_conv2.block.pointwise.weight                                                                                                      | (728, 728, 1, 1)                                |
| backbone.block3.sep_conv3.block.bn_depth.*                   | backbone.block3.sep_conv3.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block3.sep_conv3.block.bn_point.*                   | backbone.block3.sep_conv3.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block3.sep_conv3.block.depthwise.weight             | backbone.block3.sep_conv3.block.depthwise.weight                                                                                                      | (728, 1, 3, 3)                                  |
| backbone.block3.sep_conv3.block.pointwise.weight             | backbone.block3.sep_conv3.block.pointwise.weight                                                                                                      | (728, 728, 1, 1)                                |
| backbone.block4.sep_conv1.block.bn_depth.*                   | backbone.block4.sep_conv1.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block4.sep_conv1.block.bn_point.*                   | backbone.block4.sep_conv1.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block4.sep_conv1.block.depthwise.weight             | backbone.block4.sep_conv1.block.depthwise.weight                                                                                                      | (728, 1, 3, 3)                                  |
| backbone.block4.sep_conv1.block.pointwise.weight             | backbone.block4.sep_conv1.block.pointwise.weight                                                                                                      | (728, 728, 1, 1)                                |
| backbone.block4.sep_conv2.block.bn_depth.*                   | backbone.block4.sep_conv2.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block4.sep_conv2.block.bn_point.*                   | backbone.block4.sep_conv2.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block4.sep_conv2.block.depthwise.weight             | backbone.block4.sep_conv2.block.depthwise.weight                                                                                                      | (728, 1, 3, 3)                                  |
| backbone.block4.sep_conv2.block.pointwise.weight             | backbone.block4.sep_conv2.block.pointwise.weight                                                                                                      | (728, 728, 1, 1)                                |
| backbone.block4.sep_conv3.block.bn_depth.*                   | backbone.block4.sep_conv3.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block4.sep_conv3.block.bn_point.*                   | backbone.block4.sep_conv3.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block4.sep_conv3.block.depthwise.weight             | backbone.block4.sep_conv3.block.depthwise.weight                                                                                                      | (728, 1, 3, 3)                                  |
| backbone.block4.sep_conv3.block.pointwise.weight             | backbone.block4.sep_conv3.block.pointwise.weight                                                                                                      | (728, 728, 1, 1)                                |
| backbone.block5.sep_conv1.block.bn_depth.*                   | backbone.block5.sep_conv1.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block5.sep_conv1.block.bn_point.*                   | backbone.block5.sep_conv1.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block5.sep_conv1.block.depthwise.weight             | backbone.block5.sep_conv1.block.depthwise.weight                                                                                                      | (728, 1, 3, 3)                                  |
| backbone.block5.sep_conv1.block.pointwise.weight             | backbone.block5.sep_conv1.block.pointwise.weight                                                                                                      | (728, 728, 1, 1)                                |
| backbone.block5.sep_conv2.block.bn_depth.*                   | backbone.block5.sep_conv2.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block5.sep_conv2.block.bn_point.*                   | backbone.block5.sep_conv2.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block5.sep_conv2.block.depthwise.weight             | backbone.block5.sep_conv2.block.depthwise.weight                                                                                                      | (728, 1, 3, 3)                                  |
| backbone.block5.sep_conv2.block.pointwise.weight             | backbone.block5.sep_conv2.block.pointwise.weight                                                                                                      | (728, 728, 1, 1)                                |
| backbone.block5.sep_conv3.block.bn_depth.*                   | backbone.block5.sep_conv3.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block5.sep_conv3.block.bn_point.*                   | backbone.block5.sep_conv3.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block5.sep_conv3.block.depthwise.weight             | backbone.block5.sep_conv3.block.depthwise.weight                                                                                                      | (728, 1, 3, 3)                                  |
| backbone.block5.sep_conv3.block.pointwise.weight             | backbone.block5.sep_conv3.block.pointwise.weight                                                                                                      | (728, 728, 1, 1)                                |
| backbone.block6.sep_conv1.block.bn_depth.*                   | backbone.block6.sep_conv1.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block6.sep_conv1.block.bn_point.*                   | backbone.block6.sep_conv1.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block6.sep_conv1.block.depthwise.weight             | backbone.block6.sep_conv1.block.depthwise.weight                                                                                                      | (728, 1, 3, 3)                                  |
| backbone.block6.sep_conv1.block.pointwise.weight             | backbone.block6.sep_conv1.block.pointwise.weight                                                                                                      | (728, 728, 1, 1)                                |
| backbone.block6.sep_conv2.block.bn_depth.*                   | backbone.block6.sep_conv2.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block6.sep_conv2.block.bn_point.*                   | backbone.block6.sep_conv2.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block6.sep_conv2.block.depthwise.weight             | backbone.block6.sep_conv2.block.depthwise.weight                                                                                                      | (728, 1, 3, 3)                                  |
| backbone.block6.sep_conv2.block.pointwise.weight             | backbone.block6.sep_conv2.block.pointwise.weight                                                                                                      | (728, 728, 1, 1)                                |
| backbone.block6.sep_conv3.block.bn_depth.*                   | backbone.block6.sep_conv3.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block6.sep_conv3.block.bn_point.*                   | backbone.block6.sep_conv3.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block6.sep_conv3.block.depthwise.weight             | backbone.block6.sep_conv3.block.depthwise.weight                                                                                                      | (728, 1, 3, 3)                                  |
| backbone.block6.sep_conv3.block.pointwise.weight             | backbone.block6.sep_conv3.block.pointwise.weight                                                                                                      | (728, 728, 1, 1)                                |
| backbone.block7.sep_conv1.block.bn_depth.*                   | backbone.block7.sep_conv1.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block7.sep_conv1.block.bn_point.*                   | backbone.block7.sep_conv1.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block7.sep_conv1.block.depthwise.weight             | backbone.block7.sep_conv1.block.depthwise.weight                                                                                                      | (728, 1, 3, 3)                                  |
| backbone.block7.sep_conv1.block.pointwise.weight             | backbone.block7.sep_conv1.block.pointwise.weight                                                                                                      | (728, 728, 1, 1)                                |
| backbone.block7.sep_conv2.block.bn_depth.*                   | backbone.block7.sep_conv2.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block7.sep_conv2.block.bn_point.*                   | backbone.block7.sep_conv2.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block7.sep_conv2.block.depthwise.weight             | backbone.block7.sep_conv2.block.depthwise.weight                                                                                                      | (728, 1, 3, 3)                                  |
| backbone.block7.sep_conv2.block.pointwise.weight             | backbone.block7.sep_conv2.block.pointwise.weight                                                                                                      | (728, 728, 1, 1)                                |
| backbone.block7.sep_conv3.block.bn_depth.*                   | backbone.block7.sep_conv3.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block7.sep_conv3.block.bn_point.*                   | backbone.block7.sep_conv3.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block7.sep_conv3.block.depthwise.weight             | backbone.block7.sep_conv3.block.depthwise.weight                                                                                                      | (728, 1, 3, 3)                                  |
| backbone.block7.sep_conv3.block.pointwise.weight             | backbone.block7.sep_conv3.block.pointwise.weight                                                                                                      | (728, 728, 1, 1)                                |
| backbone.block8.sep_conv1.block.bn_depth.*                   | backbone.block8.sep_conv1.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block8.sep_conv1.block.bn_point.*                   | backbone.block8.sep_conv1.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block8.sep_conv1.block.depthwise.weight             | backbone.block8.sep_conv1.block.depthwise.weight                                                                                                      | (728, 1, 3, 3)                                  |
| backbone.block8.sep_conv1.block.pointwise.weight             | backbone.block8.sep_conv1.block.pointwise.weight                                                                                                      | (728, 728, 1, 1)                                |
| backbone.block8.sep_conv2.block.bn_depth.*                   | backbone.block8.sep_conv2.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block8.sep_conv2.block.bn_point.*                   | backbone.block8.sep_conv2.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block8.sep_conv2.block.depthwise.weight             | backbone.block8.sep_conv2.block.depthwise.weight                                                                                                      | (728, 1, 3, 3)                                  |
| backbone.block8.sep_conv2.block.pointwise.weight             | backbone.block8.sep_conv2.block.pointwise.weight                                                                                                      | (728, 728, 1, 1)                                |
| backbone.block8.sep_conv3.block.bn_depth.*                   | backbone.block8.sep_conv3.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block8.sep_conv3.block.bn_point.*                   | backbone.block8.sep_conv3.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block8.sep_conv3.block.depthwise.weight             | backbone.block8.sep_conv3.block.depthwise.weight                                                                                                      | (728, 1, 3, 3)                                  |
| backbone.block8.sep_conv3.block.pointwise.weight             | backbone.block8.sep_conv3.block.pointwise.weight                                                                                                      | (728, 728, 1, 1)                                |
| backbone.block9.sep_conv1.block.bn_depth.*                   | backbone.block9.sep_conv1.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block9.sep_conv1.block.bn_point.*                   | backbone.block9.sep_conv1.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block9.sep_conv1.block.depthwise.weight             | backbone.block9.sep_conv1.block.depthwise.weight                                                                                                      | (728, 1, 3, 3)                                  |
| backbone.block9.sep_conv1.block.pointwise.weight             | backbone.block9.sep_conv1.block.pointwise.weight                                                                                                      | (728, 728, 1, 1)                                |
| backbone.block9.sep_conv2.block.bn_depth.*                   | backbone.block9.sep_conv2.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block9.sep_conv2.block.bn_point.*                   | backbone.block9.sep_conv2.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block9.sep_conv2.block.depthwise.weight             | backbone.block9.sep_conv2.block.depthwise.weight                                                                                                      | (728, 1, 3, 3)                                  |
| backbone.block9.sep_conv2.block.pointwise.weight             | backbone.block9.sep_conv2.block.pointwise.weight                                                                                                      | (728, 728, 1, 1)                                |
| backbone.block9.sep_conv3.block.bn_depth.*                   | backbone.block9.sep_conv3.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block9.sep_conv3.block.bn_point.*                   | backbone.block9.sep_conv3.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block9.sep_conv3.block.depthwise.weight             | backbone.block9.sep_conv3.block.depthwise.weight                                                                                                      | (728, 1, 3, 3)                                  |
| backbone.block9.sep_conv3.block.pointwise.weight             | backbone.block9.sep_conv3.block.pointwise.weight                                                                                                      | (728, 728, 1, 1)                                |
| backbone.bn1.*                                               | backbone.bn1.{bias,num_batches_tracked,running_mean,running_var,weight}                                                                               | (32,) () (32,) (32,) (32,)                      |
| backbone.bn2.*                                               | backbone.bn2.{bias,num_batches_tracked,running_mean,running_var,weight}                                                                               | (64,) () (64,) (64,) (64,)                      |
| backbone.conv1.weight                                        | backbone.conv1.weight                                                                                                                                 | (32, 3, 3, 3)                                   |
| backbone.conv2.weight                                        | backbone.conv2.weight                                                                                                                                 | (64, 32, 3, 3)                                  |
| ins_embed_head.center_head.0.*                               | ins_embed_head.center_head.0.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}                               | (128,) () (128,) (128,) (128,) (128,128,3,3)    |
| ins_embed_head.center_head.1.*                               | ins_embed_head.center_head.1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}                               | (32,) () (32,) (32,) (32,) (32,128,3,3)         |
| ins_embed_head.center_predictor.*                            | ins_embed_head.center_predictor.{bias,weight}                                                                                                         | (1,) (1,32,1,1)                                 |
| ins_embed_head.decoder.res2.fuse_conv.depthwise.*            | ins_embed_head.decoder.res2.fuse_conv.depthwise.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}            | (160,) () (160,) (160,) (160,) (160,1,5,5)      |
| ins_embed_head.decoder.res2.fuse_conv.pointwise.*            | ins_embed_head.decoder.res2.fuse_conv.pointwise.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}            | (128,) () (128,) (128,) (128,) (128,160,1,1)    |
| ins_embed_head.decoder.res2.project_conv.*                   | ins_embed_head.decoder.res2.project_conv.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}                   | (32,) () (32,) (32,) (32,) (32,256,1,1)         |
| ins_embed_head.decoder.res3.fuse_conv.depthwise.*            | ins_embed_head.decoder.res3.fuse_conv.depthwise.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}            | (320,) () (320,) (320,) (320,) (320,1,5,5)      |
| ins_embed_head.decoder.res3.fuse_conv.pointwise.*            | ins_embed_head.decoder.res3.fuse_conv.pointwise.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}            | (128,) () (128,) (128,) (128,) (128,320,1,1)    |
| ins_embed_head.decoder.res3.project_conv.*                   | ins_embed_head.decoder.res3.project_conv.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}                   | (64,) () (64,) (64,) (64,) (64,728,1,1)         |
| ins_embed_head.decoder.res5.project_conv.convs.0.*           | ins_embed_head.decoder.res5.project_conv.convs.0.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}           | (256,) () (256,) (256,) (256,) (256,2048,1,1)   |
| ins_embed_head.decoder.res5.project_conv.convs.1.depthwise.* | ins_embed_head.decoder.res5.project_conv.convs.1.depthwise.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight} | (2048,) () (2048,) (2048,) (2048,) (2048,1,3,3) |
| ins_embed_head.decoder.res5.project_conv.convs.1.pointwise.* | ins_embed_head.decoder.res5.project_conv.convs.1.pointwise.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight} | (256,) () (256,) (256,) (256,) (256,2048,1,1)   |
| ins_embed_head.decoder.res5.project_conv.convs.2.depthwise.* | ins_embed_head.decoder.res5.project_conv.convs.2.depthwise.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight} | (2048,) () (2048,) (2048,) (2048,) (2048,1,3,3) |
| ins_embed_head.decoder.res5.project_conv.convs.2.pointwise.* | ins_embed_head.decoder.res5.project_conv.convs.2.pointwise.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight} | (256,) () (256,) (256,) (256,) (256,2048,1,1)   |
| ins_embed_head.decoder.res5.project_conv.convs.3.depthwise.* | ins_embed_head.decoder.res5.project_conv.convs.3.depthwise.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight} | (2048,) () (2048,) (2048,) (2048,) (2048,1,3,3) |
| ins_embed_head.decoder.res5.project_conv.convs.3.pointwise.* | ins_embed_head.decoder.res5.project_conv.convs.3.pointwise.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight} | (256,) () (256,) (256,) (256,) (256,2048,1,1)   |
| ins_embed_head.decoder.res5.project_conv.convs.4.1.*         | ins_embed_head.decoder.res5.project_conv.convs.4.1.{bias,weight}                                                                                      | (256,) (256,2048,1,1)                           |
| ins_embed_head.decoder.res5.project_conv.project.*           | ins_embed_head.decoder.res5.project_conv.project.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}           | (256,) () (256,) (256,) (256,) (256,1280,1,1)   |
| ins_embed_head.offset_head.depthwise.*                       | ins_embed_head.offset_head.depthwise.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}                       | (128,) () (128,) (128,) (128,) (128,1,5,5)      |
| ins_embed_head.offset_head.pointwise.*                       | ins_embed_head.offset_head.pointwise.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}                       | (32,) () (32,) (32,) (32,) (32,128,1,1)         |
| ins_embed_head.offset_predictor.*                            | ins_embed_head.offset_predictor.{bias,weight}                                                                                                         | (2,) (2,32,1,1)                                 |
| sem_seg_head.decoder.res2.fuse_conv.depthwise.*              | sem_seg_head.decoder.res2.fuse_conv.depthwise.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}              | (288,) () (288,) (288,) (288,) (288,1,5,5)      |
| sem_seg_head.decoder.res2.fuse_conv.pointwise.*              | sem_seg_head.decoder.res2.fuse_conv.pointwise.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}              | (256,) () (256,) (256,) (256,) (256,288,1,1)    |
| sem_seg_head.decoder.res2.project_conv.*                     | sem_seg_head.decoder.res2.project_conv.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}                     | (32,) () (32,) (32,) (32,) (32,256,1,1)         |
| sem_seg_head.decoder.res3.fuse_conv.depthwise.*              | sem_seg_head.decoder.res3.fuse_conv.depthwise.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}              | (320,) () (320,) (320,) (320,) (320,1,5,5)      |
| sem_seg_head.decoder.res3.fuse_conv.pointwise.*              | sem_seg_head.decoder.res3.fuse_conv.pointwise.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}              | (256,) () (256,) (256,) (256,) (256,320,1,1)    |
| sem_seg_head.decoder.res3.project_conv.*                     | sem_seg_head.decoder.res3.project_conv.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}                     | (64,) () (64,) (64,) (64,) (64,728,1,1)         |
| sem_seg_head.decoder.res5.project_conv.convs.0.*             | sem_seg_head.decoder.res5.project_conv.convs.0.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}             | (256,) () (256,) (256,) (256,) (256,2048,1,1)   |
| sem_seg_head.decoder.res5.project_conv.convs.1.depthwise.*   | sem_seg_head.decoder.res5.project_conv.convs.1.depthwise.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}   | (2048,) () (2048,) (2048,) (2048,) (2048,1,3,3) |
| sem_seg_head.decoder.res5.project_conv.convs.1.pointwise.*   | sem_seg_head.decoder.res5.project_conv.convs.1.pointwise.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) () (256,) (256,) (256,) (256,2048,1,1)   |
| sem_seg_head.decoder.res5.project_conv.convs.2.depthwise.*   | sem_seg_head.decoder.res5.project_conv.convs.2.depthwise.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}   | (2048,) () (2048,) (2048,) (2048,) (2048,1,3,3) |
| sem_seg_head.decoder.res5.project_conv.convs.2.pointwise.*   | sem_seg_head.decoder.res5.project_conv.convs.2.pointwise.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) () (256,) (256,) (256,) (256,2048,1,1)   |
| sem_seg_head.decoder.res5.project_conv.convs.3.depthwise.*   | sem_seg_head.decoder.res5.project_conv.convs.3.depthwise.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}   | (2048,) () (2048,) (2048,) (2048,) (2048,1,3,3) |
| sem_seg_head.decoder.res5.project_conv.convs.3.pointwise.*   | sem_seg_head.decoder.res5.project_conv.convs.3.pointwise.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) () (256,) (256,) (256,) (256,2048,1,1)   |
| sem_seg_head.decoder.res5.project_conv.convs.4.1.*           | sem_seg_head.decoder.res5.project_conv.convs.4.1.{bias,weight}                                                                                        | (256,) (256,2048,1,1)                           |
| sem_seg_head.decoder.res5.project_conv.project.*             | sem_seg_head.decoder.res5.project_conv.project.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}             | (256,) () (256,) (256,) (256,) (256,1280,1,1)   |
| sem_seg_head.head.depthwise.*                                | sem_seg_head.head.depthwise.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}                                | (256,) () (256,) (256,) (256,) (256,1,5,5)      |
| sem_seg_head.head.pointwise.*                                | sem_seg_head.head.pointwise.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}                                | (256,) () (256,) (256,) (256,) (256,256,1,1)    |
| sem_seg_head.predictor.*                                     | sem_seg_head.predictor.{bias,weight}                                                                                                                  | (19,) (19,256,1,1)                              |
[5m[31mWARNING[0m [32m[06/28 13:32:36 fvcore.common.checkpoint]: [0mSome model parameters or buffers are not found in the checkpoint:
[34mins_embed_head.decoder.res5.project_conv.qconcat.convs.0.{bias, weight}[0m
[34mins_embed_head.decoder.res5.project_conv.qconcat.convs.1.{bias, weight}[0m
[34mins_embed_head.decoder.res5.project_conv.qconcat.convs.2.{bias, weight}[0m
[34mins_embed_head.decoder.res5.project_conv.qconcat.convs.3.{bias, weight}[0m
[34mins_embed_head.decoder.res5.project_conv.qconcat.convs.4.{bias, weight}[0m
[34mins_embed_head.qconcat.res2.conv1.{bias, weight}[0m
[34mins_embed_head.qconcat.res2.conv2.{bias, weight}[0m
[34mins_embed_head.qconcat.res3.conv1.{bias, weight}[0m
[34mins_embed_head.qconcat.res3.conv2.{bias, weight}[0m
[34msem_seg_head.decoder.res5.project_conv.qconcat.convs.0.{bias, weight}[0m
[34msem_seg_head.decoder.res5.project_conv.qconcat.convs.1.{bias, weight}[0m
[34msem_seg_head.decoder.res5.project_conv.qconcat.convs.2.{bias, weight}[0m
[34msem_seg_head.decoder.res5.project_conv.qconcat.convs.3.{bias, weight}[0m
[34msem_seg_head.decoder.res5.project_conv.qconcat.convs.4.{bias, weight}[0m
[34msem_seg_head.qconcat.res2.conv1.{bias, weight}[0m
[34msem_seg_head.qconcat.res2.conv2.{bias, weight}[0m
[34msem_seg_head.qconcat.res3.conv1.{bias, weight}[0m
[34msem_seg_head.qconcat.res3.conv2.{bias, weight}[0m
[32m[06/28 13:32:36 d2.data.datasets.cityscapes_panoptic]: [0m3 cities found in 'datasets/cityscapes/leftImg8bit/val'.
[32m[06/28 13:32:36 d2.data.dataset_mapper]: [0m[DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(1024, 1024), max_size=2048, sample_style='choice')]
[32m[06/28 13:32:36 d2.data.common]: [0mSerializing 500 elements to byte tensors and concatenating them all ...
[32m[06/28 13:32:36 d2.data.common]: [0mSerialized dataset takes 0.74 MiB
[32m[06/28 13:32:36 d2.evaluation.evaluator]: [0mStart inference on 500 batches
[32m[06/28 13:32:36 d2.evaluation.cityscapes_evaluation]: [0mWriting cityscapes results to temporary directory /tmp/cityscapes_eval_qnm_2ctf ...
[32m[06/28 13:32:36 d2.evaluation.cityscapes_evaluation]: [0mWriting cityscapes results to temporary directory /tmp/cityscapes_eval_710h_q3e ...
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:32:47 d2.evaluation.evaluator]: [0mInference done 1/500. Dataloading: 0.8420 s/iter. Inference: 10.3212 s/iter. Eval: 0.2057 s/iter. Total: 11.3716 s/iter. ETA=1:34:34
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:32:57 d2.evaluation.evaluator]: [0mInference done 2/500. Dataloading: 0.4241 s/iter. Inference: 9.7422 s/iter. Eval: 0.1920 s/iter. Total: 10.3601 s/iter. ETA=1:25:59
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:33:06 d2.evaluation.evaluator]: [0mInference done 3/500. Dataloading: 0.2838 s/iter. Inference: 9.4355 s/iter. Eval: 0.2072 s/iter. Total: 9.9278 s/iter. ETA=1:22:14
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:33:15 d2.evaluation.evaluator]: [0mInference done 4/500. Dataloading: 0.2198 s/iter. Inference: 9.2839 s/iter. Eval: 0.2162 s/iter. Total: 9.7210 s/iter. ETA=1:20:21
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:33:24 d2.evaluation.evaluator]: [0mInference done 5/500. Dataloading: 0.1759 s/iter. Inference: 9.2419 s/iter. Eval: 0.2493 s/iter. Total: 9.6680 s/iter. ETA=1:19:45
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  8000, 10000], device='cuda:0')
[32m[06/28 13:33:34 d2.evaluation.evaluator]: [0mInference done 6/500. Dataloading: 0.0000 s/iter. Inference: 8.8097 s/iter. Eval: 0.3992 s/iter. Total: 9.2089 s/iter. ETA=1:15:49
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:33:44 d2.evaluation.evaluator]: [0mInference done 7/500. Dataloading: 0.0028 s/iter. Inference: 9.3102 s/iter. Eval: 0.2696 s/iter. Total: 9.5828 s/iter. ETA=1:18:44
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  4,  6,  7,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:33:53 d2.evaluation.evaluator]: [0mInference done 8/500. Dataloading: 0.0106 s/iter. Inference: 9.1464 s/iter. Eval: 0.2812 s/iter. Total: 9.4383 s/iter. ETA=1:17:23
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  4,  5,  6,  7,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:34:02 d2.evaluation.evaluator]: [0mInference done 9/500. Dataloading: 0.0080 s/iter. Inference: 9.0356 s/iter. Eval: 0.2879 s/iter. Total: 9.3317 s/iter. ETA=1:16:21
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  4,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:34:11 d2.evaluation.evaluator]: [0mInference done 10/500. Dataloading: 0.0064 s/iter. Inference: 8.9896 s/iter. Eval: 0.3114 s/iter. Total: 9.3077 s/iter. ETA=1:16:00
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  4,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:34:21 d2.evaluation.evaluator]: [0mInference done 11/500. Dataloading: 0.0054 s/iter. Inference: 9.0707 s/iter. Eval: 0.2963 s/iter. Total: 9.3726 s/iter. ETA=1:16:23
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:34:29 d2.evaluation.evaluator]: [0mInference done 12/500. Dataloading: 0.0055 s/iter. Inference: 8.9692 s/iter. Eval: 0.2888 s/iter. Total: 9.2637 s/iter. ETA=1:15:20
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:34:38 d2.evaluation.evaluator]: [0mInference done 13/500. Dataloading: 0.0050 s/iter. Inference: 8.9440 s/iter. Eval: 0.2830 s/iter. Total: 9.2323 s/iter. ETA=1:14:56
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:34:47 d2.evaluation.evaluator]: [0mInference done 14/500. Dataloading: 0.0045 s/iter. Inference: 8.9113 s/iter. Eval: 0.2785 s/iter. Total: 9.1945 s/iter. ETA=1:14:28
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  4,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:34:57 d2.evaluation.evaluator]: [0mInference done 15/500. Dataloading: 0.0045 s/iter. Inference: 8.9561 s/iter. Eval: 0.2808 s/iter. Total: 9.2417 s/iter. ETA=1:14:42
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  4,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:35:06 d2.evaluation.evaluator]: [0mInference done 16/500. Dataloading: 0.0047 s/iter. Inference: 8.9236 s/iter. Eval: 0.2816 s/iter. Total: 9.2101 s/iter. ETA=1:14:17
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:35:16 d2.evaluation.evaluator]: [0mInference done 17/500. Dataloading: 0.0043 s/iter. Inference: 9.0209 s/iter. Eval: 0.2769 s/iter. Total: 9.3023 s/iter. ETA=1:14:52
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:35:25 d2.evaluation.evaluator]: [0mInference done 18/500. Dataloading: 0.0040 s/iter. Inference: 9.0175 s/iter. Eval: 0.2729 s/iter. Total: 9.2946 s/iter. ETA=1:14:39
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  4,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:35:34 d2.evaluation.evaluator]: [0mInference done 19/500. Dataloading: 0.0037 s/iter. Inference: 8.9863 s/iter. Eval: 0.2701 s/iter. Total: 9.2603 s/iter. ETA=1:14:14
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:35:43 d2.evaluation.evaluator]: [0mInference done 20/500. Dataloading: 0.0039 s/iter. Inference: 8.9637 s/iter. Eval: 0.2674 s/iter. Total: 9.2353 s/iter. ETA=1:13:52
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  7,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:35:52 d2.evaluation.evaluator]: [0mInference done 21/500. Dataloading: 0.0037 s/iter. Inference: 8.9458 s/iter. Eval: 0.2641 s/iter. Total: 9.2139 s/iter. ETA=1:13:33
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:36:01 d2.evaluation.evaluator]: [0mInference done 22/500. Dataloading: 0.0035 s/iter. Inference: 8.9537 s/iter. Eval: 0.2620 s/iter. Total: 9.2195 s/iter. ETA=1:13:26
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  7,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:36:12 d2.evaluation.evaluator]: [0mInference done 23/500. Dataloading: 0.0058 s/iter. Inference: 9.0242 s/iter. Eval: 0.2603 s/iter. Total: 9.2907 s/iter. ETA=1:13:51
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:36:21 d2.evaluation.evaluator]: [0mInference done 24/500. Dataloading: 0.0056 s/iter. Inference: 9.0324 s/iter. Eval: 0.2602 s/iter. Total: 9.2984 s/iter. ETA=1:13:46
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:36:30 d2.evaluation.evaluator]: [0mInference done 25/500. Dataloading: 0.0054 s/iter. Inference: 9.0335 s/iter. Eval: 0.2640 s/iter. Total: 9.3032 s/iter. ETA=1:13:39
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:36:39 d2.evaluation.evaluator]: [0mInference done 26/500. Dataloading: 0.0051 s/iter. Inference: 9.0061 s/iter. Eval: 0.2660 s/iter. Total: 9.2775 s/iter. ETA=1:13:17
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  4,  5,  6,  7,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:36:48 d2.evaluation.evaluator]: [0mInference done 27/500. Dataloading: 0.0049 s/iter. Inference: 8.9914 s/iter. Eval: 0.2640 s/iter. Total: 9.2605 s/iter. ETA=1:13:00
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:36:57 d2.evaluation.evaluator]: [0mInference done 28/500. Dataloading: 0.0048 s/iter. Inference: 8.9730 s/iter. Eval: 0.2627 s/iter. Total: 9.2407 s/iter. ETA=1:12:41
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:37:06 d2.evaluation.evaluator]: [0mInference done 29/500. Dataloading: 0.0046 s/iter. Inference: 8.9561 s/iter. Eval: 0.2618 s/iter. Total: 9.2228 s/iter. ETA=1:12:23
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  8000, 10000], device='cuda:0')
[32m[06/28 13:37:15 d2.evaluation.evaluator]: [0mInference done 30/500. Dataloading: 0.0045 s/iter. Inference: 8.9406 s/iter. Eval: 0.2624 s/iter. Total: 9.2078 s/iter. ETA=1:12:07
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  8000, 10000], device='cuda:0')
[32m[06/28 13:37:24 d2.evaluation.evaluator]: [0mInference done 31/500. Dataloading: 0.0046 s/iter. Inference: 8.9321 s/iter. Eval: 0.2626 s/iter. Total: 9.1996 s/iter. ETA=1:11:54
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:37:32 d2.evaluation.evaluator]: [0mInference done 32/500. Dataloading: 0.0052 s/iter. Inference: 8.9166 s/iter. Eval: 0.2638 s/iter. Total: 9.1858 s/iter. ETA=1:11:38
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  4,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:37:41 d2.evaluation.evaluator]: [0mInference done 33/500. Dataloading: 0.0050 s/iter. Inference: 8.8989 s/iter. Eval: 0.2650 s/iter. Total: 9.1692 s/iter. ETA=1:11:22
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  4,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:37:50 d2.evaluation.evaluator]: [0mInference done 34/500. Dataloading: 0.0048 s/iter. Inference: 8.8846 s/iter. Eval: 0.2650 s/iter. Total: 9.1546 s/iter. ETA=1:11:06
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  8000, 10000], device='cuda:0')
[32m[06/28 13:37:59 d2.evaluation.evaluator]: [0mInference done 35/500. Dataloading: 0.0047 s/iter. Inference: 8.8760 s/iter. Eval: 0.2661 s/iter. Total: 9.1470 s/iter. ETA=1:10:53
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:38:08 d2.evaluation.evaluator]: [0mInference done 36/500. Dataloading: 0.0047 s/iter. Inference: 8.8669 s/iter. Eval: 0.2654 s/iter. Total: 9.1372 s/iter. ETA=1:10:39
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  4,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:38:17 d2.evaluation.evaluator]: [0mInference done 37/500. Dataloading: 0.0045 s/iter. Inference: 8.8853 s/iter. Eval: 0.2643 s/iter. Total: 9.1543 s/iter. ETA=1:10:38
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  4,  5,  6,  7,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:38:26 d2.evaluation.evaluator]: [0mInference done 38/500. Dataloading: 0.0044 s/iter. Inference: 8.8796 s/iter. Eval: 0.2657 s/iter. Total: 9.1499 s/iter. ETA=1:10:27
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  4,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:38:36 d2.evaluation.evaluator]: [0mInference done 39/500. Dataloading: 0.0044 s/iter. Inference: 8.8790 s/iter. Eval: 0.2660 s/iter. Total: 9.1497 s/iter. ETA=1:10:17
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  4,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:38:44 d2.evaluation.evaluator]: [0mInference done 40/500. Dataloading: 0.0043 s/iter. Inference: 8.8745 s/iter. Eval: 0.2656 s/iter. Total: 9.1446 s/iter. ETA=1:10:06
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  4,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:38:53 d2.evaluation.evaluator]: [0mInference done 41/500. Dataloading: 0.0042 s/iter. Inference: 8.8683 s/iter. Eval: 0.2658 s/iter. Total: 9.1386 s/iter. ETA=1:09:54
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  7,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:39:02 d2.evaluation.evaluator]: [0mInference done 42/500. Dataloading: 0.0041 s/iter. Inference: 8.8622 s/iter. Eval: 0.2669 s/iter. Total: 9.1335 s/iter. ETA=1:09:43
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:39:11 d2.evaluation.evaluator]: [0mInference done 43/500. Dataloading: 0.0040 s/iter. Inference: 8.8495 s/iter. Eval: 0.2661 s/iter. Total: 9.1199 s/iter. ETA=1:09:27
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:39:21 d2.evaluation.evaluator]: [0mInference done 44/500. Dataloading: 0.0040 s/iter. Inference: 8.8648 s/iter. Eval: 0.2654 s/iter. Total: 9.1345 s/iter. ETA=1:09:25
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  4,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  6000,  8000, 10000], device='cuda:0')
[32m[06/28 13:39:30 d2.evaluation.evaluator]: [0mInference done 45/500. Dataloading: 0.0039 s/iter. Inference: 8.8730 s/iter. Eval: 0.2662 s/iter. Total: 9.1434 s/iter. ETA=1:09:20
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:39:39 d2.evaluation.evaluator]: [0mInference done 46/500. Dataloading: 0.0038 s/iter. Inference: 8.8732 s/iter. Eval: 0.2667 s/iter. Total: 9.1440 s/iter. ETA=1:09:11
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:39:48 d2.evaluation.evaluator]: [0mInference done 47/500. Dataloading: 0.0038 s/iter. Inference: 8.8691 s/iter. Eval: 0.2663 s/iter. Total: 9.1395 s/iter. ETA=1:09:00
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:39:53 d2.evaluation.evaluator]: [0mInference done 48/500. Dataloading: 0.0038 s/iter. Inference: 8.7778 s/iter. Eval: 0.2646 s/iter. Total: 9.0465 s/iter. ETA=1:08:08
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:40:07 d2.evaluation.evaluator]: [0mInference done 49/500. Dataloading: 0.0037 s/iter. Inference: 8.8817 s/iter. Eval: 0.2700 s/iter. Total: 9.1557 s/iter. ETA=1:08:49
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:40:13 d2.evaluation.evaluator]: [0mInference done 50/500. Dataloading: 0.0036 s/iter. Inference: 8.8146 s/iter. Eval: 0.2709 s/iter. Total: 9.0893 s/iter. ETA=1:08:10
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  4,  5,  6,  7,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:40:22 d2.evaluation.evaluator]: [0mInference done 52/500. Dataloading: 0.0035 s/iter. Inference: 8.6172 s/iter. Eval: 0.2710 s/iter. Total: 8.8920 s/iter. ETA=1:06:23
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:40:32 d2.evaluation.evaluator]: [0mInference done 54/500. Dataloading: 0.0034 s/iter. Inference: 8.4440 s/iter. Eval: 0.2693 s/iter. Total: 8.7170 s/iter. ETA=1:04:47
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:40:40 d2.evaluation.evaluator]: [0mInference done 56/500. Dataloading: 0.0034 s/iter. Inference: 8.2730 s/iter. Eval: 0.2673 s/iter. Total: 8.5439 s/iter. ETA=1:03:13
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:40:49 d2.evaluation.evaluator]: [0mInference done 58/500. Dataloading: 0.0033 s/iter. Inference: 8.1179 s/iter. Eval: 0.2660 s/iter. Total: 8.3873 s/iter. ETA=1:01:47
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  7,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:40:58 d2.evaluation.evaluator]: [0mInference done 60/500. Dataloading: 0.0032 s/iter. Inference: 7.9814 s/iter. Eval: 0.2662 s/iter. Total: 8.2511 s/iter. ETA=1:00:30
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:41:07 d2.evaluation.evaluator]: [0mInference done 62/500. Dataloading: 0.0031 s/iter. Inference: 7.8505 s/iter. Eval: 0.2656 s/iter. Total: 8.1195 s/iter. ETA=0:59:16
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:41:12 d2.evaluation.evaluator]: [0mInference done 63/500. Dataloading: 0.0032 s/iter. Inference: 7.7975 s/iter. Eval: 0.2658 s/iter. Total: 8.0668 s/iter. ETA=0:58:45
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:41:21 d2.evaluation.evaluator]: [0mInference done 65/500. Dataloading: 0.0032 s/iter. Inference: 7.6819 s/iter. Eval: 0.2652 s/iter. Total: 7.9504 s/iter. ETA=0:57:38
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  4,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:41:30 d2.evaluation.evaluator]: [0mInference done 67/500. Dataloading: 0.0031 s/iter. Inference: 7.5661 s/iter. Eval: 0.2644 s/iter. Total: 7.8337 s/iter. ETA=0:56:32
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:41:35 d2.evaluation.evaluator]: [0mInference done 68/500. Dataloading: 0.0030 s/iter. Inference: 7.5226 s/iter. Eval: 0.2644 s/iter. Total: 7.7902 s/iter. ETA=0:56:05
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:41:40 d2.evaluation.evaluator]: [0mInference done 69/500. Dataloading: 0.0030 s/iter. Inference: 7.4816 s/iter. Eval: 0.2637 s/iter. Total: 7.7486 s/iter. ETA=0:55:39
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  7,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:41:50 d2.evaluation.evaluator]: [0mInference done 71/500. Dataloading: 0.0034 s/iter. Inference: 7.3979 s/iter. Eval: 0.2638 s/iter. Total: 7.6653 s/iter. ETA=0:54:48
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  4,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:41:56 d2.evaluation.evaluator]: [0mInference done 72/500. Dataloading: 0.0034 s/iter. Inference: 7.3639 s/iter. Eval: 0.2642 s/iter. Total: 7.6317 s/iter. ETA=0:54:26
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  4,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:42:05 d2.evaluation.evaluator]: [0mInference done 74/500. Dataloading: 0.0033 s/iter. Inference: 7.2723 s/iter. Eval: 0.2637 s/iter. Total: 7.5395 s/iter. ETA=0:53:31
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  4,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:42:14 d2.evaluation.evaluator]: [0mInference done 76/500. Dataloading: 0.0033 s/iter. Inference: 7.1940 s/iter. Eval: 0.2641 s/iter. Total: 7.4615 s/iter. ETA=0:52:43
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  4,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:42:24 d2.evaluation.evaluator]: [0mInference done 78/500. Dataloading: 0.0032 s/iter. Inference: 7.1224 s/iter. Eval: 0.2638 s/iter. Total: 7.3896 s/iter. ETA=0:51:58
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:42:29 d2.evaluation.evaluator]: [0mInference done 79/500. Dataloading: 0.0036 s/iter. Inference: 7.0932 s/iter. Eval: 0.2642 s/iter. Total: 7.3612 s/iter. ETA=0:51:39
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  4,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:42:38 d2.evaluation.evaluator]: [0mInference done 81/500. Dataloading: 0.0036 s/iter. Inference: 7.0228 s/iter. Eval: 0.2632 s/iter. Total: 7.2897 s/iter. ETA=0:50:54
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  4,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 19], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10, 13], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  8000, 10000, 13001], device='cuda:0')
[32m[06/28 13:42:47 d2.evaluation.evaluator]: [0mInference done 83/500. Dataloading: 0.0035 s/iter. Inference: 6.9474 s/iter. Eval: 0.2628 s/iter. Total: 7.2139 s/iter. ETA=0:50:08
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:42:52 d2.evaluation.evaluator]: [0mInference done 84/500. Dataloading: 0.0035 s/iter. Inference: 6.9205 s/iter. Eval: 0.2628 s/iter. Total: 7.1869 s/iter. ETA=0:49:49
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:43:01 d2.evaluation.evaluator]: [0mInference done 86/500. Dataloading: 0.0035 s/iter. Inference: 6.8552 s/iter. Eval: 0.2622 s/iter. Total: 7.1211 s/iter. ETA=0:49:08
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  4,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:43:10 d2.evaluation.evaluator]: [0mInference done 88/500. Dataloading: 0.0039 s/iter. Inference: 6.7923 s/iter. Eval: 0.2618 s/iter. Total: 7.0581 s/iter. ETA=0:48:27
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:43:19 d2.evaluation.evaluator]: [0mInference done 90/500. Dataloading: 0.0038 s/iter. Inference: 6.7279 s/iter. Eval: 0.2610 s/iter. Total: 6.9929 s/iter. ETA=0:47:47
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:43:28 d2.evaluation.evaluator]: [0mInference done 92/500. Dataloading: 0.0037 s/iter. Inference: 6.6710 s/iter. Eval: 0.2609 s/iter. Total: 6.9359 s/iter. ETA=0:47:09
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:43:37 d2.evaluation.evaluator]: [0mInference done 94/500. Dataloading: 0.0037 s/iter. Inference: 6.6129 s/iter. Eval: 0.2609 s/iter. Total: 6.8776 s/iter. ETA=0:46:32
RESIZING OUTPUTS
INSTANCE LABELS tensor([0, 1], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10, 14], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000, 14001], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  4,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:43:45 d2.evaluation.evaluator]: [0mInference done 96/500. Dataloading: 0.0039 s/iter. Inference: 6.5585 s/iter. Eval: 0.2606 s/iter. Total: 6.8232 s/iter. ETA=0:45:56
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  4,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:43:54 d2.evaluation.evaluator]: [0mInference done 98/500. Dataloading: 0.0039 s/iter. Inference: 6.5089 s/iter. Eval: 0.2605 s/iter. Total: 6.7735 s/iter. ETA=0:45:22
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  4,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:44:01 d2.evaluation.evaluator]: [0mInference done 99/500. Dataloading: 0.0038 s/iter. Inference: 6.5045 s/iter. Eval: 0.2611 s/iter. Total: 6.7697 s/iter. ETA=0:45:14
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  4,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:44:06 d2.evaluation.evaluator]: [0mInference done 100/500. Dataloading: 0.0038 s/iter. Inference: 6.4862 s/iter. Eval: 0.2615 s/iter. Total: 6.7517 s/iter. ETA=0:45:00
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  8000, 10000], device='cuda:0')
[32m[06/28 13:44:12 d2.evaluation.evaluator]: [0mInference done 101/500. Dataloading: 0.0038 s/iter. Inference: 6.4770 s/iter. Eval: 0.2634 s/iter. Total: 6.7444 s/iter. ETA=0:44:51
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:44:18 d2.evaluation.evaluator]: [0mInference done 102/500. Dataloading: 0.0042 s/iter. Inference: 6.4704 s/iter. Eval: 0.2636 s/iter. Total: 6.7384 s/iter. ETA=0:44:41
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  4,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:44:26 d2.evaluation.evaluator]: [0mInference done 103/500. Dataloading: 0.0044 s/iter. Inference: 6.4806 s/iter. Eval: 0.2636 s/iter. Total: 6.7488 s/iter. ETA=0:44:39
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:44:33 d2.evaluation.evaluator]: [0mInference done 104/500. Dataloading: 0.0043 s/iter. Inference: 6.4823 s/iter. Eval: 0.2641 s/iter. Total: 6.7510 s/iter. ETA=0:44:33
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:44:40 d2.evaluation.evaluator]: [0mInference done 105/500. Dataloading: 0.0048 s/iter. Inference: 6.4838 s/iter. Eval: 0.2639 s/iter. Total: 6.7527 s/iter. ETA=0:44:27
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:44:46 d2.evaluation.evaluator]: [0mInference done 106/500. Dataloading: 0.0048 s/iter. Inference: 6.4807 s/iter. Eval: 0.2643 s/iter. Total: 6.7499 s/iter. ETA=0:44:19
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:44:53 d2.evaluation.evaluator]: [0mInference done 107/500. Dataloading: 0.0047 s/iter. Inference: 6.4816 s/iter. Eval: 0.2644 s/iter. Total: 6.7509 s/iter. ETA=0:44:13
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:45:00 d2.evaluation.evaluator]: [0mInference done 108/500. Dataloading: 0.0047 s/iter. Inference: 6.4889 s/iter. Eval: 0.2641 s/iter. Total: 6.7579 s/iter. ETA=0:44:09
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:45:07 d2.evaluation.evaluator]: [0mInference done 109/500. Dataloading: 0.0047 s/iter. Inference: 6.4878 s/iter. Eval: 0.2647 s/iter. Total: 6.7573 s/iter. ETA=0:44:02
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:45:14 d2.evaluation.evaluator]: [0mInference done 110/500. Dataloading: 0.0047 s/iter. Inference: 6.4887 s/iter. Eval: 0.2652 s/iter. Total: 6.7587 s/iter. ETA=0:43:55
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:45:21 d2.evaluation.evaluator]: [0mInference done 111/500. Dataloading: 0.0050 s/iter. Inference: 6.4927 s/iter. Eval: 0.2654 s/iter. Total: 6.7632 s/iter. ETA=0:43:50
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  4,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:45:29 d2.evaluation.evaluator]: [0mInference done 112/500. Dataloading: 0.0049 s/iter. Inference: 6.4988 s/iter. Eval: 0.2675 s/iter. Total: 6.7714 s/iter. ETA=0:43:47
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  8000, 10000], device='cuda:0')
[32m[06/28 13:45:36 d2.evaluation.evaluator]: [0mInference done 113/500. Dataloading: 0.0049 s/iter. Inference: 6.5049 s/iter. Eval: 0.2681 s/iter. Total: 6.7781 s/iter. ETA=0:43:43
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:45:45 d2.evaluation.evaluator]: [0mInference done 114/500. Dataloading: 0.0049 s/iter. Inference: 6.5173 s/iter. Eval: 0.2675 s/iter. Total: 6.7899 s/iter. ETA=0:43:40
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:45:51 d2.evaluation.evaluator]: [0mInference done 115/500. Dataloading: 0.0049 s/iter. Inference: 6.5167 s/iter. Eval: 0.2675 s/iter. Total: 6.7892 s/iter. ETA=0:43:33
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  4,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:45:59 d2.evaluation.evaluator]: [0mInference done 116/500. Dataloading: 0.0048 s/iter. Inference: 6.5221 s/iter. Eval: 0.2679 s/iter. Total: 6.7951 s/iter. ETA=0:43:29
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  4,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:46:07 d2.evaluation.evaluator]: [0mInference done 117/500. Dataloading: 0.0048 s/iter. Inference: 6.5331 s/iter. Eval: 0.2691 s/iter. Total: 6.8072 s/iter. ETA=0:43:27
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:46:14 d2.evaluation.evaluator]: [0mInference done 118/500. Dataloading: 0.0047 s/iter. Inference: 6.5399 s/iter. Eval: 0.2694 s/iter. Total: 6.8142 s/iter. ETA=0:43:23
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  4,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:46:22 d2.evaluation.evaluator]: [0mInference done 119/500. Dataloading: 0.0048 s/iter. Inference: 6.5431 s/iter. Eval: 0.2693 s/iter. Total: 6.8173 s/iter. ETA=0:43:17
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:46:29 d2.evaluation.evaluator]: [0mInference done 120/500. Dataloading: 0.0050 s/iter. Inference: 6.5448 s/iter. Eval: 0.2708 s/iter. Total: 6.8207 s/iter. ETA=0:43:11
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:46:36 d2.evaluation.evaluator]: [0mInference done 121/500. Dataloading: 0.0050 s/iter. Inference: 6.5430 s/iter. Eval: 0.2719 s/iter. Total: 6.8200 s/iter. ETA=0:43:04
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:46:43 d2.evaluation.evaluator]: [0mInference done 122/500. Dataloading: 0.0050 s/iter. Inference: 6.5458 s/iter. Eval: 0.2720 s/iter. Total: 6.8230 s/iter. ETA=0:42:59
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  8000, 10000], device='cuda:0')
[32m[06/28 13:46:49 d2.evaluation.evaluator]: [0mInference done 123/500. Dataloading: 0.0049 s/iter. Inference: 6.5459 s/iter. Eval: 0.2715 s/iter. Total: 6.8226 s/iter. ETA=0:42:52
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  4,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  8000, 10000], device='cuda:0')
[32m[06/28 13:46:56 d2.evaluation.evaluator]: [0mInference done 124/500. Dataloading: 0.0049 s/iter. Inference: 6.5475 s/iter. Eval: 0.2712 s/iter. Total: 6.8238 s/iter. ETA=0:42:45
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:47:04 d2.evaluation.evaluator]: [0mInference done 125/500. Dataloading: 0.0049 s/iter. Inference: 6.5501 s/iter. Eval: 0.2725 s/iter. Total: 6.8277 s/iter. ETA=0:42:40
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:47:11 d2.evaluation.evaluator]: [0mInference done 126/500. Dataloading: 0.0048 s/iter. Inference: 6.5530 s/iter. Eval: 0.2724 s/iter. Total: 6.8303 s/iter. ETA=0:42:34
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:47:18 d2.evaluation.evaluator]: [0mInference done 127/500. Dataloading: 0.0049 s/iter. Inference: 6.5560 s/iter. Eval: 0.2723 s/iter. Total: 6.8334 s/iter. ETA=0:42:28
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:47:25 d2.evaluation.evaluator]: [0mInference done 128/500. Dataloading: 0.0049 s/iter. Inference: 6.5558 s/iter. Eval: 0.2719 s/iter. Total: 6.8327 s/iter. ETA=0:42:21
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:47:32 d2.evaluation.evaluator]: [0mInference done 129/500. Dataloading: 0.0048 s/iter. Inference: 6.5537 s/iter. Eval: 0.2728 s/iter. Total: 6.8316 s/iter. ETA=0:42:14
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:47:39 d2.evaluation.evaluator]: [0mInference done 130/500. Dataloading: 0.0050 s/iter. Inference: 6.5562 s/iter. Eval: 0.2725 s/iter. Total: 6.8339 s/iter. ETA=0:42:08
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:47:46 d2.evaluation.evaluator]: [0mInference done 131/500. Dataloading: 0.0050 s/iter. Inference: 6.5605 s/iter. Eval: 0.2716 s/iter. Total: 6.8373 s/iter. ETA=0:42:02
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:47:53 d2.evaluation.evaluator]: [0mInference done 132/500. Dataloading: 0.0049 s/iter. Inference: 6.5649 s/iter. Eval: 0.2714 s/iter. Total: 6.8414 s/iter. ETA=0:41:57
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:48:02 d2.evaluation.evaluator]: [0mInference done 133/500. Dataloading: 0.0049 s/iter. Inference: 6.5750 s/iter. Eval: 0.2730 s/iter. Total: 6.8531 s/iter. ETA=0:41:55
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:48:10 d2.evaluation.evaluator]: [0mInference done 134/500. Dataloading: 0.0049 s/iter. Inference: 6.5823 s/iter. Eval: 0.2742 s/iter. Total: 6.8615 s/iter. ETA=0:41:51
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:48:16 d2.evaluation.evaluator]: [0mInference done 135/500. Dataloading: 0.0048 s/iter. Inference: 6.5801 s/iter. Eval: 0.2744 s/iter. Total: 6.8595 s/iter. ETA=0:41:43
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:48:23 d2.evaluation.evaluator]: [0mInference done 136/500. Dataloading: 0.0049 s/iter. Inference: 6.5816 s/iter. Eval: 0.2742 s/iter. Total: 6.8609 s/iter. ETA=0:41:37
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0, 138], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10, 13], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  8000, 10000, 13001], device='cuda:0')
[32m[06/28 13:48:30 d2.evaluation.evaluator]: [0mInference done 137/500. Dataloading: 0.0048 s/iter. Inference: 6.5814 s/iter. Eval: 0.2745 s/iter. Total: 6.8610 s/iter. ETA=0:41:30
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  4,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:48:38 d2.evaluation.evaluator]: [0mInference done 138/500. Dataloading: 0.0049 s/iter. Inference: 6.5850 s/iter. Eval: 0.2754 s/iter. Total: 6.8655 s/iter. ETA=0:41:25
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:48:45 d2.evaluation.evaluator]: [0mInference done 139/500. Dataloading: 0.0048 s/iter. Inference: 6.5897 s/iter. Eval: 0.2747 s/iter. Total: 6.8695 s/iter. ETA=0:41:19
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:48:52 d2.evaluation.evaluator]: [0mInference done 140/500. Dataloading: 0.0048 s/iter. Inference: 6.5883 s/iter. Eval: 0.2744 s/iter. Total: 6.8678 s/iter. ETA=0:41:12
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:48:57 d2.evaluation.evaluator]: [0mInference done 141/500. Dataloading: 0.0048 s/iter. Inference: 6.5801 s/iter. Eval: 0.2749 s/iter. Total: 6.8600 s/iter. ETA=0:41:02
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:49:04 d2.evaluation.evaluator]: [0mInference done 142/500. Dataloading: 0.0048 s/iter. Inference: 6.5772 s/iter. Eval: 0.2754 s/iter. Total: 6.8576 s/iter. ETA=0:40:55
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  4,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:49:11 d2.evaluation.evaluator]: [0mInference done 143/500. Dataloading: 0.0047 s/iter. Inference: 6.5820 s/iter. Eval: 0.2757 s/iter. Total: 6.8627 s/iter. ETA=0:40:49
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:49:19 d2.evaluation.evaluator]: [0mInference done 144/500. Dataloading: 0.0049 s/iter. Inference: 6.5861 s/iter. Eval: 0.2756 s/iter. Total: 6.8668 s/iter. ETA=0:40:44
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:49:27 d2.evaluation.evaluator]: [0mInference done 145/500. Dataloading: 0.0048 s/iter. Inference: 6.5916 s/iter. Eval: 0.2756 s/iter. Total: 6.8722 s/iter. ETA=0:40:39
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 47], device='cuda:0')
CLASS IDS tensor([ 0,  2,  4,  5,  6,  7,  8, 10, 13], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  8000, 10000, 13001], device='cuda:0')
[32m[06/28 13:49:33 d2.evaluation.evaluator]: [0mInference done 146/500. Dataloading: 0.0049 s/iter. Inference: 6.5894 s/iter. Eval: 0.2753 s/iter. Total: 6.8699 s/iter. ETA=0:40:31
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  8000, 10000], device='cuda:0')
[32m[06/28 13:49:40 d2.evaluation.evaluator]: [0mInference done 147/500. Dataloading: 0.0048 s/iter. Inference: 6.5898 s/iter. Eval: 0.2750 s/iter. Total: 6.8698 s/iter. ETA=0:40:25
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:49:47 d2.evaluation.evaluator]: [0mInference done 148/500. Dataloading: 0.0048 s/iter. Inference: 6.5888 s/iter. Eval: 0.2756 s/iter. Total: 6.8694 s/iter. ETA=0:40:18
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  6000,  8000, 10000], device='cuda:0')
[32m[06/28 13:49:53 d2.evaluation.evaluator]: [0mInference done 149/500. Dataloading: 0.0048 s/iter. Inference: 6.5852 s/iter. Eval: 0.2752 s/iter. Total: 6.8654 s/iter. ETA=0:40:09
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  4,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:49:59 d2.evaluation.evaluator]: [0mInference done 150/500. Dataloading: 0.0048 s/iter. Inference: 6.5799 s/iter. Eval: 0.2752 s/iter. Total: 6.8601 s/iter. ETA=0:40:01
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  4,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:50:05 d2.evaluation.evaluator]: [0mInference done 151/500. Dataloading: 0.0047 s/iter. Inference: 6.5756 s/iter. Eval: 0.2751 s/iter. Total: 6.8556 s/iter. ETA=0:39:52
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:50:12 d2.evaluation.evaluator]: [0mInference done 152/500. Dataloading: 0.0048 s/iter. Inference: 6.5722 s/iter. Eval: 0.2751 s/iter. Total: 6.8523 s/iter. ETA=0:39:44
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:50:18 d2.evaluation.evaluator]: [0mInference done 153/500. Dataloading: 0.0048 s/iter. Inference: 6.5657 s/iter. Eval: 0.2747 s/iter. Total: 6.8454 s/iter. ETA=0:39:35
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:50:23 d2.evaluation.evaluator]: [0mInference done 154/500. Dataloading: 0.0049 s/iter. Inference: 6.5546 s/iter. Eval: 0.2747 s/iter. Total: 6.8344 s/iter. ETA=0:39:24
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  8000, 10000], device='cuda:0')
[32m[06/28 13:50:37 d2.evaluation.evaluator]: [0mInference done 155/500. Dataloading: 0.0049 s/iter. Inference: 6.6027 s/iter. Eval: 0.2746 s/iter. Total: 6.8824 s/iter. ETA=0:39:34
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:50:42 d2.evaluation.evaluator]: [0mInference done 156/500. Dataloading: 0.0049 s/iter. Inference: 6.5910 s/iter. Eval: 0.2744 s/iter. Total: 6.8705 s/iter. ETA=0:39:23
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  8000, 10000], device='cuda:0')
[32m[06/28 13:50:51 d2.evaluation.evaluator]: [0mInference done 158/500. Dataloading: 0.0048 s/iter. Inference: 6.5583 s/iter. Eval: 0.2742 s/iter. Total: 6.8375 s/iter. ETA=0:38:58
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  4,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  4,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:51:00 d2.evaluation.evaluator]: [0mInference done 160/500. Dataloading: 0.0048 s/iter. Inference: 6.5288 s/iter. Eval: 0.2735 s/iter. Total: 6.8073 s/iter. ETA=0:38:34
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  4,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:51:08 d2.evaluation.evaluator]: [0mInference done 162/500. Dataloading: 0.0050 s/iter. Inference: 6.4980 s/iter. Eval: 0.2729 s/iter. Total: 6.7760 s/iter. ETA=0:38:10
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  4,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:51:13 d2.evaluation.evaluator]: [0mInference done 163/500. Dataloading: 0.0049 s/iter. Inference: 6.4872 s/iter. Eval: 0.2729 s/iter. Total: 6.7652 s/iter. ETA=0:37:59
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  4,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  8000, 10000], device='cuda:0')
[32m[06/28 13:51:19 d2.evaluation.evaluator]: [0mInference done 164/500. Dataloading: 0.0050 s/iter. Inference: 6.4779 s/iter. Eval: 0.2729 s/iter. Total: 6.7559 s/iter. ETA=0:37:49
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  4,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  4,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  8000, 10000], device='cuda:0')
[32m[06/28 13:51:27 d2.evaluation.evaluator]: [0mInference done 166/500. Dataloading: 0.0049 s/iter. Inference: 6.4491 s/iter. Eval: 0.2727 s/iter. Total: 6.7270 s/iter. ETA=0:37:26
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  4,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:51:36 d2.evaluation.evaluator]: [0mInference done 168/500. Dataloading: 0.0049 s/iter. Inference: 6.4201 s/iter. Eval: 0.2725 s/iter. Total: 6.6977 s/iter. ETA=0:37:03
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  4,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:51:46 d2.evaluation.evaluator]: [0mInference done 170/500. Dataloading: 0.0050 s/iter. Inference: 6.3969 s/iter. Eval: 0.2725 s/iter. Total: 6.6746 s/iter. ETA=0:36:42
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:51:55 d2.evaluation.evaluator]: [0mInference done 172/500. Dataloading: 0.0051 s/iter. Inference: 6.3746 s/iter. Eval: 0.2722 s/iter. Total: 6.6522 s/iter. ETA=0:36:21
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:52:04 d2.evaluation.evaluator]: [0mInference done 174/500. Dataloading: 0.0051 s/iter. Inference: 6.3475 s/iter. Eval: 0.2722 s/iter. Total: 6.6250 s/iter. ETA=0:35:59
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:52:13 d2.evaluation.evaluator]: [0mInference done 176/500. Dataloading: 0.0050 s/iter. Inference: 6.3235 s/iter. Eval: 0.2719 s/iter. Total: 6.6006 s/iter. ETA=0:35:38
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  4,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:52:24 d2.evaluation.evaluator]: [0mInference done 178/500. Dataloading: 0.0052 s/iter. Inference: 6.3069 s/iter. Eval: 0.2719 s/iter. Total: 6.5842 s/iter. ETA=0:35:20
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:52:33 d2.evaluation.evaluator]: [0mInference done 180/500. Dataloading: 0.0054 s/iter. Inference: 6.2885 s/iter. Eval: 0.2720 s/iter. Total: 6.5660 s/iter. ETA=0:35:01
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:52:42 d2.evaluation.evaluator]: [0mInference done 182/500. Dataloading: 0.0053 s/iter. Inference: 6.2654 s/iter. Eval: 0.2717 s/iter. Total: 6.5426 s/iter. ETA=0:34:40
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:52:51 d2.evaluation.evaluator]: [0mInference done 184/500. Dataloading: 0.0052 s/iter. Inference: 6.2419 s/iter. Eval: 0.2721 s/iter. Total: 6.5194 s/iter. ETA=0:34:20
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:53:02 d2.evaluation.evaluator]: [0mInference done 186/500. Dataloading: 0.0054 s/iter. Inference: 6.2262 s/iter. Eval: 0.2717 s/iter. Total: 6.5035 s/iter. ETA=0:34:02
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  7,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  7,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:53:11 d2.evaluation.evaluator]: [0mInference done 188/500. Dataloading: 0.0054 s/iter. Inference: 6.2054 s/iter. Eval: 0.2716 s/iter. Total: 6.4826 s/iter. ETA=0:33:42
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  4,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  7,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:53:19 d2.evaluation.evaluator]: [0mInference done 190/500. Dataloading: 0.0054 s/iter. Inference: 6.1824 s/iter. Eval: 0.2711 s/iter. Total: 6.4591 s/iter. ETA=0:33:22
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  4,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  4,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:53:28 d2.evaluation.evaluator]: [0mInference done 192/500. Dataloading: 0.0053 s/iter. Inference: 6.1599 s/iter. Eval: 0.2709 s/iter. Total: 6.4363 s/iter. ETA=0:33:02
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:53:33 d2.evaluation.evaluator]: [0mInference done 193/500. Dataloading: 0.0053 s/iter. Inference: 6.1528 s/iter. Eval: 0.2709 s/iter. Total: 6.4291 s/iter. ETA=0:32:53
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:53:38 d2.evaluation.evaluator]: [0mInference done 194/500. Dataloading: 0.0054 s/iter. Inference: 6.1453 s/iter. Eval: 0.2711 s/iter. Total: 6.4219 s/iter. ETA=0:32:45
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:53:48 d2.evaluation.evaluator]: [0mInference done 196/500. Dataloading: 0.0055 s/iter. Inference: 6.1275 s/iter. Eval: 0.2706 s/iter. Total: 6.4038 s/iter. ETA=0:32:26
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  4,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:53:56 d2.evaluation.evaluator]: [0mInference done 198/500. Dataloading: 0.0054 s/iter. Inference: 6.1059 s/iter. Eval: 0.2704 s/iter. Total: 6.3819 s/iter. ETA=0:32:07
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:54:05 d2.evaluation.evaluator]: [0mInference done 200/500. Dataloading: 0.0054 s/iter. Inference: 6.0854 s/iter. Eval: 0.2701 s/iter. Total: 6.3611 s/iter. ETA=0:31:48
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 13:54:14 d2.evaluation.evaluator]: [0mInference done 202/500. Dataloading: 0.0054 s/iter. Inference: 6.0696 s/iter. Eval: 0.2696 s/iter. Total: 6.3448 s/iter. ETA=0:31:30
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  4,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:54:23 d2.evaluation.evaluator]: [0mInference done 204/500. Dataloading: 0.0055 s/iter. Inference: 6.0495 s/iter. Eval: 0.2692 s/iter. Total: 6.3244 s/iter. ETA=0:31:12
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:54:32 d2.evaluation.evaluator]: [0mInference done 206/500. Dataloading: 0.0054 s/iter. Inference: 6.0308 s/iter. Eval: 0.2690 s/iter. Total: 6.3054 s/iter. ETA=0:30:53
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:54:41 d2.evaluation.evaluator]: [0mInference done 208/500. Dataloading: 0.0054 s/iter. Inference: 6.0157 s/iter. Eval: 0.2684 s/iter. Total: 6.2898 s/iter. ETA=0:30:36
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:54:50 d2.evaluation.evaluator]: [0mInference done 210/500. Dataloading: 0.0055 s/iter. Inference: 5.9976 s/iter. Eval: 0.2681 s/iter. Total: 6.2714 s/iter. ETA=0:30:18
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  6,  7,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:54:59 d2.evaluation.evaluator]: [0mInference done 212/500. Dataloading: 0.0055 s/iter. Inference: 5.9790 s/iter. Eval: 0.2675 s/iter. Total: 6.2522 s/iter. ETA=0:30:00
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:55:07 d2.evaluation.evaluator]: [0mInference done 214/500. Dataloading: 0.0054 s/iter. Inference: 5.9605 s/iter. Eval: 0.2670 s/iter. Total: 6.2331 s/iter. ETA=0:29:42
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  4,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:55:16 d2.evaluation.evaluator]: [0mInference done 216/500. Dataloading: 0.0054 s/iter. Inference: 5.9424 s/iter. Eval: 0.2668 s/iter. Total: 6.2148 s/iter. ETA=0:29:24
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:55:25 d2.evaluation.evaluator]: [0mInference done 218/500. Dataloading: 0.0055 s/iter. Inference: 5.9265 s/iter. Eval: 0.2666 s/iter. Total: 6.1988 s/iter. ETA=0:29:08
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:55:34 d2.evaluation.evaluator]: [0mInference done 220/500. Dataloading: 0.0055 s/iter. Inference: 5.9123 s/iter. Eval: 0.2667 s/iter. Total: 6.1847 s/iter. ETA=0:28:51
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  4,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:55:43 d2.evaluation.evaluator]: [0mInference done 222/500. Dataloading: 0.0054 s/iter. Inference: 5.8959 s/iter. Eval: 0.2664 s/iter. Total: 6.1679 s/iter. ETA=0:28:34
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  4,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:55:52 d2.evaluation.evaluator]: [0mInference done 224/500. Dataloading: 0.0054 s/iter. Inference: 5.8798 s/iter. Eval: 0.2663 s/iter. Total: 6.1516 s/iter. ETA=0:28:17
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:56:01 d2.evaluation.evaluator]: [0mInference done 226/500. Dataloading: 0.0054 s/iter. Inference: 5.8679 s/iter. Eval: 0.2661 s/iter. Total: 6.1395 s/iter. ETA=0:28:02
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  4,  5,  6,  7,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:56:10 d2.evaluation.evaluator]: [0mInference done 228/500. Dataloading: 0.0054 s/iter. Inference: 5.8522 s/iter. Eval: 0.2656 s/iter. Total: 6.1235 s/iter. ETA=0:27:45
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:56:19 d2.evaluation.evaluator]: [0mInference done 230/500. Dataloading: 0.0054 s/iter. Inference: 5.8360 s/iter. Eval: 0.2656 s/iter. Total: 6.1071 s/iter. ETA=0:27:28
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  4,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:56:27 d2.evaluation.evaluator]: [0mInference done 232/500. Dataloading: 0.0053 s/iter. Inference: 5.8205 s/iter. Eval: 0.2657 s/iter. Total: 6.0917 s/iter. ETA=0:27:12
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:56:37 d2.evaluation.evaluator]: [0mInference done 234/500. Dataloading: 0.0054 s/iter. Inference: 5.8082 s/iter. Eval: 0.2654 s/iter. Total: 6.0792 s/iter. ETA=0:26:57
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:56:46 d2.evaluation.evaluator]: [0mInference done 236/500. Dataloading: 0.0055 s/iter. Inference: 5.7949 s/iter. Eval: 0.2651 s/iter. Total: 6.0657 s/iter. ETA=0:26:41
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  4,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:56:54 d2.evaluation.evaluator]: [0mInference done 238/500. Dataloading: 0.0055 s/iter. Inference: 5.7800 s/iter. Eval: 0.2650 s/iter. Total: 6.0506 s/iter. ETA=0:26:25
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:57:03 d2.evaluation.evaluator]: [0mInference done 240/500. Dataloading: 0.0054 s/iter. Inference: 5.7664 s/iter. Eval: 0.2651 s/iter. Total: 6.0371 s/iter. ETA=0:26:09
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  4,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:57:13 d2.evaluation.evaluator]: [0mInference done 242/500. Dataloading: 0.0055 s/iter. Inference: 5.7584 s/iter. Eval: 0.2651 s/iter. Total: 6.0291 s/iter. ETA=0:25:55
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:57:23 d2.evaluation.evaluator]: [0mInference done 244/500. Dataloading: 0.0055 s/iter. Inference: 5.7479 s/iter. Eval: 0.2649 s/iter. Total: 6.0185 s/iter. ETA=0:25:40
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  4,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:57:31 d2.evaluation.evaluator]: [0mInference done 246/500. Dataloading: 0.0055 s/iter. Inference: 5.7338 s/iter. Eval: 0.2644 s/iter. Total: 6.0039 s/iter. ETA=0:25:24
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:57:40 d2.evaluation.evaluator]: [0mInference done 248/500. Dataloading: 0.0055 s/iter. Inference: 5.7196 s/iter. Eval: 0.2641 s/iter. Total: 5.9893 s/iter. ETA=0:25:09
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  4,  5,  6,  7,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  8000, 10000], device='cuda:0')
[32m[06/28 13:57:49 d2.evaluation.evaluator]: [0mInference done 250/500. Dataloading: 0.0056 s/iter. Inference: 5.7089 s/iter. Eval: 0.2639 s/iter. Total: 5.9785 s/iter. ETA=0:24:54
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  4,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:57:58 d2.evaluation.evaluator]: [0mInference done 252/500. Dataloading: 0.0055 s/iter. Inference: 5.6974 s/iter. Eval: 0.2640 s/iter. Total: 5.9672 s/iter. ETA=0:24:39
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:58:07 d2.evaluation.evaluator]: [0mInference done 254/500. Dataloading: 0.0055 s/iter. Inference: 5.6847 s/iter. Eval: 0.2639 s/iter. Total: 5.9543 s/iter. ETA=0:24:24
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:58:12 d2.evaluation.evaluator]: [0mInference done 255/500. Dataloading: 0.0055 s/iter. Inference: 5.6815 s/iter. Eval: 0.2637 s/iter. Total: 5.9509 s/iter. ETA=0:24:17
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:58:18 d2.evaluation.evaluator]: [0mInference done 256/500. Dataloading: 0.0055 s/iter. Inference: 5.6824 s/iter. Eval: 0.2635 s/iter. Total: 5.9515 s/iter. ETA=0:24:12
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:58:26 d2.evaluation.evaluator]: [0mInference done 257/500. Dataloading: 0.0054 s/iter. Inference: 5.6883 s/iter. Eval: 0.2633 s/iter. Total: 5.9572 s/iter. ETA=0:24:07
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:58:33 d2.evaluation.evaluator]: [0mInference done 258/500. Dataloading: 0.0055 s/iter. Inference: 5.6946 s/iter. Eval: 0.2636 s/iter. Total: 5.9637 s/iter. ETA=0:24:03
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:58:40 d2.evaluation.evaluator]: [0mInference done 259/500. Dataloading: 0.0054 s/iter. Inference: 5.6954 s/iter. Eval: 0.2640 s/iter. Total: 5.9651 s/iter. ETA=0:23:57
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:58:47 d2.evaluation.evaluator]: [0mInference done 260/500. Dataloading: 0.0058 s/iter. Inference: 5.7016 s/iter. Eval: 0.2637 s/iter. Total: 5.9713 s/iter. ETA=0:23:53
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:58:54 d2.evaluation.evaluator]: [0mInference done 261/500. Dataloading: 0.0058 s/iter. Inference: 5.7068 s/iter. Eval: 0.2635 s/iter. Total: 5.9762 s/iter. ETA=0:23:48
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:59:01 d2.evaluation.evaluator]: [0mInference done 262/500. Dataloading: 0.0058 s/iter. Inference: 5.7107 s/iter. Eval: 0.2631 s/iter. Total: 5.9798 s/iter. ETA=0:23:43
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:59:09 d2.evaluation.evaluator]: [0mInference done 263/500. Dataloading: 0.0058 s/iter. Inference: 5.7169 s/iter. Eval: 0.2630 s/iter. Total: 5.9859 s/iter. ETA=0:23:38
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:59:15 d2.evaluation.evaluator]: [0mInference done 264/500. Dataloading: 0.0057 s/iter. Inference: 5.7171 s/iter. Eval: 0.2632 s/iter. Total: 5.9863 s/iter. ETA=0:23:32
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:59:21 d2.evaluation.evaluator]: [0mInference done 265/500. Dataloading: 0.0057 s/iter. Inference: 5.7189 s/iter. Eval: 0.2632 s/iter. Total: 5.9880 s/iter. ETA=0:23:27
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:59:28 d2.evaluation.evaluator]: [0mInference done 266/500. Dataloading: 0.0057 s/iter. Inference: 5.7219 s/iter. Eval: 0.2631 s/iter. Total: 5.9909 s/iter. ETA=0:23:21
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 13:59:35 d2.evaluation.evaluator]: [0mInference done 267/500. Dataloading: 0.0057 s/iter. Inference: 5.7241 s/iter. Eval: 0.2629 s/iter. Total: 5.9929 s/iter. ETA=0:23:16
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 13:59:42 d2.evaluation.evaluator]: [0mInference done 268/500. Dataloading: 0.0057 s/iter. Inference: 5.7292 s/iter. Eval: 0.2630 s/iter. Total: 5.9982 s/iter. ETA=0:23:11
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000, 10000], device='cuda:0')
[32m[06/28 13:59:50 d2.evaluation.evaluator]: [0mInference done 269/500. Dataloading: 0.0057 s/iter. Inference: 5.7352 s/iter. Eval: 0.2633 s/iter. Total: 6.0044 s/iter. ETA=0:23:07
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000, 10000], device='cuda:0')
[32m[06/28 13:59:57 d2.evaluation.evaluator]: [0mInference done 270/500. Dataloading: 0.0057 s/iter. Inference: 5.7410 s/iter. Eval: 0.2630 s/iter. Total: 6.0099 s/iter. ETA=0:23:02
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:00:04 d2.evaluation.evaluator]: [0mInference done 271/500. Dataloading: 0.0057 s/iter. Inference: 5.7450 s/iter. Eval: 0.2636 s/iter. Total: 6.0145 s/iter. ETA=0:22:57
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:00:11 d2.evaluation.evaluator]: [0mInference done 272/500. Dataloading: 0.0057 s/iter. Inference: 5.7480 s/iter. Eval: 0.2634 s/iter. Total: 6.0173 s/iter. ETA=0:22:51
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:00:18 d2.evaluation.evaluator]: [0mInference done 273/500. Dataloading: 0.0056 s/iter. Inference: 5.7513 s/iter. Eval: 0.2634 s/iter. Total: 6.0206 s/iter. ETA=0:22:46
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:00:26 d2.evaluation.evaluator]: [0mInference done 274/500. Dataloading: 0.0056 s/iter. Inference: 5.7571 s/iter. Eval: 0.2634 s/iter. Total: 6.0263 s/iter. ETA=0:22:41
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000, 10000], device='cuda:0')
[32m[06/28 14:00:32 d2.evaluation.evaluator]: [0mInference done 275/500. Dataloading: 0.0056 s/iter. Inference: 5.7599 s/iter. Eval: 0.2638 s/iter. Total: 6.0295 s/iter. ETA=0:22:36
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000, 10000], device='cuda:0')
[32m[06/28 14:00:40 d2.evaluation.evaluator]: [0mInference done 276/500. Dataloading: 0.0056 s/iter. Inference: 5.7650 s/iter. Eval: 0.2643 s/iter. Total: 6.0352 s/iter. ETA=0:22:31
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:00:46 d2.evaluation.evaluator]: [0mInference done 277/500. Dataloading: 0.0056 s/iter. Inference: 5.7640 s/iter. Eval: 0.2642 s/iter. Total: 6.0339 s/iter. ETA=0:22:25
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:00:52 d2.evaluation.evaluator]: [0mInference done 278/500. Dataloading: 0.0056 s/iter. Inference: 5.7649 s/iter. Eval: 0.2643 s/iter. Total: 6.0350 s/iter. ETA=0:22:19
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:00:58 d2.evaluation.evaluator]: [0mInference done 279/500. Dataloading: 0.0056 s/iter. Inference: 5.7649 s/iter. Eval: 0.2647 s/iter. Total: 6.0353 s/iter. ETA=0:22:13
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:01:05 d2.evaluation.evaluator]: [0mInference done 280/500. Dataloading: 0.0055 s/iter. Inference: 5.7685 s/iter. Eval: 0.2647 s/iter. Total: 6.0389 s/iter. ETA=0:22:08
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000, 10000], device='cuda:0')
[32m[06/28 14:01:12 d2.evaluation.evaluator]: [0mInference done 281/500. Dataloading: 0.0057 s/iter. Inference: 5.7702 s/iter. Eval: 0.2647 s/iter. Total: 6.0407 s/iter. ETA=0:22:02
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:01:18 d2.evaluation.evaluator]: [0mInference done 282/500. Dataloading: 0.0056 s/iter. Inference: 5.7724 s/iter. Eval: 0.2645 s/iter. Total: 6.0427 s/iter. ETA=0:21:57
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 14:01:25 d2.evaluation.evaluator]: [0mInference done 283/500. Dataloading: 0.0056 s/iter. Inference: 5.7763 s/iter. Eval: 0.2646 s/iter. Total: 6.0467 s/iter. ETA=0:21:52
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  8000, 10000], device='cuda:0')
[32m[06/28 14:01:33 d2.evaluation.evaluator]: [0mInference done 284/500. Dataloading: 0.0056 s/iter. Inference: 5.7800 s/iter. Eval: 0.2646 s/iter. Total: 6.0505 s/iter. ETA=0:21:46
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:01:40 d2.evaluation.evaluator]: [0mInference done 285/500. Dataloading: 0.0056 s/iter. Inference: 5.7835 s/iter. Eval: 0.2650 s/iter. Total: 6.0543 s/iter. ETA=0:21:41
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:01:47 d2.evaluation.evaluator]: [0mInference done 286/500. Dataloading: 0.0056 s/iter. Inference: 5.7876 s/iter. Eval: 0.2657 s/iter. Total: 6.0590 s/iter. ETA=0:21:36
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:01:55 d2.evaluation.evaluator]: [0mInference done 287/500. Dataloading: 0.0056 s/iter. Inference: 5.7924 s/iter. Eval: 0.2665 s/iter. Total: 6.0647 s/iter. ETA=0:21:31
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:02:03 d2.evaluation.evaluator]: [0mInference done 288/500. Dataloading: 0.0056 s/iter. Inference: 5.7994 s/iter. Eval: 0.2671 s/iter. Total: 6.0722 s/iter. ETA=0:21:27
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:02:11 d2.evaluation.evaluator]: [0mInference done 289/500. Dataloading: 0.0056 s/iter. Inference: 5.8073 s/iter. Eval: 0.2676 s/iter. Total: 6.0807 s/iter. ETA=0:21:23
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:02:20 d2.evaluation.evaluator]: [0mInference done 290/500. Dataloading: 0.0055 s/iter. Inference: 5.8150 s/iter. Eval: 0.2674 s/iter. Total: 6.0881 s/iter. ETA=0:21:18
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000, 10000], device='cuda:0')
[32m[06/28 14:02:28 d2.evaluation.evaluator]: [0mInference done 291/500. Dataloading: 0.0055 s/iter. Inference: 5.8226 s/iter. Eval: 0.2674 s/iter. Total: 6.0957 s/iter. ETA=0:21:13
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:02:35 d2.evaluation.evaluator]: [0mInference done 292/500. Dataloading: 0.0057 s/iter. Inference: 5.8254 s/iter. Eval: 0.2679 s/iter. Total: 6.0991 s/iter. ETA=0:21:08
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:02:41 d2.evaluation.evaluator]: [0mInference done 293/500. Dataloading: 0.0058 s/iter. Inference: 5.8264 s/iter. Eval: 0.2676 s/iter. Total: 6.0999 s/iter. ETA=0:21:02
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:02:49 d2.evaluation.evaluator]: [0mInference done 294/500. Dataloading: 0.0058 s/iter. Inference: 5.8304 s/iter. Eval: 0.2678 s/iter. Total: 6.1042 s/iter. ETA=0:20:57
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:02:56 d2.evaluation.evaluator]: [0mInference done 295/500. Dataloading: 0.0058 s/iter. Inference: 5.8356 s/iter. Eval: 0.2678 s/iter. Total: 6.1093 s/iter. ETA=0:20:52
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  3,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  8000, 10000], device='cuda:0')
[32m[06/28 14:03:03 d2.evaluation.evaluator]: [0mInference done 296/500. Dataloading: 0.0058 s/iter. Inference: 5.8383 s/iter. Eval: 0.2680 s/iter. Total: 6.1123 s/iter. ETA=0:20:46
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([    0,  2000,  8000, 10000], device='cuda:0')
[32m[06/28 14:03:10 d2.evaluation.evaluator]: [0mInference done 297/500. Dataloading: 0.0058 s/iter. Inference: 5.8417 s/iter. Eval: 0.2680 s/iter. Total: 6.1156 s/iter. ETA=0:20:41
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  8000, 10000], device='cuda:0')
[32m[06/28 14:03:18 d2.evaluation.evaluator]: [0mInference done 298/500. Dataloading: 0.0058 s/iter. Inference: 5.8461 s/iter. Eval: 0.2680 s/iter. Total: 6.1201 s/iter. ETA=0:20:36
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:03:25 d2.evaluation.evaluator]: [0mInference done 299/500. Dataloading: 0.0057 s/iter. Inference: 5.8498 s/iter. Eval: 0.2680 s/iter. Total: 6.1237 s/iter. ETA=0:20:30
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:03:32 d2.evaluation.evaluator]: [0mInference done 300/500. Dataloading: 0.0058 s/iter. Inference: 5.8524 s/iter. Eval: 0.2682 s/iter. Total: 6.1266 s/iter. ETA=0:20:25
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:03:39 d2.evaluation.evaluator]: [0mInference done 301/500. Dataloading: 0.0058 s/iter. Inference: 5.8555 s/iter. Eval: 0.2680 s/iter. Total: 6.1295 s/iter. ETA=0:20:19
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 52], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10, 13], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  8000, 10000, 13001], device='cuda:0')
[32m[06/28 14:03:46 d2.evaluation.evaluator]: [0mInference done 302/500. Dataloading: 0.0058 s/iter. Inference: 5.8601 s/iter. Eval: 0.2683 s/iter. Total: 6.1343 s/iter. ETA=0:20:14
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:03:54 d2.evaluation.evaluator]: [0mInference done 303/500. Dataloading: 0.0058 s/iter. Inference: 5.8650 s/iter. Eval: 0.2683 s/iter. Total: 6.1393 s/iter. ETA=0:20:09
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 44], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10, 13], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000, 13001], device='cuda:0')
[32m[06/28 14:04:02 d2.evaluation.evaluator]: [0mInference done 304/500. Dataloading: 0.0058 s/iter. Inference: 5.8702 s/iter. Eval: 0.2683 s/iter. Total: 6.1444 s/iter. ETA=0:20:04
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000, 10000], device='cuda:0')
[32m[06/28 14:04:10 d2.evaluation.evaluator]: [0mInference done 305/500. Dataloading: 0.0057 s/iter. Inference: 5.8761 s/iter. Eval: 0.2682 s/iter. Total: 6.1502 s/iter. ETA=0:19:59
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([    0,  2000,  8000, 10000], device='cuda:0')
[32m[06/28 14:04:17 d2.evaluation.evaluator]: [0mInference done 306/500. Dataloading: 0.0057 s/iter. Inference: 5.8803 s/iter. Eval: 0.2685 s/iter. Total: 6.1547 s/iter. ETA=0:19:54
RESIZING OUTPUTS
INSTANCE LABELS tensor([0, 1], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10, 13], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  8000, 10000, 13001], device='cuda:0')
[32m[06/28 14:04:24 d2.evaluation.evaluator]: [0mInference done 307/500. Dataloading: 0.0057 s/iter. Inference: 5.8822 s/iter. Eval: 0.2688 s/iter. Total: 6.1569 s/iter. ETA=0:19:48
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:04:32 d2.evaluation.evaluator]: [0mInference done 308/500. Dataloading: 0.0058 s/iter. Inference: 5.8879 s/iter. Eval: 0.2690 s/iter. Total: 6.1629 s/iter. ETA=0:19:43
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:04:39 d2.evaluation.evaluator]: [0mInference done 309/500. Dataloading: 0.0058 s/iter. Inference: 5.8921 s/iter. Eval: 0.2688 s/iter. Total: 6.1668 s/iter. ETA=0:19:37
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:04:45 d2.evaluation.evaluator]: [0mInference done 310/500. Dataloading: 0.0058 s/iter. Inference: 5.8911 s/iter. Eval: 0.2688 s/iter. Total: 6.1659 s/iter. ETA=0:19:31
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  8000, 10000], device='cuda:0')
[32m[06/28 14:04:50 d2.evaluation.evaluator]: [0mInference done 311/500. Dataloading: 0.0057 s/iter. Inference: 5.8876 s/iter. Eval: 0.2690 s/iter. Total: 6.1625 s/iter. ETA=0:19:24
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:05:05 d2.evaluation.evaluator]: [0mInference done 312/500. Dataloading: 0.0057 s/iter. Inference: 5.9169 s/iter. Eval: 0.2690 s/iter. Total: 6.1918 s/iter. ETA=0:19:24
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:05:14 d2.evaluation.evaluator]: [0mInference done 314/500. Dataloading: 0.0057 s/iter. Inference: 5.9061 s/iter. Eval: 0.2690 s/iter. Total: 6.1810 s/iter. ETA=0:19:09
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:05:24 d2.evaluation.evaluator]: [0mInference done 316/500. Dataloading: 0.0058 s/iter. Inference: 5.8987 s/iter. Eval: 0.2690 s/iter. Total: 6.1737 s/iter. ETA=0:18:55
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:05:34 d2.evaluation.evaluator]: [0mInference done 318/500. Dataloading: 0.0058 s/iter. Inference: 5.8894 s/iter. Eval: 0.2689 s/iter. Total: 6.1642 s/iter. ETA=0:18:41
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:05:44 d2.evaluation.evaluator]: [0mInference done 320/500. Dataloading: 0.0058 s/iter. Inference: 5.8810 s/iter. Eval: 0.2690 s/iter. Total: 6.1560 s/iter. ETA=0:18:28
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:05:53 d2.evaluation.evaluator]: [0mInference done 322/500. Dataloading: 0.0057 s/iter. Inference: 5.8716 s/iter. Eval: 0.2691 s/iter. Total: 6.1466 s/iter. ETA=0:18:14
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  3,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([    0,  2000,  8000, 10000], device='cuda:0')
[32m[06/28 14:06:03 d2.evaluation.evaluator]: [0mInference done 324/500. Dataloading: 0.0058 s/iter. Inference: 5.8636 s/iter. Eval: 0.2694 s/iter. Total: 6.1390 s/iter. ETA=0:18:00
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:06:08 d2.evaluation.evaluator]: [0mInference done 325/500. Dataloading: 0.0058 s/iter. Inference: 5.8599 s/iter. Eval: 0.2696 s/iter. Total: 6.1354 s/iter. ETA=0:17:53
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:06:17 d2.evaluation.evaluator]: [0mInference done 327/500. Dataloading: 0.0057 s/iter. Inference: 5.8513 s/iter. Eval: 0.2695 s/iter. Total: 6.1268 s/iter. ETA=0:17:39
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:06:27 d2.evaluation.evaluator]: [0mInference done 329/500. Dataloading: 0.0057 s/iter. Inference: 5.8427 s/iter. Eval: 0.2694 s/iter. Total: 6.1180 s/iter. ETA=0:17:26
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:06:35 d2.evaluation.evaluator]: [0mInference done 331/500. Dataloading: 0.0057 s/iter. Inference: 5.8316 s/iter. Eval: 0.2695 s/iter. Total: 6.1069 s/iter. ETA=0:17:12
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:06:41 d2.evaluation.evaluator]: [0mInference done 332/500. Dataloading: 0.0058 s/iter. Inference: 5.8291 s/iter. Eval: 0.2695 s/iter. Total: 6.1045 s/iter. ETA=0:17:05
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:06:49 d2.evaluation.evaluator]: [0mInference done 334/500. Dataloading: 0.0057 s/iter. Inference: 5.8185 s/iter. Eval: 0.2694 s/iter. Total: 6.0939 s/iter. ETA=0:16:51
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:06:58 d2.evaluation.evaluator]: [0mInference done 336/500. Dataloading: 0.0057 s/iter. Inference: 5.8084 s/iter. Eval: 0.2694 s/iter. Total: 6.0837 s/iter. ETA=0:16:37
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:07:07 d2.evaluation.evaluator]: [0mInference done 338/500. Dataloading: 0.0057 s/iter. Inference: 5.7985 s/iter. Eval: 0.2695 s/iter. Total: 6.0739 s/iter. ETA=0:16:23
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:07:16 d2.evaluation.evaluator]: [0mInference done 340/500. Dataloading: 0.0058 s/iter. Inference: 5.7904 s/iter. Eval: 0.2693 s/iter. Total: 6.0658 s/iter. ETA=0:16:10
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:07:25 d2.evaluation.evaluator]: [0mInference done 342/500. Dataloading: 0.0058 s/iter. Inference: 5.7806 s/iter. Eval: 0.2691 s/iter. Total: 6.0557 s/iter. ETA=0:15:56
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:07:34 d2.evaluation.evaluator]: [0mInference done 344/500. Dataloading: 0.0057 s/iter. Inference: 5.7714 s/iter. Eval: 0.2687 s/iter. Total: 6.0461 s/iter. ETA=0:15:43
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:07:43 d2.evaluation.evaluator]: [0mInference done 346/500. Dataloading: 0.0057 s/iter. Inference: 5.7618 s/iter. Eval: 0.2685 s/iter. Total: 6.0361 s/iter. ETA=0:15:29
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:07:52 d2.evaluation.evaluator]: [0mInference done 348/500. Dataloading: 0.0057 s/iter. Inference: 5.7543 s/iter. Eval: 0.2685 s/iter. Total: 6.0287 s/iter. ETA=0:15:16
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:08:01 d2.evaluation.evaluator]: [0mInference done 350/500. Dataloading: 0.0057 s/iter. Inference: 5.7456 s/iter. Eval: 0.2685 s/iter. Total: 6.0199 s/iter. ETA=0:15:02
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:08:10 d2.evaluation.evaluator]: [0mInference done 352/500. Dataloading: 0.0057 s/iter. Inference: 5.7369 s/iter. Eval: 0.2683 s/iter. Total: 6.0110 s/iter. ETA=0:14:49
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:08:20 d2.evaluation.evaluator]: [0mInference done 354/500. Dataloading: 0.0057 s/iter. Inference: 5.7296 s/iter. Eval: 0.2681 s/iter. Total: 6.0035 s/iter. ETA=0:14:36
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:08:25 d2.evaluation.evaluator]: [0mInference done 355/500. Dataloading: 0.0056 s/iter. Inference: 5.7275 s/iter. Eval: 0.2680 s/iter. Total: 6.0013 s/iter. ETA=0:14:30
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:08:30 d2.evaluation.evaluator]: [0mInference done 356/500. Dataloading: 0.0058 s/iter. Inference: 5.7247 s/iter. Eval: 0.2680 s/iter. Total: 5.9986 s/iter. ETA=0:14:23
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:08:39 d2.evaluation.evaluator]: [0mInference done 358/500. Dataloading: 0.0057 s/iter. Inference: 5.7158 s/iter. Eval: 0.2680 s/iter. Total: 5.9897 s/iter. ETA=0:14:10
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:08:48 d2.evaluation.evaluator]: [0mInference done 360/500. Dataloading: 0.0057 s/iter. Inference: 5.7085 s/iter. Eval: 0.2676 s/iter. Total: 5.9820 s/iter. ETA=0:13:57
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:08:57 d2.evaluation.evaluator]: [0mInference done 362/500. Dataloading: 0.0057 s/iter. Inference: 5.6996 s/iter. Eval: 0.2676 s/iter. Total: 5.9731 s/iter. ETA=0:13:44
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:09:02 d2.evaluation.evaluator]: [0mInference done 363/500. Dataloading: 0.0057 s/iter. Inference: 5.6980 s/iter. Eval: 0.2677 s/iter. Total: 5.9715 s/iter. ETA=0:13:38
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:09:12 d2.evaluation.evaluator]: [0mInference done 365/500. Dataloading: 0.0057 s/iter. Inference: 5.6907 s/iter. Eval: 0.2676 s/iter. Total: 5.9641 s/iter. ETA=0:13:25
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:09:20 d2.evaluation.evaluator]: [0mInference done 367/500. Dataloading: 0.0057 s/iter. Inference: 5.6820 s/iter. Eval: 0.2676 s/iter. Total: 5.9553 s/iter. ETA=0:13:12
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000, 10000], device='cuda:0')
[32m[06/28 14:09:30 d2.evaluation.evaluator]: [0mInference done 369/500. Dataloading: 0.0057 s/iter. Inference: 5.6758 s/iter. Eval: 0.2673 s/iter. Total: 5.9490 s/iter. ETA=0:12:59
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:09:39 d2.evaluation.evaluator]: [0mInference done 371/500. Dataloading: 0.0057 s/iter. Inference: 5.6694 s/iter. Eval: 0.2671 s/iter. Total: 5.9424 s/iter. ETA=0:12:46
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:09:44 d2.evaluation.evaluator]: [0mInference done 372/500. Dataloading: 0.0057 s/iter. Inference: 5.6670 s/iter. Eval: 0.2669 s/iter. Total: 5.9398 s/iter. ETA=0:12:40
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:09:53 d2.evaluation.evaluator]: [0mInference done 374/500. Dataloading: 0.0057 s/iter. Inference: 5.6590 s/iter. Eval: 0.2667 s/iter. Total: 5.9316 s/iter. ETA=0:12:27
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:10:02 d2.evaluation.evaluator]: [0mInference done 376/500. Dataloading: 0.0057 s/iter. Inference: 5.6511 s/iter. Eval: 0.2667 s/iter. Total: 5.9237 s/iter. ETA=0:12:14
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:10:12 d2.evaluation.evaluator]: [0mInference done 378/500. Dataloading: 0.0056 s/iter. Inference: 5.6446 s/iter. Eval: 0.2668 s/iter. Total: 5.9172 s/iter. ETA=0:12:01
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:10:21 d2.evaluation.evaluator]: [0mInference done 380/500. Dataloading: 0.0057 s/iter. Inference: 5.6389 s/iter. Eval: 0.2668 s/iter. Total: 5.9115 s/iter. ETA=0:11:49
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:10:31 d2.evaluation.evaluator]: [0mInference done 382/500. Dataloading: 0.0056 s/iter. Inference: 5.6325 s/iter. Eval: 0.2670 s/iter. Total: 5.9054 s/iter. ETA=0:11:36
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:10:36 d2.evaluation.evaluator]: [0mInference done 383/500. Dataloading: 0.0057 s/iter. Inference: 5.6308 s/iter. Eval: 0.2670 s/iter. Total: 5.9037 s/iter. ETA=0:11:30
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:10:41 d2.evaluation.evaluator]: [0mInference done 384/500. Dataloading: 0.0057 s/iter. Inference: 5.6292 s/iter. Eval: 0.2670 s/iter. Total: 5.9021 s/iter. ETA=0:11:24
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:10:50 d2.evaluation.evaluator]: [0mInference done 386/500. Dataloading: 0.0057 s/iter. Inference: 5.6217 s/iter. Eval: 0.2668 s/iter. Total: 5.8943 s/iter. ETA=0:11:11
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:10:59 d2.evaluation.evaluator]: [0mInference done 388/500. Dataloading: 0.0057 s/iter. Inference: 5.6150 s/iter. Eval: 0.2667 s/iter. Total: 5.8875 s/iter. ETA=0:10:59
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:11:08 d2.evaluation.evaluator]: [0mInference done 390/500. Dataloading: 0.0057 s/iter. Inference: 5.6078 s/iter. Eval: 0.2666 s/iter. Total: 5.8802 s/iter. ETA=0:10:46
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:11:18 d2.evaluation.evaluator]: [0mInference done 392/500. Dataloading: 0.0057 s/iter. Inference: 5.6014 s/iter. Eval: 0.2664 s/iter. Total: 5.8737 s/iter. ETA=0:10:34
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:11:23 d2.evaluation.evaluator]: [0mInference done 393/500. Dataloading: 0.0057 s/iter. Inference: 5.5999 s/iter. Eval: 0.2665 s/iter. Total: 5.8722 s/iter. ETA=0:10:28
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:11:32 d2.evaluation.evaluator]: [0mInference done 395/500. Dataloading: 0.0057 s/iter. Inference: 5.5926 s/iter. Eval: 0.2662 s/iter. Total: 5.8646 s/iter. ETA=0:10:15
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:11:37 d2.evaluation.evaluator]: [0mInference done 396/500. Dataloading: 0.0057 s/iter. Inference: 5.5904 s/iter. Eval: 0.2662 s/iter. Total: 5.8625 s/iter. ETA=0:10:09
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:11:45 d2.evaluation.evaluator]: [0mInference done 398/500. Dataloading: 0.0057 s/iter. Inference: 5.5829 s/iter. Eval: 0.2661 s/iter. Total: 5.8548 s/iter. ETA=0:09:57
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:11:55 d2.evaluation.evaluator]: [0mInference done 400/500. Dataloading: 0.0057 s/iter. Inference: 5.5785 s/iter. Eval: 0.2659 s/iter. Total: 5.8502 s/iter. ETA=0:09:45
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:12:05 d2.evaluation.evaluator]: [0mInference done 402/500. Dataloading: 0.0056 s/iter. Inference: 5.5725 s/iter. Eval: 0.2660 s/iter. Total: 5.8443 s/iter. ETA=0:09:32
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:12:14 d2.evaluation.evaluator]: [0mInference done 404/500. Dataloading: 0.0057 s/iter. Inference: 5.5676 s/iter. Eval: 0.2660 s/iter. Total: 5.8395 s/iter. ETA=0:09:20
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:12:23 d2.evaluation.evaluator]: [0mInference done 406/500. Dataloading: 0.0056 s/iter. Inference: 5.5614 s/iter. Eval: 0.2658 s/iter. Total: 5.8330 s/iter. ETA=0:09:08
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:12:32 d2.evaluation.evaluator]: [0mInference done 408/500. Dataloading: 0.0056 s/iter. Inference: 5.5542 s/iter. Eval: 0.2657 s/iter. Total: 5.8257 s/iter. ETA=0:08:55
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:12:41 d2.evaluation.evaluator]: [0mInference done 410/500. Dataloading: 0.0056 s/iter. Inference: 5.5481 s/iter. Eval: 0.2655 s/iter. Total: 5.8193 s/iter. ETA=0:08:43
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:12:51 d2.evaluation.evaluator]: [0mInference done 412/500. Dataloading: 0.0056 s/iter. Inference: 5.5436 s/iter. Eval: 0.2655 s/iter. Total: 5.8149 s/iter. ETA=0:08:31
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:13:00 d2.evaluation.evaluator]: [0mInference done 414/500. Dataloading: 0.0056 s/iter. Inference: 5.5375 s/iter. Eval: 0.2654 s/iter. Total: 5.8086 s/iter. ETA=0:08:19
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:13:06 d2.evaluation.evaluator]: [0mInference done 415/500. Dataloading: 0.0057 s/iter. Inference: 5.5363 s/iter. Eval: 0.2655 s/iter. Total: 5.8077 s/iter. ETA=0:08:13
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:13:14 d2.evaluation.evaluator]: [0mInference done 417/500. Dataloading: 0.0057 s/iter. Inference: 5.5299 s/iter. Eval: 0.2653 s/iter. Total: 5.8011 s/iter. ETA=0:08:01
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:13:20 d2.evaluation.evaluator]: [0mInference done 418/500. Dataloading: 0.0057 s/iter. Inference: 5.5289 s/iter. Eval: 0.2653 s/iter. Total: 5.8000 s/iter. ETA=0:07:55
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:13:25 d2.evaluation.evaluator]: [0mInference done 419/500. Dataloading: 0.0057 s/iter. Inference: 5.5279 s/iter. Eval: 0.2653 s/iter. Total: 5.7990 s/iter. ETA=0:07:49
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:13:35 d2.evaluation.evaluator]: [0mInference done 421/500. Dataloading: 0.0057 s/iter. Inference: 5.5225 s/iter. Eval: 0.2652 s/iter. Total: 5.7935 s/iter. ETA=0:07:37
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:13:44 d2.evaluation.evaluator]: [0mInference done 423/500. Dataloading: 0.0058 s/iter. Inference: 5.5170 s/iter. Eval: 0.2649 s/iter. Total: 5.7879 s/iter. ETA=0:07:25
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:13:53 d2.evaluation.evaluator]: [0mInference done 425/500. Dataloading: 0.0057 s/iter. Inference: 5.5109 s/iter. Eval: 0.2648 s/iter. Total: 5.7816 s/iter. ETA=0:07:13
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:14:01 d2.evaluation.evaluator]: [0mInference done 427/500. Dataloading: 0.0057 s/iter. Inference: 5.5040 s/iter. Eval: 0.2649 s/iter. Total: 5.7747 s/iter. ETA=0:07:01
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:14:10 d2.evaluation.evaluator]: [0mInference done 429/500. Dataloading: 0.0057 s/iter. Inference: 5.4976 s/iter. Eval: 0.2647 s/iter. Total: 5.7682 s/iter. ETA=0:06:49
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:14:19 d2.evaluation.evaluator]: [0mInference done 431/500. Dataloading: 0.0058 s/iter. Inference: 5.4908 s/iter. Eval: 0.2646 s/iter. Total: 5.7613 s/iter. ETA=0:06:37
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:14:28 d2.evaluation.evaluator]: [0mInference done 433/500. Dataloading: 0.0057 s/iter. Inference: 5.4848 s/iter. Eval: 0.2646 s/iter. Total: 5.7553 s/iter. ETA=0:06:25
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:14:36 d2.evaluation.evaluator]: [0mInference done 435/500. Dataloading: 0.0057 s/iter. Inference: 5.4783 s/iter. Eval: 0.2646 s/iter. Total: 5.7488 s/iter. ETA=0:06:13
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:14:42 d2.evaluation.evaluator]: [0mInference done 436/500. Dataloading: 0.0058 s/iter. Inference: 5.4770 s/iter. Eval: 0.2646 s/iter. Total: 5.7476 s/iter. ETA=0:06:07
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:14:50 d2.evaluation.evaluator]: [0mInference done 438/500. Dataloading: 0.0057 s/iter. Inference: 5.4708 s/iter. Eval: 0.2646 s/iter. Total: 5.7413 s/iter. ETA=0:05:55
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:15:00 d2.evaluation.evaluator]: [0mInference done 440/500. Dataloading: 0.0058 s/iter. Inference: 5.4655 s/iter. Eval: 0.2645 s/iter. Total: 5.7359 s/iter. ETA=0:05:44
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:15:08 d2.evaluation.evaluator]: [0mInference done 442/500. Dataloading: 0.0058 s/iter. Inference: 5.4592 s/iter. Eval: 0.2644 s/iter. Total: 5.7296 s/iter. ETA=0:05:32
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:15:13 d2.evaluation.evaluator]: [0mInference done 443/500. Dataloading: 0.0058 s/iter. Inference: 5.4579 s/iter. Eval: 0.2644 s/iter. Total: 5.7283 s/iter. ETA=0:05:26
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:15:23 d2.evaluation.evaluator]: [0mInference done 445/500. Dataloading: 0.0057 s/iter. Inference: 5.4536 s/iter. Eval: 0.2644 s/iter. Total: 5.7239 s/iter. ETA=0:05:14
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:15:32 d2.evaluation.evaluator]: [0mInference done 447/500. Dataloading: 0.0058 s/iter. Inference: 5.4488 s/iter. Eval: 0.2644 s/iter. Total: 5.7191 s/iter. ETA=0:05:03
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:15:41 d2.evaluation.evaluator]: [0mInference done 449/500. Dataloading: 0.0057 s/iter. Inference: 5.4431 s/iter. Eval: 0.2644 s/iter. Total: 5.7134 s/iter. ETA=0:04:51
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:15:50 d2.evaluation.evaluator]: [0mInference done 451/500. Dataloading: 0.0057 s/iter. Inference: 5.4374 s/iter. Eval: 0.2642 s/iter. Total: 5.7075 s/iter. ETA=0:04:39
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:15:55 d2.evaluation.evaluator]: [0mInference done 452/500. Dataloading: 0.0057 s/iter. Inference: 5.4364 s/iter. Eval: 0.2642 s/iter. Total: 5.7065 s/iter. ETA=0:04:33
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:16:00 d2.evaluation.evaluator]: [0mInference done 453/500. Dataloading: 0.0057 s/iter. Inference: 5.4350 s/iter. Eval: 0.2642 s/iter. Total: 5.7051 s/iter. ETA=0:04:28
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  8000, 10000], device='cuda:0')
[32m[06/28 14:16:05 d2.evaluation.evaluator]: [0mInference done 454/500. Dataloading: 0.0057 s/iter. Inference: 5.4336 s/iter. Eval: 0.2641 s/iter. Total: 5.7036 s/iter. ETA=0:04:22
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  3,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  8000, 10000], device='cuda:0')
[32m[06/28 14:16:11 d2.evaluation.evaluator]: [0mInference done 455/500. Dataloading: 0.0057 s/iter. Inference: 5.4327 s/iter. Eval: 0.2641 s/iter. Total: 5.7027 s/iter. ETA=0:04:16
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:16:19 d2.evaluation.evaluator]: [0mInference done 457/500. Dataloading: 0.0057 s/iter. Inference: 5.4267 s/iter. Eval: 0.2641 s/iter. Total: 5.6967 s/iter. ETA=0:04:04
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000, 10000], device='cuda:0')
[32m[06/28 14:16:28 d2.evaluation.evaluator]: [0mInference done 459/500. Dataloading: 0.0057 s/iter. Inference: 5.4216 s/iter. Eval: 0.2642 s/iter. Total: 5.6916 s/iter. ETA=0:03:53
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  8000, 10000], device='cuda:0')
[32m[06/28 14:16:38 d2.evaluation.evaluator]: [0mInference done 461/500. Dataloading: 0.0057 s/iter. Inference: 5.4176 s/iter. Eval: 0.2639 s/iter. Total: 5.6873 s/iter. ETA=0:03:41
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  8000, 10000], device='cuda:0')
[32m[06/28 14:16:47 d2.evaluation.evaluator]: [0mInference done 463/500. Dataloading: 0.0057 s/iter. Inference: 5.4132 s/iter. Eval: 0.2638 s/iter. Total: 5.6828 s/iter. ETA=0:03:30
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:16:56 d2.evaluation.evaluator]: [0mInference done 465/500. Dataloading: 0.0057 s/iter. Inference: 5.4082 s/iter. Eval: 0.2636 s/iter. Total: 5.6777 s/iter. ETA=0:03:18
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:17:05 d2.evaluation.evaluator]: [0mInference done 467/500. Dataloading: 0.0057 s/iter. Inference: 5.4028 s/iter. Eval: 0.2635 s/iter. Total: 5.6722 s/iter. ETA=0:03:07
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:17:14 d2.evaluation.evaluator]: [0mInference done 469/500. Dataloading: 0.0057 s/iter. Inference: 5.3989 s/iter. Eval: 0.2634 s/iter. Total: 5.6682 s/iter. ETA=0:02:55
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:17:24 d2.evaluation.evaluator]: [0mInference done 471/500. Dataloading: 0.0057 s/iter. Inference: 5.3947 s/iter. Eval: 0.2633 s/iter. Total: 5.6638 s/iter. ETA=0:02:44
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:17:29 d2.evaluation.evaluator]: [0mInference done 472/500. Dataloading: 0.0057 s/iter. Inference: 5.3937 s/iter. Eval: 0.2634 s/iter. Total: 5.6629 s/iter. ETA=0:02:38
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:17:39 d2.evaluation.evaluator]: [0mInference done 474/500. Dataloading: 0.0057 s/iter. Inference: 5.3902 s/iter. Eval: 0.2634 s/iter. Total: 5.6595 s/iter. ETA=0:02:27
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:17:48 d2.evaluation.evaluator]: [0mInference done 476/500. Dataloading: 0.0057 s/iter. Inference: 5.3850 s/iter. Eval: 0.2635 s/iter. Total: 5.6543 s/iter. ETA=0:02:15
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:17:53 d2.evaluation.evaluator]: [0mInference done 477/500. Dataloading: 0.0057 s/iter. Inference: 5.3842 s/iter. Eval: 0.2634 s/iter. Total: 5.6535 s/iter. ETA=0:02:10
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:18:03 d2.evaluation.evaluator]: [0mInference done 479/500. Dataloading: 0.0057 s/iter. Inference: 5.3811 s/iter. Eval: 0.2633 s/iter. Total: 5.6504 s/iter. ETA=0:01:58
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:18:12 d2.evaluation.evaluator]: [0mInference done 481/500. Dataloading: 0.0058 s/iter. Inference: 5.3767 s/iter. Eval: 0.2632 s/iter. Total: 5.6458 s/iter. ETA=0:01:47
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:18:21 d2.evaluation.evaluator]: [0mInference done 483/500. Dataloading: 0.0057 s/iter. Inference: 5.3713 s/iter. Eval: 0.2632 s/iter. Total: 5.6404 s/iter. ETA=0:01:35
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:18:30 d2.evaluation.evaluator]: [0mInference done 485/500. Dataloading: 0.0057 s/iter. Inference: 5.3669 s/iter. Eval: 0.2631 s/iter. Total: 5.6359 s/iter. ETA=0:01:24
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:18:40 d2.evaluation.evaluator]: [0mInference done 487/500. Dataloading: 0.0057 s/iter. Inference: 5.3640 s/iter. Eval: 0.2631 s/iter. Total: 5.6330 s/iter. ETA=0:01:13
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:18:48 d2.evaluation.evaluator]: [0mInference done 489/500. Dataloading: 0.0057 s/iter. Inference: 5.3587 s/iter. Eval: 0.2629 s/iter. Total: 5.6275 s/iter. ETA=0:01:01
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0, 109], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10, 11, 13], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  8000, 10000, 13001], device='cuda:0')
[32m[06/28 14:18:57 d2.evaluation.evaluator]: [0mInference done 491/500. Dataloading: 0.0057 s/iter. Inference: 5.3546 s/iter. Eval: 0.2630 s/iter. Total: 5.6235 s/iter. ETA=0:00:50
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  3,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:19:06 d2.evaluation.evaluator]: [0mInference done 493/500. Dataloading: 0.0057 s/iter. Inference: 5.3493 s/iter. Eval: 0.2630 s/iter. Total: 5.6182 s/iter. ETA=0:00:39
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:19:15 d2.evaluation.evaluator]: [0mInference done 495/500. Dataloading: 0.0057 s/iter. Inference: 5.3441 s/iter. Eval: 0.2631 s/iter. Total: 5.6130 s/iter. ETA=0:00:28
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:19:23 d2.evaluation.evaluator]: [0mInference done 497/500. Dataloading: 0.0057 s/iter. Inference: 5.3388 s/iter. Eval: 0.2631 s/iter. Total: 5.6077 s/iter. ETA=0:00:16
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:19:32 d2.evaluation.evaluator]: [0mInference done 499/500. Dataloading: 0.0057 s/iter. Inference: 5.3341 s/iter. Eval: 0.2631 s/iter. Total: 5.6030 s/iter. ETA=0:00:05
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0, 10000], device='cuda:0')
[32m[06/28 14:19:37 d2.evaluation.evaluator]: [0mTotal inference time: 0:46:12.557635 (5.601127 s / iter per device, on 1 devices)
[32m[06/28 14:19:37 d2.evaluation.evaluator]: [0mTotal inference pure compute time: 0:43:59 (5.332001 s / iter per device, on 1 devices)
[32m[06/28 14:19:37 d2.evaluation.panoptic_evaluation]: [0mWriting all panoptic predictions to /tmp/panoptic_evaldcn9i1tm ...
[32m[06/28 14:19:53 d2.evaluation.panoptic_evaluation]: [0mPanoptic Evaluation Results:
|        |  PQ   |  SQ   |  RQ   |  #categories  |
|:------:|:-----:|:-----:|:-----:|:-------------:|
|  All   | 0.000 | 0.000 | 0.000 |      19       |
| Things | 0.000 | 0.000 | 0.000 |       8       |
| Stuff  | 0.000 | 0.000 | 0.000 |      11       |
[32m[06/28 14:19:53 d2.evaluation.cityscapes_evaluation]: [0mEvaluating results under /tmp/cityscapes_eval_qnm_2ctf ...
Evaluating 500 pairs of images...
Images Processed: 1 Images Processed: 2 Images Processed: 3 Images Processed: 4 Images Processed: 5 Images Processed: 6 Images Processed: 7 Images Processed: 8 Images Processed: 9 Images Processed: 10 Images Processed: 11 Images Processed: 12 Images Processed: 13 Images Processed: 14 Images Processed: 15 Images Processed: 16 Images Processed: 17 Images Processed: 18 Images Processed: 19 Images Processed: 20 Images Processed: 21 Images Processed: 22 Images Processed: 23 Images Processed: 24 Images Processed: 25 Images Processed: 26 Images Processed: 27 Images Processed: 28 Images Processed: 29 Images Processed: 30 Images Processed: 31 Images Processed: 32 Images Processed: 33 Images Processed: 34 Images Processed: 35 