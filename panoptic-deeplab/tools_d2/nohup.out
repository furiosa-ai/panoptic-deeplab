Command Line Args: Namespace(config_file='experiments/lr_1e-3_batch32_4812/panoptic_deeplab_X_65_os16_mg124_poly_90k_bs32_crop_512_1024_dsconv_eval.yaml', resume=False, eval_only=True, num_gpus=1, num_machines=1, machine_rank=0, dist_url='tcp://127.0.0.1:49152', opts=['MODEL.WEIGHTS', 'experiments/lr_1e-3_batch32_4812/model_0054999.pth'])
[32m[06/28 17:58:42 detectron2]: [0mRank of current process: 0. World size: 1
[32m[06/28 17:58:46 detectron2]: [0mEnvironment info:
----------------------  ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.9.12 | packaged by conda-forge | (main, Mar 24 2022, 23:25:59) [GCC 10.3.0]
numpy                   1.22.4
detectron2              0.6 @/root/ljh726/detectron2/detectron2
detectron2._C           not built correctly: /root/ljh726/detectron2/detectron2/_C.cpython-39-x86_64-linux-gnu.so: undefined symbol: _ZN5torch3jit17parseSchemaOrNameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
Compiler ($CXX)         c++ (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0
CUDA compiler           Build cuda_11.6.r11.6/compiler.30794723_0
detectron2 arch flags   /root/ljh726/detectron2/detectron2/_C.cpython-39-x86_64-linux-gnu.so
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.11.0 @/root/.conda/envs/py3912/lib/python3.9/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1                 NVIDIA A100-SXM4-80GB (arch=8.0)
Driver version          470.82.01
CUDA_HOME               /usr/local/cuda
TORCH_CUDA_ARCH_LIST    5.2 6.0 6.1 7.0 7.5 8.0 8.6+PTX
Pillow                  9.1.1
torchvision             0.12.0 @/root/.conda/envs/py3912/lib/python3.9/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5, 8.0, 8.6
fvcore                  0.1.5.post20220512
iopath                  0.1.9
cv2                     4.5.5
----------------------  ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2022.1-Product Build 20220311 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.5
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.3.2
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.5, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[32m[06/28 17:58:46 detectron2]: [0mCommand line arguments: Namespace(config_file='experiments/lr_1e-3_batch32_4812/panoptic_deeplab_X_65_os16_mg124_poly_90k_bs32_crop_512_1024_dsconv_eval.yaml', resume=False, eval_only=True, num_gpus=1, num_machines=1, machine_rank=0, dist_url='tcp://127.0.0.1:49152', opts=['MODEL.WEIGHTS', 'experiments/lr_1e-3_batch32_4812/model_0054999.pth'])
[32m[06/28 17:58:46 detectron2]: [0mContents of args.config_file=experiments/lr_1e-3_batch32_4812/panoptic_deeplab_X_65_os16_mg124_poly_90k_bs32_crop_512_1024_dsconv_eval.yaml:
[38;5;197m_BASE_[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mBase-PanopticDeepLab-OS16.yaml[39m
[38;5;197mMODEL[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mWEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186m./pretrained/x65.pkl[39m[38;5;186m"[39m
[38;5;15m  [39m[38;5;197mPIXEL_MEAN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15m128[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m128[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m128[39m[38;5;15m][39m
[38;5;15m  [39m[38;5;197mPIXEL_STD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15m128[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m128[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m128[39m[38;5;15m][39m
[38;5;15m  [39m[38;5;197mBACKBONE[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186md2_xception_65[39m[38;5;186m"[39m
[38;5;15m  [39m[38;5;197mRESNETS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mBN[39m[38;5;186m"[39m[38;5;15m [39m[38;5;242m#SyncBN: Multi-GPU[39m
[38;5;15m    [39m[38;5;197mRES4_DILATION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mRES5_DILATION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m
[38;5;15m  [39m[38;5;197mPANOPTIC_DEEPLAB[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mUSE_DEPTHWISE_SEPARABLE_CONV[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mTrue[39m
[38;5;15m  [39m[38;5;197mSEM_SEG_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mUSE_DEPTHWISE_SEPARABLE_CONV[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mTrue[39m
[38;5;197mSOLVER[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mOPTIMIZER[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mADAM[39m[38;5;186m"[39m
[38;5;15m  [39m[38;5;197mBASE_LR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.001[39m
[38;5;15m  [39m[38;5;197mWEIGHT_DECAY[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m  [39m[38;5;197mWEIGHT_DECAY_NORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m  [39m[38;5;197mWEIGHT_DECAY_BIAS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m  [39m[38;5;197mMAX_ITER[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m60000[39m
[38;5;15m  [39m[38;5;197mLR_SCHEDULER_NAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mWarmupPolyLR[39m[38;5;186m"[39m
[38;5;15m  [39m[38;5;197mIMS_PER_BATCH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;197mINPUT[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mFORMAT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mRGB[39m[38;5;186m"[39m
[38;5;15m  [39m[38;5;197mCROP[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mTrue[39m
[38;5;15m    [39m[38;5;197mTYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mabsolute[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;197mSIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m(512,[39m[38;5;141m [39m[38;5;141m1024)[39m
[38;5;197mOUTPUT_DIR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186m./experiments/lr_1e-3_batch32_4812[39m[38;5;186m"[39m
[38;5;197mDATALOADER[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mNUM_WORKERS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m8[39m

[32m[06/28 17:58:46 detectron2]: [0mRunning with full config:
[38;5;197mCUDNN_BENCHMARK[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;197mDATALOADER[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mASPECT_RATIO_GROUPING[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m  [39m[38;5;197mFILTER_EMPTY_ANNOTATIONS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m  [39m[38;5;197mNUM_WORKERS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m8[39m
[38;5;15m  [39m[38;5;197mREPEAT_THRESHOLD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m  [39m[38;5;197mSAMPLER_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mTrainingSampler[39m
[38;5;197mDATASETS[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mPRECOMPUTED_PROPOSAL_TOPK_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1000[39m
[38;5;15m  [39m[38;5;197mPRECOMPUTED_PROPOSAL_TOPK_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2000[39m
[38;5;15m  [39m[38;5;197mPROPOSAL_FILES_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15m][39m
[38;5;15m  [39m[38;5;197mPROPOSAL_FILES_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15m][39m
[38;5;15m  [39m[38;5;197mTEST[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mcityscapes_fine_panoptic_val[39m
[38;5;15m  [39m[38;5;197mTRAIN[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mcityscapes_fine_panoptic_train[39m
[38;5;197mGLOBAL[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mHACK[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;197mINPUT[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mCROP[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mSINGLE_CATEGORY_MAX_AREA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mSIZE[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1024[39m
[38;5;15m    [39m[38;5;197mTYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mabsolute[39m
[38;5;15m  [39m[38;5;197mFORMAT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mRGB[39m
[38;5;15m  [39m[38;5;197mGAUSSIAN_SIGMA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m10[39m
[38;5;15m  [39m[38;5;197mIGNORE_CROWD_IN_SEMANTIC[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mIGNORE_STUFF_IN_OFFSET[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m  [39m[38;5;197mMASK_FORMAT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mpolygon[39m
[38;5;15m  [39m[38;5;197mMAX_SIZE_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2048[39m
[38;5;15m  [39m[38;5;197mMAX_SIZE_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4096[39m
[38;5;15m  [39m[38;5;197mMIN_SIZE_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1024[39m
[38;5;15m  [39m[38;5;197mMIN_SIZE_TRAIN[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m640[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m704[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m832[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m896[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1024[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1152[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1216[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1344[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1408[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1536[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1664[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1728[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1856[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1920[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m2048[39m
[38;5;15m  [39m[38;5;197mMIN_SIZE_TRAIN_SAMPLING[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mchoice[39m
[38;5;15m  [39m[38;5;197mRANDOM_FLIP[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mhorizontal[39m
[38;5;15m  [39m[38;5;197mSMALL_INSTANCE_AREA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4096[39m
[38;5;15m  [39m[38;5;197mSMALL_INSTANCE_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m3[39m
[38;5;197mMODEL[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mANCHOR_GENERATOR[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mANGLES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m-90[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m90[39m
[38;5;15m    [39m[38;5;197mASPECT_RATIOS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m2.0[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mDefaultAnchorGenerator[39m
[38;5;15m    [39m[38;5;197mOFFSET[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m    [39m[38;5;197mSIZES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m32[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m64[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m128[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m  [39m[38;5;197mBACKBONE[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mFREEZE_AT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141md2_xception_65[39m
[38;5;15m  [39m[38;5;197mDEVICE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mcuda[39m
[38;5;15m  [39m[38;5;197mFPN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mFUSE_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141msum[39m
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15m][39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mOUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m  [39m[38;5;197mINS_EMBED_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mASPP_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mASPP_DILATIONS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m8[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m12[39m
[38;5;15m    [39m[38;5;197mASPP_DROPOUT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m
[38;5;15m    [39m[38;5;197mCENTER_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m200.0[39m
[38;5;15m    [39m[38;5;197mCOMMON_STRIDE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;197mCONVS_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m128[39m
[38;5;15m    [39m[38;5;197mHEAD_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m32[39m
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres2[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres5[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mPanopticDeepLabInsEmbedHead[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mBN[39m
[38;5;15m    [39m[38;5;197mOFFSET_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.01[39m
[38;5;15m    [39m[38;5;197mPROJECT_CHANNELS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m32[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m64[39m
[38;5;15m    [39m[38;5;197mPROJECT_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres2[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres3[39m
[38;5;15m  [39m[38;5;197mKEYPOINT_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mLOAD_PROPOSALS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mMASK_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mMETA_ARCHITECTURE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mPanopticDeepLab[39m
[38;5;15m  [39m[38;5;197mPANOPTIC_DEEPLAB[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBENCHMARK_NETWORK_SPEED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mCENTER_THRESHOLD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m
[38;5;15m    [39m[38;5;197mNMS_KERNEL[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m7[39m
[38;5;15m    [39m[38;5;197mPREDICT_INSTANCES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mSIZE_DIVISIBILITY[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m-1[39m
[38;5;15m    [39m[38;5;197mSTUFF_AREA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2048[39m
[38;5;15m    [39m[38;5;197mTOP_K_INSTANCE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m200[39m
[38;5;15m    [39m[38;5;197mUSE_DEPTHWISE_SEPARABLE_CONV[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m  [39m[38;5;197mPANOPTIC_FPN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCOMBINE[39m[38;5;15m:[39m
[38;5;15m      [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m      [39m[38;5;197mINSTANCES_CONFIDENCE_THRESH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m      [39m[38;5;197mOVERLAP_THRESH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m      [39m[38;5;197mSTUFF_AREA_LIMIT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4096[39m
[38;5;15m    [39m[38;5;197mINSTANCE_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m  [39m[38;5;197mPIXEL_MEAN[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m128[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m128[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m128[39m
[38;5;15m  [39m[38;5;197mPIXEL_STD[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m128[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m128[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m128[39m
[38;5;15m  [39m[38;5;197mPROPOSAL_GENERATOR[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mMIN_SIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mRPN[39m
[38;5;15m  [39m[38;5;197mRESNETS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mDEFORM_MODULATED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mDEFORM_NUM_GROUPS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mDEFORM_ON_PER_STAGE[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mDEPTH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m50[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mBN[39m
[38;5;15m    [39m[38;5;197mNUM_GROUPS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mOUT_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres2[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres5[39m
[38;5;15m    [39m[38;5;197mRES2_OUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mRES4_DILATION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mRES5_DILATION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m
[38;5;15m    [39m[38;5;197mRES5_MULTI_GRID[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m2[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;197mSTEM_OUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m64[39m
[38;5;15m    [39m[38;5;197mSTEM_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mdeeplab[39m
[38;5;15m    [39m[38;5;197mSTRIDE_IN_1X1[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mWIDTH_PER_GROUP[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m64[39m
[38;5;15m  [39m[38;5;197mRETINANET[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141msmooth_l1[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_WEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m&id002[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mFOCAL_LOSS_ALPHA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.25[39m
[38;5;15m    [39m[38;5;197mFOCAL_LOSS_GAMMA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2.0[39m
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp5[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp6[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp7[39m
[38;5;15m    [39m[38;5;197mIOU_LABELS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m-1[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mIOU_THRESHOLDS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mNMS_THRESH_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m80[39m
[38;5;15m    [39m[38;5;197mNUM_CONVS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;197mPRIOR_PROB[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.01[39m
[38;5;15m    [39m[38;5;197mSCORE_THRESH_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.05[39m
[38;5;15m    [39m[38;5;197mSMOOTH_L1_LOSS_BETA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m
[38;5;15m    [39m[38;5;197mTOPK_CANDIDATES_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1000[39m
[38;5;15m  [39m[38;5;197mROI_BOX_CASCADE_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_WEIGHTS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m&id001[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m10.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m10.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m5.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m5.0[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m20.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m20.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m10.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m10.0[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m30.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m30.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m15.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m15.0[39m
[38;5;15m    [39m[38;5;197mIOUS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.6[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.7[39m
[38;5;15m  [39m[38;5;197mROI_BOX_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141msmooth_l1[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_WEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m*id001[39m
[38;5;15m    [39m[38;5;197mCLS_AGNOSTIC_BBOX_REG[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mCONV_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mFC_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1024[39m
[38;5;15m    [39m[38;5;197mFED_LOSS_FREQ_WEIGHT_POWER[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mFED_LOSS_NUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m50[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mNUM_CONV[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;197mNUM_FC[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;197mPOOLER_RESOLUTION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m14[39m
[38;5;15m    [39m[38;5;197mPOOLER_SAMPLING_RATIO[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;197mPOOLER_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mROIAlignV2[39m
[38;5;15m    [39m[38;5;197mSMOOTH_L1_BETA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m    [39m[38;5;197mTRAIN_ON_PRED_BOXES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mUSE_FED_LOSS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mUSE_SIGMOID_CE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mROI_HEADS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBATCH_SIZE_PER_IMAGE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres4[39m
[38;5;15m    [39m[38;5;197mIOU_LABELS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mIOU_THRESHOLDS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mRes5ROIHeads[39m
[38;5;15m    [39m[38;5;197mNMS_THRESH_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m80[39m
[38;5;15m    [39m[38;5;197mPOSITIVE_FRACTION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.25[39m
[38;5;15m    [39m[38;5;197mPROPOSAL_APPEND_GT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mSCORE_THRESH_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.05[39m
[38;5;15m  [39m[38;5;197mROI_KEYPOINT_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCONV_DIMS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mMIN_KEYPOINTS_PER_IMAGE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mKRCNNConvDeconvUpsampleHead[39m
[38;5;15m    [39m[38;5;197mNORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mNUM_KEYPOINTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m17[39m
[38;5;15m    [39m[38;5;197mPOOLER_RESOLUTION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m14[39m
[38;5;15m    [39m[38;5;197mPOOLER_SAMPLING_RATIO[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;197mPOOLER_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mROIAlignV2[39m
[38;5;15m  [39m[38;5;197mROI_MASK_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCLS_AGNOSTIC_MASK[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mCONV_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mMaskRCNNConvUpsampleHead[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mNUM_CONV[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;197mPOOLER_RESOLUTION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m14[39m
[38;5;15m    [39m[38;5;197mPOOLER_SAMPLING_RATIO[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;197mPOOLER_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mROIAlignV2[39m
[38;5;15m  [39m[38;5;197mRPN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBATCH_SIZE_PER_IMAGE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141msmooth_l1[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_WEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m*id002[39m
[38;5;15m    [39m[38;5;197mBOUNDARY_THRESH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m-1[39m
[38;5;15m    [39m[38;5;197mCONV_DIMS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m-1[39m
[38;5;15m    [39m[38;5;197mHEAD_NAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mStandardRPNHead[39m
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres4[39m
[38;5;15m    [39m[38;5;197mIOU_LABELS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m-1[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mIOU_THRESHOLDS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.7[39m
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mNMS_THRESH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.7[39m
[38;5;15m    [39m[38;5;197mPOSITIVE_FRACTION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mPOST_NMS_TOPK_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1000[39m
[38;5;15m    [39m[38;5;197mPOST_NMS_TOPK_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2000[39m
[38;5;15m    [39m[38;5;197mPRE_NMS_TOPK_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m6000[39m
[38;5;15m    [39m[38;5;197mPRE_NMS_TOPK_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m12000[39m
[38;5;15m    [39m[38;5;197mSMOOTH_L1_BETA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m  [39m[38;5;197mSEM_SEG_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mASPP_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mASPP_DILATIONS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m8[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m12[39m
[38;5;15m    [39m[38;5;197mASPP_DROPOUT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m
[38;5;15m    [39m[38;5;197mCOMMON_STRIDE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;197mCONVS_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mHEAD_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mIGNORE_VALUE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m255[39m
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres2[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres5[39m
[38;5;15m    [39m[38;5;197mLOSS_TOP_K[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.2[39m
[38;5;15m    [39m[38;5;197mLOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mhard_pixel_mining[39m
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mPanopticDeepLabSemSegHead[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mBN[39m
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m19[39m
[38;5;15m    [39m[38;5;197mPROJECT_CHANNELS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m32[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m64[39m
[38;5;15m    [39m[38;5;197mPROJECT_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres2[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres3[39m
[38;5;15m    [39m[38;5;197mUSE_DEPTHWISE_SEPARABLE_CONV[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m  [39m[38;5;197mWEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mexperiments/lr_1e-3_batch32_4812/model_0054999.pth[39m
[38;5;197mOUTPUT_DIR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m./experiments/lr_1e-3_batch32_4812[39m
[38;5;197mSEED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m-1[39m
[38;5;197mSOLVER[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mAMP[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mBASE_LR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.001[39m
[38;5;15m  [39m[38;5;197mBASE_LR_END[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m  [39m[38;5;197mBIAS_LR_FACTOR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m  [39m[38;5;197mCHECKPOINT_PERIOD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5000[39m
[38;5;15m  [39m[38;5;197mCLIP_GRADIENTS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCLIP_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mvalue[39m
[38;5;15m    [39m[38;5;197mCLIP_VALUE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mNORM_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2.0[39m
[38;5;15m  [39m[38;5;197mGAMMA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m
[38;5;15m  [39m[38;5;197mIMS_PER_BATCH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m  [39m[38;5;197mLR_SCHEDULER_NAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mWarmupPolyLR[39m
[38;5;15m  [39m[38;5;197mMAX_ITER[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m60000[39m
[38;5;15m  [39m[38;5;197mMOMENTUM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.9[39m
[38;5;15m  [39m[38;5;197mNESTEROV[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mOPTIMIZER[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mADAM[39m
[38;5;15m  [39m[38;5;197mPOLY_LR_CONSTANT_ENDING[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m  [39m[38;5;197mPOLY_LR_POWER[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.9[39m
[38;5;15m  [39m[38;5;197mREFERENCE_WORLD_SIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m  [39m[38;5;197mSTEPS[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m30000[39m
[38;5;15m  [39m[38;5;197mWARMUP_FACTOR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.001[39m
[38;5;15m  [39m[38;5;197mWARMUP_ITERS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1000[39m
[38;5;15m  [39m[38;5;197mWARMUP_METHOD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mlinear[39m
[38;5;15m  [39m[38;5;197mWEIGHT_DECAY[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m  [39m[38;5;197mWEIGHT_DECAY_BIAS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m  [39m[38;5;197mWEIGHT_DECAY_NORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;197mTEST[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mAUG[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mFLIP[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mMAX_SIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4000[39m
[38;5;15m    [39m[38;5;197mMIN_SIZES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m400[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m500[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m600[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m700[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m800[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m900[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1000[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1100[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1200[39m
[38;5;15m  [39m[38;5;197mDETECTIONS_PER_IMAGE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m100[39m
[38;5;15m  [39m[38;5;197mEVAL_PERIOD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m  [39m[38;5;197mEXPECTED_RESULTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15m][39m
[38;5;15m  [39m[38;5;197mKEYPOINT_OKS_SIGMAS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15m][39m
[38;5;15m  [39m[38;5;197mPRECISE_BN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mNUM_ITER[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m200[39m
[38;5;197mVERSION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m
[38;5;197mVIS_PERIOD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m

[32m[06/28 17:58:46 detectron2]: [0mFull config saved to ./experiments/lr_1e-3_batch32_4812/config.yaml
[32m[06/28 17:58:46 d2.utils.env]: [0mUsing a generated random seed 48285356
[32m[06/28 17:58:53 d2.engine.defaults]: [0mModel:
PanopticDeepLab(
  (backbone): d2_xception_65(
    (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
    (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (block1): XceptionBlock(
      (conv): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (bn_depth): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128, bias=False)
          (bn_depth): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=128, bias=False)
          (bn_depth): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block2): XceptionBlock(
      (conv): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128, bias=False)
          (bn_depth): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256, bias=False)
          (bn_depth): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256, bias=False)
          (bn_depth): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block3): XceptionBlock(
      (conv): Conv2d(256, 728, kernel_size=(1, 1), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256, bias=False)
          (bn_depth): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(256, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block4): XceptionBlock(
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block5): XceptionBlock(
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block6): XceptionBlock(
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block7): XceptionBlock(
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block8): XceptionBlock(
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block9): XceptionBlock(
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block10): XceptionBlock(
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block11): XceptionBlock(
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block12): XceptionBlock(
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block13): XceptionBlock(
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block14): XceptionBlock(
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block15): XceptionBlock(
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block16): XceptionBlock(
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block17): XceptionBlock(
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block18): XceptionBlock(
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block19): XceptionBlock(
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block20): XceptionBlock(
      (conv): Conv2d(728, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1024, bias=False)
          (bn_depth): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block21): XceptionBlock(
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (depthwise): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=1024, bias=False)
          (bn_depth): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (pointwise): Conv2d(1024, 1536, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(1536, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (depthwise): Conv2d(1536, 1536, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=1536, bias=False)
          (bn_depth): BatchNorm2d(1536, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (pointwise): Conv2d(1536, 1536, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(1536, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (depthwise): Conv2d(1536, 1536, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=1536, bias=False)
          (bn_depth): BatchNorm2d(1536, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (pointwise): Conv2d(1536, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
        )
      )
    )
  )
  (sem_seg_head): PanopticDeepLabSemSegHead(
    (qconcat): ModuleDict(
      (res2): QConcat(
        (conv1): Conv2d(32, 288, kernel_size=(1, 1), stride=(1, 1))
        (conv2): Conv2d(256, 288, kernel_size=(1, 1), stride=(1, 1))
      )
      (res3): QConcat(
        (conv1): Conv2d(64, 320, kernel_size=(1, 1), stride=(1, 1))
        (conv2): Conv2d(256, 320, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (decoder): ModuleDict(
      (res2): ModuleDict(
        (project_conv): Conv2d(
          256, 32, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (fuse_conv): DepthwiseSeparableConv2d(
          (depthwise): Conv2d(
            288, 288, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=288, bias=False
            (norm): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (pointwise): Conv2d(
            288, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (res3): ModuleDict(
        (project_conv): Conv2d(
          728, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (fuse_conv): DepthwiseSeparableConv2d(
          (depthwise): Conv2d(
            320, 320, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=320, bias=False
            (norm): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (pointwise): Conv2d(
            320, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (res5): ModuleDict(
        (project_conv): ASPP(
          (convs): ModuleList(
            (0): Conv2d(
              2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (1): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), groups=2048, bias=False
                (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (2): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(8, 8), dilation=(8, 8), groups=2048, bias=False
                (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (3): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(12, 12), dilation=(12, 12), groups=2048, bias=False
                (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (4): Sequential(
              (0): AdaptiveAvgPool2d(output_size=1)
              (1): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
            )
          )
          (qconcat): QConcat2(
            (convs): ModuleList(
              (0): Conv2d(256, 1280, kernel_size=(1, 1), stride=(1, 1))
              (1): Conv2d(256, 1280, kernel_size=(1, 1), stride=(1, 1))
              (2): Conv2d(256, 1280, kernel_size=(1, 1), stride=(1, 1))
              (3): Conv2d(256, 1280, kernel_size=(1, 1), stride=(1, 1))
              (4): Conv2d(256, 1280, kernel_size=(1, 1), stride=(1, 1))
            )
          )
          (project): Conv2d(
            1280, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (fuse_conv): None
      )
    )
    (head): DepthwiseSeparableConv2d(
      (depthwise): Conv2d(
        256, 256, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=256, bias=False
        (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (pointwise): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (predictor): Conv2d(256, 19, kernel_size=(1, 1), stride=(1, 1))
    (loss): DeepLabCE(
      (criterion): CrossEntropyLoss()
    )
  )
  (ins_embed_head): PanopticDeepLabInsEmbedHead(
    (qconcat): ModuleDict(
      (res2): QConcat(
        (conv1): Conv2d(32, 160, kernel_size=(1, 1), stride=(1, 1))
        (conv2): Conv2d(128, 160, kernel_size=(1, 1), stride=(1, 1))
      )
      (res3): QConcat(
        (conv1): Conv2d(64, 320, kernel_size=(1, 1), stride=(1, 1))
        (conv2): Conv2d(256, 320, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (decoder): ModuleDict(
      (res2): ModuleDict(
        (project_conv): Conv2d(
          256, 32, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (fuse_conv): DepthwiseSeparableConv2d(
          (depthwise): Conv2d(
            160, 160, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=160, bias=False
            (norm): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (pointwise): Conv2d(
            160, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (res3): ModuleDict(
        (project_conv): Conv2d(
          728, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (fuse_conv): DepthwiseSeparableConv2d(
          (depthwise): Conv2d(
            320, 320, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=320, bias=False
            (norm): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (pointwise): Conv2d(
            320, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (res5): ModuleDict(
        (project_conv): ASPP(
          (convs): ModuleList(
            (0): Conv2d(
              2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (1): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), groups=2048, bias=False
                (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (2): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(8, 8), dilation=(8, 8), groups=2048, bias=False
                (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (3): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(12, 12), dilation=(12, 12), groups=2048, bias=False
                (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (4): Sequential(
              (0): AdaptiveAvgPool2d(output_size=1)
              (1): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
            )
          )
          (qconcat): QConcat2(
            (convs): ModuleList(
              (0): Conv2d(256, 1280, kernel_size=(1, 1), stride=(1, 1))
              (1): Conv2d(256, 1280, kernel_size=(1, 1), stride=(1, 1))
              (2): Conv2d(256, 1280, kernel_size=(1, 1), stride=(1, 1))
              (3): Conv2d(256, 1280, kernel_size=(1, 1), stride=(1, 1))
              (4): Conv2d(256, 1280, kernel_size=(1, 1), stride=(1, 1))
            )
          )
          (project): Conv2d(
            1280, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (fuse_conv): None
      )
    )
    (center_head): Sequential(
      (0): Conv2d(
        128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): Conv2d(
        128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (center_predictor): Conv2d(32, 1, kernel_size=(1, 1), stride=(1, 1))
    (offset_head): DepthwiseSeparableConv2d(
      (depthwise): Conv2d(
        128, 128, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=128, bias=False
        (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (pointwise): Conv2d(
        128, 32, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (offset_predictor): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
    (center_loss): MSELoss()
    (offset_loss): L1Loss()
  )
)
GPU
[32m[06/28 17:58:58 d2.engine.defaults]: [0mModel:
PanopticDeepLab(
  (backbone): d2_xception_65(
    (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
    (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (block1): XceptionBlock(
      (conv): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (bn_depth): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128, bias=False)
          (bn_depth): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=128, bias=False)
          (bn_depth): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block2): XceptionBlock(
      (conv): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128, bias=False)
          (bn_depth): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256, bias=False)
          (bn_depth): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256, bias=False)
          (bn_depth): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block3): XceptionBlock(
      (conv): Conv2d(256, 728, kernel_size=(1, 1), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256, bias=False)
          (bn_depth): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(256, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block4): XceptionBlock(
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block5): XceptionBlock(
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block6): XceptionBlock(
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block7): XceptionBlock(
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block8): XceptionBlock(
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block9): XceptionBlock(
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block10): XceptionBlock(
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block11): XceptionBlock(
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block12): XceptionBlock(
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block13): XceptionBlock(
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block14): XceptionBlock(
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block15): XceptionBlock(
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block16): XceptionBlock(
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block17): XceptionBlock(
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block18): XceptionBlock(
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block19): XceptionBlock(
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block20): XceptionBlock(
      (conv): Conv2d(728, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 728, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(728, 728, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=728, bias=False)
          (bn_depth): BatchNorm2d(728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(728, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (relu): ReLU()
          (depthwise): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1024, bias=False)
          (bn_depth): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (pointwise): Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (block21): XceptionBlock(
      (sep_conv1): SeparableConv2d(
        (block): Sequential(
          (depthwise): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=1024, bias=False)
          (bn_depth): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (pointwise): Conv2d(1024, 1536, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(1536, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
        )
      )
      (sep_conv2): SeparableConv2d(
        (block): Sequential(
          (depthwise): Conv2d(1536, 1536, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=1536, bias=False)
          (bn_depth): BatchNorm2d(1536, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (pointwise): Conv2d(1536, 1536, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(1536, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
        )
      )
      (sep_conv3): SeparableConv2d(
        (block): Sequential(
          (depthwise): Conv2d(1536, 1536, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=1536, bias=False)
          (bn_depth): BatchNorm2d(1536, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (pointwise): Conv2d(1536, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn_point): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
        )
      )
    )
  )
  (sem_seg_head): PanopticDeepLabSemSegHead(
    (qconcat): ModuleDict(
      (res2): QConcat(
        (conv1): Conv2d(32, 288, kernel_size=(1, 1), stride=(1, 1))
        (conv2): Conv2d(256, 288, kernel_size=(1, 1), stride=(1, 1))
      )
      (res3): QConcat(
        (conv1): Conv2d(64, 320, kernel_size=(1, 1), stride=(1, 1))
        (conv2): Conv2d(256, 320, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (decoder): ModuleDict(
      (res2): ModuleDict(
        (project_conv): Conv2d(
          256, 32, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (fuse_conv): DepthwiseSeparableConv2d(
          (depthwise): Conv2d(
            288, 288, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=288, bias=False
            (norm): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (pointwise): Conv2d(
            288, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (res3): ModuleDict(
        (project_conv): Conv2d(
          728, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (fuse_conv): DepthwiseSeparableConv2d(
          (depthwise): Conv2d(
            320, 320, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=320, bias=False
            (norm): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (pointwise): Conv2d(
            320, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (res5): ModuleDict(
        (project_conv): ASPP(
          (convs): ModuleList(
            (0): Conv2d(
              2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (1): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), groups=2048, bias=False
                (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (2): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(8, 8), dilation=(8, 8), groups=2048, bias=False
                (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (3): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(12, 12), dilation=(12, 12), groups=2048, bias=False
                (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (4): Sequential(
              (0): AdaptiveAvgPool2d(output_size=1)
              (1): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
            )
          )
          (qconcat): QConcat2(
            (convs): ModuleList(
              (0): Conv2d(256, 1280, kernel_size=(1, 1), stride=(1, 1))
              (1): Conv2d(256, 1280, kernel_size=(1, 1), stride=(1, 1))
              (2): Conv2d(256, 1280, kernel_size=(1, 1), stride=(1, 1))
              (3): Conv2d(256, 1280, kernel_size=(1, 1), stride=(1, 1))
              (4): Conv2d(256, 1280, kernel_size=(1, 1), stride=(1, 1))
            )
          )
          (project): Conv2d(
            1280, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (fuse_conv): None
      )
    )
    (head): DepthwiseSeparableConv2d(
      (depthwise): Conv2d(
        256, 256, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=256, bias=False
        (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (pointwise): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (predictor): Conv2d(256, 19, kernel_size=(1, 1), stride=(1, 1))
    (loss): DeepLabCE(
      (criterion): CrossEntropyLoss()
    )
  )
  (ins_embed_head): PanopticDeepLabInsEmbedHead(
    (qconcat): ModuleDict(
      (res2): QConcat(
        (conv1): Conv2d(32, 160, kernel_size=(1, 1), stride=(1, 1))
        (conv2): Conv2d(128, 160, kernel_size=(1, 1), stride=(1, 1))
      )
      (res3): QConcat(
        (conv1): Conv2d(64, 320, kernel_size=(1, 1), stride=(1, 1))
        (conv2): Conv2d(256, 320, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (decoder): ModuleDict(
      (res2): ModuleDict(
        (project_conv): Conv2d(
          256, 32, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (fuse_conv): DepthwiseSeparableConv2d(
          (depthwise): Conv2d(
            160, 160, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=160, bias=False
            (norm): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (pointwise): Conv2d(
            160, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (res3): ModuleDict(
        (project_conv): Conv2d(
          728, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (fuse_conv): DepthwiseSeparableConv2d(
          (depthwise): Conv2d(
            320, 320, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=320, bias=False
            (norm): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (pointwise): Conv2d(
            320, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (res5): ModuleDict(
        (project_conv): ASPP(
          (convs): ModuleList(
            (0): Conv2d(
              2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (1): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), groups=2048, bias=False
                (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (2): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(8, 8), dilation=(8, 8), groups=2048, bias=False
                (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (3): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(12, 12), dilation=(12, 12), groups=2048, bias=False
                (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (4): Sequential(
              (0): AdaptiveAvgPool2d(output_size=1)
              (1): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
            )
          )
          (qconcat): QConcat2(
            (convs): ModuleList(
              (0): Conv2d(256, 1280, kernel_size=(1, 1), stride=(1, 1))
              (1): Conv2d(256, 1280, kernel_size=(1, 1), stride=(1, 1))
              (2): Conv2d(256, 1280, kernel_size=(1, 1), stride=(1, 1))
              (3): Conv2d(256, 1280, kernel_size=(1, 1), stride=(1, 1))
              (4): Conv2d(256, 1280, kernel_size=(1, 1), stride=(1, 1))
            )
          )
          (project): Conv2d(
            1280, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (fuse_conv): None
      )
    )
    (center_head): Sequential(
      (0): Conv2d(
        128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): Conv2d(
        128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (center_predictor): Conv2d(32, 1, kernel_size=(1, 1), stride=(1, 1))
    (offset_head): DepthwiseSeparableConv2d(
      (depthwise): Conv2d(
        128, 128, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=128, bias=False
        (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (pointwise): Conv2d(
        128, 32, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (offset_predictor): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
    (center_loss): MSELoss()
    (offset_loss): L1Loss()
  )
)
[32m[06/28 17:58:58 fvcore.common.checkpoint]: [0m[Checkpointer] Loading from experiments/lr_1e-3_batch32_4812/model_0054999.pth ...
[32m[06/28 17:58:59 d2.checkpoint.c2_model_loading]: [0mFollowing weights matched with model:
| Names in Model                                               | Names in Checkpoint                                                                                                                                   | Shapes                                          |
|:-------------------------------------------------------------|:------------------------------------------------------------------------------------------------------------------------------------------------------|:------------------------------------------------|
| backbone.block1.bn.*                                         | backbone.block1.bn.{bias,num_batches_tracked,running_mean,running_var,weight}                                                                         | (128,) () (128,) (128,) (128,)                  |
| backbone.block1.conv.weight                                  | backbone.block1.conv.weight                                                                                                                           | (128, 64, 1, 1)                                 |
| backbone.block1.sep_conv1.block.bn_depth.*                   | backbone.block1.sep_conv1.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (64,) () (64,) (64,) (64,)                      |
| backbone.block1.sep_conv1.block.bn_point.*                   | backbone.block1.sep_conv1.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (128,) () (128,) (128,) (128,)                  |
| backbone.block1.sep_conv1.block.depthwise.weight             | backbone.block1.sep_conv1.block.depthwise.weight                                                                                                      | (64, 1, 3, 3)                                   |
| backbone.block1.sep_conv1.block.pointwise.weight             | backbone.block1.sep_conv1.block.pointwise.weight                                                                                                      | (128, 64, 1, 1)                                 |
| backbone.block1.sep_conv2.block.bn_depth.*                   | backbone.block1.sep_conv2.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (128,) () (128,) (128,) (128,)                  |
| backbone.block1.sep_conv2.block.bn_point.*                   | backbone.block1.sep_conv2.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (128,) () (128,) (128,) (128,)                  |
| backbone.block1.sep_conv2.block.depthwise.weight             | backbone.block1.sep_conv2.block.depthwise.weight                                                                                                      | (128, 1, 3, 3)                                  |
| backbone.block1.sep_conv2.block.pointwise.weight             | backbone.block1.sep_conv2.block.pointwise.weight                                                                                                      | (128, 128, 1, 1)                                |
| backbone.block1.sep_conv3.block.bn_depth.*                   | backbone.block1.sep_conv3.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (128,) () (128,) (128,) (128,)                  |
| backbone.block1.sep_conv3.block.bn_point.*                   | backbone.block1.sep_conv3.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (128,) () (128,) (128,) (128,)                  |
| backbone.block1.sep_conv3.block.depthwise.weight             | backbone.block1.sep_conv3.block.depthwise.weight                                                                                                      | (128, 1, 3, 3)                                  |
| backbone.block1.sep_conv3.block.pointwise.weight             | backbone.block1.sep_conv3.block.pointwise.weight                                                                                                      | (128, 128, 1, 1)                                |
| backbone.block10.sep_conv1.block.bn_depth.*                  | backbone.block10.sep_conv1.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block10.sep_conv1.block.bn_point.*                  | backbone.block10.sep_conv1.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block10.sep_conv1.block.depthwise.weight            | backbone.block10.sep_conv1.block.depthwise.weight                                                                                                     | (728, 1, 3, 3)                                  |
| backbone.block10.sep_conv1.block.pointwise.weight            | backbone.block10.sep_conv1.block.pointwise.weight                                                                                                     | (728, 728, 1, 1)                                |
| backbone.block10.sep_conv2.block.bn_depth.*                  | backbone.block10.sep_conv2.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block10.sep_conv2.block.bn_point.*                  | backbone.block10.sep_conv2.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block10.sep_conv2.block.depthwise.weight            | backbone.block10.sep_conv2.block.depthwise.weight                                                                                                     | (728, 1, 3, 3)                                  |
| backbone.block10.sep_conv2.block.pointwise.weight            | backbone.block10.sep_conv2.block.pointwise.weight                                                                                                     | (728, 728, 1, 1)                                |
| backbone.block10.sep_conv3.block.bn_depth.*                  | backbone.block10.sep_conv3.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block10.sep_conv3.block.bn_point.*                  | backbone.block10.sep_conv3.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block10.sep_conv3.block.depthwise.weight            | backbone.block10.sep_conv3.block.depthwise.weight                                                                                                     | (728, 1, 3, 3)                                  |
| backbone.block10.sep_conv3.block.pointwise.weight            | backbone.block10.sep_conv3.block.pointwise.weight                                                                                                     | (728, 728, 1, 1)                                |
| backbone.block11.sep_conv1.block.bn_depth.*                  | backbone.block11.sep_conv1.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block11.sep_conv1.block.bn_point.*                  | backbone.block11.sep_conv1.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block11.sep_conv1.block.depthwise.weight            | backbone.block11.sep_conv1.block.depthwise.weight                                                                                                     | (728, 1, 3, 3)                                  |
| backbone.block11.sep_conv1.block.pointwise.weight            | backbone.block11.sep_conv1.block.pointwise.weight                                                                                                     | (728, 728, 1, 1)                                |
| backbone.block11.sep_conv2.block.bn_depth.*                  | backbone.block11.sep_conv2.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block11.sep_conv2.block.bn_point.*                  | backbone.block11.sep_conv2.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block11.sep_conv2.block.depthwise.weight            | backbone.block11.sep_conv2.block.depthwise.weight                                                                                                     | (728, 1, 3, 3)                                  |
| backbone.block11.sep_conv2.block.pointwise.weight            | backbone.block11.sep_conv2.block.pointwise.weight                                                                                                     | (728, 728, 1, 1)                                |
| backbone.block11.sep_conv3.block.bn_depth.*                  | backbone.block11.sep_conv3.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block11.sep_conv3.block.bn_point.*                  | backbone.block11.sep_conv3.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block11.sep_conv3.block.depthwise.weight            | backbone.block11.sep_conv3.block.depthwise.weight                                                                                                     | (728, 1, 3, 3)                                  |
| backbone.block11.sep_conv3.block.pointwise.weight            | backbone.block11.sep_conv3.block.pointwise.weight                                                                                                     | (728, 728, 1, 1)                                |
| backbone.block12.sep_conv1.block.bn_depth.*                  | backbone.block12.sep_conv1.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block12.sep_conv1.block.bn_point.*                  | backbone.block12.sep_conv1.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block12.sep_conv1.block.depthwise.weight            | backbone.block12.sep_conv1.block.depthwise.weight                                                                                                     | (728, 1, 3, 3)                                  |
| backbone.block12.sep_conv1.block.pointwise.weight            | backbone.block12.sep_conv1.block.pointwise.weight                                                                                                     | (728, 728, 1, 1)                                |
| backbone.block12.sep_conv2.block.bn_depth.*                  | backbone.block12.sep_conv2.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block12.sep_conv2.block.bn_point.*                  | backbone.block12.sep_conv2.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block12.sep_conv2.block.depthwise.weight            | backbone.block12.sep_conv2.block.depthwise.weight                                                                                                     | (728, 1, 3, 3)                                  |
| backbone.block12.sep_conv2.block.pointwise.weight            | backbone.block12.sep_conv2.block.pointwise.weight                                                                                                     | (728, 728, 1, 1)                                |
| backbone.block12.sep_conv3.block.bn_depth.*                  | backbone.block12.sep_conv3.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block12.sep_conv3.block.bn_point.*                  | backbone.block12.sep_conv3.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block12.sep_conv3.block.depthwise.weight            | backbone.block12.sep_conv3.block.depthwise.weight                                                                                                     | (728, 1, 3, 3)                                  |
| backbone.block12.sep_conv3.block.pointwise.weight            | backbone.block12.sep_conv3.block.pointwise.weight                                                                                                     | (728, 728, 1, 1)                                |
| backbone.block13.sep_conv1.block.bn_depth.*                  | backbone.block13.sep_conv1.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block13.sep_conv1.block.bn_point.*                  | backbone.block13.sep_conv1.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block13.sep_conv1.block.depthwise.weight            | backbone.block13.sep_conv1.block.depthwise.weight                                                                                                     | (728, 1, 3, 3)                                  |
| backbone.block13.sep_conv1.block.pointwise.weight            | backbone.block13.sep_conv1.block.pointwise.weight                                                                                                     | (728, 728, 1, 1)                                |
| backbone.block13.sep_conv2.block.bn_depth.*                  | backbone.block13.sep_conv2.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block13.sep_conv2.block.bn_point.*                  | backbone.block13.sep_conv2.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block13.sep_conv2.block.depthwise.weight            | backbone.block13.sep_conv2.block.depthwise.weight                                                                                                     | (728, 1, 3, 3)                                  |
| backbone.block13.sep_conv2.block.pointwise.weight            | backbone.block13.sep_conv2.block.pointwise.weight                                                                                                     | (728, 728, 1, 1)                                |
| backbone.block13.sep_conv3.block.bn_depth.*                  | backbone.block13.sep_conv3.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block13.sep_conv3.block.bn_point.*                  | backbone.block13.sep_conv3.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block13.sep_conv3.block.depthwise.weight            | backbone.block13.sep_conv3.block.depthwise.weight                                                                                                     | (728, 1, 3, 3)                                  |
| backbone.block13.sep_conv3.block.pointwise.weight            | backbone.block13.sep_conv3.block.pointwise.weight                                                                                                     | (728, 728, 1, 1)                                |
| backbone.block14.sep_conv1.block.bn_depth.*                  | backbone.block14.sep_conv1.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block14.sep_conv1.block.bn_point.*                  | backbone.block14.sep_conv1.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block14.sep_conv1.block.depthwise.weight            | backbone.block14.sep_conv1.block.depthwise.weight                                                                                                     | (728, 1, 3, 3)                                  |
| backbone.block14.sep_conv1.block.pointwise.weight            | backbone.block14.sep_conv1.block.pointwise.weight                                                                                                     | (728, 728, 1, 1)                                |
| backbone.block14.sep_conv2.block.bn_depth.*                  | backbone.block14.sep_conv2.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block14.sep_conv2.block.bn_point.*                  | backbone.block14.sep_conv2.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block14.sep_conv2.block.depthwise.weight            | backbone.block14.sep_conv2.block.depthwise.weight                                                                                                     | (728, 1, 3, 3)                                  |
| backbone.block14.sep_conv2.block.pointwise.weight            | backbone.block14.sep_conv2.block.pointwise.weight                                                                                                     | (728, 728, 1, 1)                                |
| backbone.block14.sep_conv3.block.bn_depth.*                  | backbone.block14.sep_conv3.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block14.sep_conv3.block.bn_point.*                  | backbone.block14.sep_conv3.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block14.sep_conv3.block.depthwise.weight            | backbone.block14.sep_conv3.block.depthwise.weight                                                                                                     | (728, 1, 3, 3)                                  |
| backbone.block14.sep_conv3.block.pointwise.weight            | backbone.block14.sep_conv3.block.pointwise.weight                                                                                                     | (728, 728, 1, 1)                                |
| backbone.block15.sep_conv1.block.bn_depth.*                  | backbone.block15.sep_conv1.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block15.sep_conv1.block.bn_point.*                  | backbone.block15.sep_conv1.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block15.sep_conv1.block.depthwise.weight            | backbone.block15.sep_conv1.block.depthwise.weight                                                                                                     | (728, 1, 3, 3)                                  |
| backbone.block15.sep_conv1.block.pointwise.weight            | backbone.block15.sep_conv1.block.pointwise.weight                                                                                                     | (728, 728, 1, 1)                                |
| backbone.block15.sep_conv2.block.bn_depth.*                  | backbone.block15.sep_conv2.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block15.sep_conv2.block.bn_point.*                  | backbone.block15.sep_conv2.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block15.sep_conv2.block.depthwise.weight            | backbone.block15.sep_conv2.block.depthwise.weight                                                                                                     | (728, 1, 3, 3)                                  |
| backbone.block15.sep_conv2.block.pointwise.weight            | backbone.block15.sep_conv2.block.pointwise.weight                                                                                                     | (728, 728, 1, 1)                                |
| backbone.block15.sep_conv3.block.bn_depth.*                  | backbone.block15.sep_conv3.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block15.sep_conv3.block.bn_point.*                  | backbone.block15.sep_conv3.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block15.sep_conv3.block.depthwise.weight            | backbone.block15.sep_conv3.block.depthwise.weight                                                                                                     | (728, 1, 3, 3)                                  |
| backbone.block15.sep_conv3.block.pointwise.weight            | backbone.block15.sep_conv3.block.pointwise.weight                                                                                                     | (728, 728, 1, 1)                                |
| backbone.block16.sep_conv1.block.bn_depth.*                  | backbone.block16.sep_conv1.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block16.sep_conv1.block.bn_point.*                  | backbone.block16.sep_conv1.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block16.sep_conv1.block.depthwise.weight            | backbone.block16.sep_conv1.block.depthwise.weight                                                                                                     | (728, 1, 3, 3)                                  |
| backbone.block16.sep_conv1.block.pointwise.weight            | backbone.block16.sep_conv1.block.pointwise.weight                                                                                                     | (728, 728, 1, 1)                                |
| backbone.block16.sep_conv2.block.bn_depth.*                  | backbone.block16.sep_conv2.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block16.sep_conv2.block.bn_point.*                  | backbone.block16.sep_conv2.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block16.sep_conv2.block.depthwise.weight            | backbone.block16.sep_conv2.block.depthwise.weight                                                                                                     | (728, 1, 3, 3)                                  |
| backbone.block16.sep_conv2.block.pointwise.weight            | backbone.block16.sep_conv2.block.pointwise.weight                                                                                                     | (728, 728, 1, 1)                                |
| backbone.block16.sep_conv3.block.bn_depth.*                  | backbone.block16.sep_conv3.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block16.sep_conv3.block.bn_point.*                  | backbone.block16.sep_conv3.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block16.sep_conv3.block.depthwise.weight            | backbone.block16.sep_conv3.block.depthwise.weight                                                                                                     | (728, 1, 3, 3)                                  |
| backbone.block16.sep_conv3.block.pointwise.weight            | backbone.block16.sep_conv3.block.pointwise.weight                                                                                                     | (728, 728, 1, 1)                                |
| backbone.block17.sep_conv1.block.bn_depth.*                  | backbone.block17.sep_conv1.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block17.sep_conv1.block.bn_point.*                  | backbone.block17.sep_conv1.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block17.sep_conv1.block.depthwise.weight            | backbone.block17.sep_conv1.block.depthwise.weight                                                                                                     | (728, 1, 3, 3)                                  |
| backbone.block17.sep_conv1.block.pointwise.weight            | backbone.block17.sep_conv1.block.pointwise.weight                                                                                                     | (728, 728, 1, 1)                                |
| backbone.block17.sep_conv2.block.bn_depth.*                  | backbone.block17.sep_conv2.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block17.sep_conv2.block.bn_point.*                  | backbone.block17.sep_conv2.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block17.sep_conv2.block.depthwise.weight            | backbone.block17.sep_conv2.block.depthwise.weight                                                                                                     | (728, 1, 3, 3)                                  |
| backbone.block17.sep_conv2.block.pointwise.weight            | backbone.block17.sep_conv2.block.pointwise.weight                                                                                                     | (728, 728, 1, 1)                                |
| backbone.block17.sep_conv3.block.bn_depth.*                  | backbone.block17.sep_conv3.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block17.sep_conv3.block.bn_point.*                  | backbone.block17.sep_conv3.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block17.sep_conv3.block.depthwise.weight            | backbone.block17.sep_conv3.block.depthwise.weight                                                                                                     | (728, 1, 3, 3)                                  |
| backbone.block17.sep_conv3.block.pointwise.weight            | backbone.block17.sep_conv3.block.pointwise.weight                                                                                                     | (728, 728, 1, 1)                                |
| backbone.block18.sep_conv1.block.bn_depth.*                  | backbone.block18.sep_conv1.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block18.sep_conv1.block.bn_point.*                  | backbone.block18.sep_conv1.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block18.sep_conv1.block.depthwise.weight            | backbone.block18.sep_conv1.block.depthwise.weight                                                                                                     | (728, 1, 3, 3)                                  |
| backbone.block18.sep_conv1.block.pointwise.weight            | backbone.block18.sep_conv1.block.pointwise.weight                                                                                                     | (728, 728, 1, 1)                                |
| backbone.block18.sep_conv2.block.bn_depth.*                  | backbone.block18.sep_conv2.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block18.sep_conv2.block.bn_point.*                  | backbone.block18.sep_conv2.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block18.sep_conv2.block.depthwise.weight            | backbone.block18.sep_conv2.block.depthwise.weight                                                                                                     | (728, 1, 3, 3)                                  |
| backbone.block18.sep_conv2.block.pointwise.weight            | backbone.block18.sep_conv2.block.pointwise.weight                                                                                                     | (728, 728, 1, 1)                                |
| backbone.block18.sep_conv3.block.bn_depth.*                  | backbone.block18.sep_conv3.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block18.sep_conv3.block.bn_point.*                  | backbone.block18.sep_conv3.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block18.sep_conv3.block.depthwise.weight            | backbone.block18.sep_conv3.block.depthwise.weight                                                                                                     | (728, 1, 3, 3)                                  |
| backbone.block18.sep_conv3.block.pointwise.weight            | backbone.block18.sep_conv3.block.pointwise.weight                                                                                                     | (728, 728, 1, 1)                                |
| backbone.block19.sep_conv1.block.bn_depth.*                  | backbone.block19.sep_conv1.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block19.sep_conv1.block.bn_point.*                  | backbone.block19.sep_conv1.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block19.sep_conv1.block.depthwise.weight            | backbone.block19.sep_conv1.block.depthwise.weight                                                                                                     | (728, 1, 3, 3)                                  |
| backbone.block19.sep_conv1.block.pointwise.weight            | backbone.block19.sep_conv1.block.pointwise.weight                                                                                                     | (728, 728, 1, 1)                                |
| backbone.block19.sep_conv2.block.bn_depth.*                  | backbone.block19.sep_conv2.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block19.sep_conv2.block.bn_point.*                  | backbone.block19.sep_conv2.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block19.sep_conv2.block.depthwise.weight            | backbone.block19.sep_conv2.block.depthwise.weight                                                                                                     | (728, 1, 3, 3)                                  |
| backbone.block19.sep_conv2.block.pointwise.weight            | backbone.block19.sep_conv2.block.pointwise.weight                                                                                                     | (728, 728, 1, 1)                                |
| backbone.block19.sep_conv3.block.bn_depth.*                  | backbone.block19.sep_conv3.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block19.sep_conv3.block.bn_point.*                  | backbone.block19.sep_conv3.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block19.sep_conv3.block.depthwise.weight            | backbone.block19.sep_conv3.block.depthwise.weight                                                                                                     | (728, 1, 3, 3)                                  |
| backbone.block19.sep_conv3.block.pointwise.weight            | backbone.block19.sep_conv3.block.pointwise.weight                                                                                                     | (728, 728, 1, 1)                                |
| backbone.block2.bn.*                                         | backbone.block2.bn.{bias,num_batches_tracked,running_mean,running_var,weight}                                                                         | (256,) () (256,) (256,) (256,)                  |
| backbone.block2.conv.weight                                  | backbone.block2.conv.weight                                                                                                                           | (256, 128, 1, 1)                                |
| backbone.block2.sep_conv1.block.bn_depth.*                   | backbone.block2.sep_conv1.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (128,) () (128,) (128,) (128,)                  |
| backbone.block2.sep_conv1.block.bn_point.*                   | backbone.block2.sep_conv1.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (256,) () (256,) (256,) (256,)                  |
| backbone.block2.sep_conv1.block.depthwise.weight             | backbone.block2.sep_conv1.block.depthwise.weight                                                                                                      | (128, 1, 3, 3)                                  |
| backbone.block2.sep_conv1.block.pointwise.weight             | backbone.block2.sep_conv1.block.pointwise.weight                                                                                                      | (256, 128, 1, 1)                                |
| backbone.block2.sep_conv2.block.bn_depth.*                   | backbone.block2.sep_conv2.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (256,) () (256,) (256,) (256,)                  |
| backbone.block2.sep_conv2.block.bn_point.*                   | backbone.block2.sep_conv2.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (256,) () (256,) (256,) (256,)                  |
| backbone.block2.sep_conv2.block.depthwise.weight             | backbone.block2.sep_conv2.block.depthwise.weight                                                                                                      | (256, 1, 3, 3)                                  |
| backbone.block2.sep_conv2.block.pointwise.weight             | backbone.block2.sep_conv2.block.pointwise.weight                                                                                                      | (256, 256, 1, 1)                                |
| backbone.block2.sep_conv3.block.bn_depth.*                   | backbone.block2.sep_conv3.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (256,) () (256,) (256,) (256,)                  |
| backbone.block2.sep_conv3.block.bn_point.*                   | backbone.block2.sep_conv3.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (256,) () (256,) (256,) (256,)                  |
| backbone.block2.sep_conv3.block.depthwise.weight             | backbone.block2.sep_conv3.block.depthwise.weight                                                                                                      | (256, 1, 3, 3)                                  |
| backbone.block2.sep_conv3.block.pointwise.weight             | backbone.block2.sep_conv3.block.pointwise.weight                                                                                                      | (256, 256, 1, 1)                                |
| backbone.block20.bn.*                                        | backbone.block20.bn.{bias,num_batches_tracked,running_mean,running_var,weight}                                                                        | (1024,) () (1024,) (1024,) (1024,)              |
| backbone.block20.conv.weight                                 | backbone.block20.conv.weight                                                                                                                          | (1024, 728, 1, 1)                               |
| backbone.block20.sep_conv1.block.bn_depth.*                  | backbone.block20.sep_conv1.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block20.sep_conv1.block.bn_point.*                  | backbone.block20.sep_conv1.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block20.sep_conv1.block.depthwise.weight            | backbone.block20.sep_conv1.block.depthwise.weight                                                                                                     | (728, 1, 3, 3)                                  |
| backbone.block20.sep_conv1.block.pointwise.weight            | backbone.block20.sep_conv1.block.pointwise.weight                                                                                                     | (728, 728, 1, 1)                                |
| backbone.block20.sep_conv2.block.bn_depth.*                  | backbone.block20.sep_conv2.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (728,) () (728,) (728,) (728,)                  |
| backbone.block20.sep_conv2.block.bn_point.*                  | backbone.block20.sep_conv2.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (1024,) () (1024,) (1024,) (1024,)              |
| backbone.block20.sep_conv2.block.depthwise.weight            | backbone.block20.sep_conv2.block.depthwise.weight                                                                                                     | (728, 1, 3, 3)                                  |
| backbone.block20.sep_conv2.block.pointwise.weight            | backbone.block20.sep_conv2.block.pointwise.weight                                                                                                     | (1024, 728, 1, 1)                               |
| backbone.block20.sep_conv3.block.bn_depth.*                  | backbone.block20.sep_conv3.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (1024,) () (1024,) (1024,) (1024,)              |
| backbone.block20.sep_conv3.block.bn_point.*                  | backbone.block20.sep_conv3.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (1024,) () (1024,) (1024,) (1024,)              |
| backbone.block20.sep_conv3.block.depthwise.weight            | backbone.block20.sep_conv3.block.depthwise.weight                                                                                                     | (1024, 1, 3, 3)                                 |
| backbone.block20.sep_conv3.block.pointwise.weight            | backbone.block20.sep_conv3.block.pointwise.weight                                                                                                     | (1024, 1024, 1, 1)                              |
| backbone.block21.sep_conv1.block.bn_depth.*                  | backbone.block21.sep_conv1.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (1024,) () (1024,) (1024,) (1024,)              |
| backbone.block21.sep_conv1.block.bn_point.*                  | backbone.block21.sep_conv1.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (1536,) () (1536,) (1536,) (1536,)              |
| backbone.block21.sep_conv1.block.depthwise.weight            | backbone.block21.sep_conv1.block.depthwise.weight                                                                                                     | (1024, 1, 3, 3)                                 |
| backbone.block21.sep_conv1.block.pointwise.weight            | backbone.block21.sep_conv1.block.pointwise.weight                                                                                                     | (1536, 1024, 1, 1)                              |
| backbone.block21.sep_conv2.block.bn_depth.*                  | backbone.block21.sep_conv2.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (1536,) () (1536,) (1536,) (1536,)              |
| backbone.block21.sep_conv2.block.bn_point.*                  | backbone.block21.sep_conv2.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (1536,) () (1536,) (1536,) (1536,)              |
| backbone.block21.sep_conv2.block.depthwise.weight            | backbone.block21.sep_conv2.block.depthwise.weight                                                                                                     | (1536, 1, 3, 3)                                 |
| backbone.block21.sep_conv2.block.pointwise.weight            | backbone.block21.sep_conv2.block.pointwise.weight                                                                                                     | (1536, 1536, 1, 1)                              |
| backbone.block21.sep_conv3.block.bn_depth.*                  | backbone.block21.sep_conv3.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (1536,) () (1536,) (1536,) (1536,)              |
| backbone.block21.sep_conv3.block.bn_point.*                  | backbone.block21.sep_conv3.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                  | (2048,) () (2048,) (2048,) (2048,)              |
| backbone.block21.sep_conv3.block.depthwise.weight            | backbone.block21.sep_conv3.block.depthwise.weight                                                                                                     | (1536, 1, 3, 3)                                 |
| backbone.block21.sep_conv3.block.pointwise.weight            | backbone.block21.sep_conv3.block.pointwise.weight                                                                                                     | (2048, 1536, 1, 1)                              |
| backbone.block3.bn.*                                         | backbone.block3.bn.{bias,num_batches_tracked,running_mean,running_var,weight}                                                                         | (728,) () (728,) (728,) (728,)                  |
| backbone.block3.conv.weight                                  | backbone.block3.conv.weight                                                                                                                           | (728, 256, 1, 1)                                |
| backbone.block3.sep_conv1.block.bn_depth.*                   | backbone.block3.sep_conv1.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (256,) () (256,) (256,) (256,)                  |
| backbone.block3.sep_conv1.block.bn_point.*                   | backbone.block3.sep_conv1.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block3.sep_conv1.block.depthwise.weight             | backbone.block3.sep_conv1.block.depthwise.weight                                                                                                      | (256, 1, 3, 3)                                  |
| backbone.block3.sep_conv1.block.pointwise.weight             | backbone.block3.sep_conv1.block.pointwise.weight                                                                                                      | (728, 256, 1, 1)                                |
| backbone.block3.sep_conv2.block.bn_depth.*                   | backbone.block3.sep_conv2.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block3.sep_conv2.block.bn_point.*                   | backbone.block3.sep_conv2.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block3.sep_conv2.block.depthwise.weight             | backbone.block3.sep_conv2.block.depthwise.weight                                                                                                      | (728, 1, 3, 3)                                  |
| backbone.block3.sep_conv2.block.pointwise.weight             | backbone.block3.sep_conv2.block.pointwise.weight                                                                                                      | (728, 728, 1, 1)                                |
| backbone.block3.sep_conv3.block.bn_depth.*                   | backbone.block3.sep_conv3.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block3.sep_conv3.block.bn_point.*                   | backbone.block3.sep_conv3.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block3.sep_conv3.block.depthwise.weight             | backbone.block3.sep_conv3.block.depthwise.weight                                                                                                      | (728, 1, 3, 3)                                  |
| backbone.block3.sep_conv3.block.pointwise.weight             | backbone.block3.sep_conv3.block.pointwise.weight                                                                                                      | (728, 728, 1, 1)                                |
| backbone.block4.sep_conv1.block.bn_depth.*                   | backbone.block4.sep_conv1.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block4.sep_conv1.block.bn_point.*                   | backbone.block4.sep_conv1.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block4.sep_conv1.block.depthwise.weight             | backbone.block4.sep_conv1.block.depthwise.weight                                                                                                      | (728, 1, 3, 3)                                  |
| backbone.block4.sep_conv1.block.pointwise.weight             | backbone.block4.sep_conv1.block.pointwise.weight                                                                                                      | (728, 728, 1, 1)                                |
| backbone.block4.sep_conv2.block.bn_depth.*                   | backbone.block4.sep_conv2.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block4.sep_conv2.block.bn_point.*                   | backbone.block4.sep_conv2.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block4.sep_conv2.block.depthwise.weight             | backbone.block4.sep_conv2.block.depthwise.weight                                                                                                      | (728, 1, 3, 3)                                  |
| backbone.block4.sep_conv2.block.pointwise.weight             | backbone.block4.sep_conv2.block.pointwise.weight                                                                                                      | (728, 728, 1, 1)                                |
| backbone.block4.sep_conv3.block.bn_depth.*                   | backbone.block4.sep_conv3.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block4.sep_conv3.block.bn_point.*                   | backbone.block4.sep_conv3.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block4.sep_conv3.block.depthwise.weight             | backbone.block4.sep_conv3.block.depthwise.weight                                                                                                      | (728, 1, 3, 3)                                  |
| backbone.block4.sep_conv3.block.pointwise.weight             | backbone.block4.sep_conv3.block.pointwise.weight                                                                                                      | (728, 728, 1, 1)                                |
| backbone.block5.sep_conv1.block.bn_depth.*                   | backbone.block5.sep_conv1.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block5.sep_conv1.block.bn_point.*                   | backbone.block5.sep_conv1.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block5.sep_conv1.block.depthwise.weight             | backbone.block5.sep_conv1.block.depthwise.weight                                                                                                      | (728, 1, 3, 3)                                  |
| backbone.block5.sep_conv1.block.pointwise.weight             | backbone.block5.sep_conv1.block.pointwise.weight                                                                                                      | (728, 728, 1, 1)                                |
| backbone.block5.sep_conv2.block.bn_depth.*                   | backbone.block5.sep_conv2.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block5.sep_conv2.block.bn_point.*                   | backbone.block5.sep_conv2.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block5.sep_conv2.block.depthwise.weight             | backbone.block5.sep_conv2.block.depthwise.weight                                                                                                      | (728, 1, 3, 3)                                  |
| backbone.block5.sep_conv2.block.pointwise.weight             | backbone.block5.sep_conv2.block.pointwise.weight                                                                                                      | (728, 728, 1, 1)                                |
| backbone.block5.sep_conv3.block.bn_depth.*                   | backbone.block5.sep_conv3.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block5.sep_conv3.block.bn_point.*                   | backbone.block5.sep_conv3.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block5.sep_conv3.block.depthwise.weight             | backbone.block5.sep_conv3.block.depthwise.weight                                                                                                      | (728, 1, 3, 3)                                  |
| backbone.block5.sep_conv3.block.pointwise.weight             | backbone.block5.sep_conv3.block.pointwise.weight                                                                                                      | (728, 728, 1, 1)                                |
| backbone.block6.sep_conv1.block.bn_depth.*                   | backbone.block6.sep_conv1.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block6.sep_conv1.block.bn_point.*                   | backbone.block6.sep_conv1.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block6.sep_conv1.block.depthwise.weight             | backbone.block6.sep_conv1.block.depthwise.weight                                                                                                      | (728, 1, 3, 3)                                  |
| backbone.block6.sep_conv1.block.pointwise.weight             | backbone.block6.sep_conv1.block.pointwise.weight                                                                                                      | (728, 728, 1, 1)                                |
| backbone.block6.sep_conv2.block.bn_depth.*                   | backbone.block6.sep_conv2.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block6.sep_conv2.block.bn_point.*                   | backbone.block6.sep_conv2.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block6.sep_conv2.block.depthwise.weight             | backbone.block6.sep_conv2.block.depthwise.weight                                                                                                      | (728, 1, 3, 3)                                  |
| backbone.block6.sep_conv2.block.pointwise.weight             | backbone.block6.sep_conv2.block.pointwise.weight                                                                                                      | (728, 728, 1, 1)                                |
| backbone.block6.sep_conv3.block.bn_depth.*                   | backbone.block6.sep_conv3.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block6.sep_conv3.block.bn_point.*                   | backbone.block6.sep_conv3.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block6.sep_conv3.block.depthwise.weight             | backbone.block6.sep_conv3.block.depthwise.weight                                                                                                      | (728, 1, 3, 3)                                  |
| backbone.block6.sep_conv3.block.pointwise.weight             | backbone.block6.sep_conv3.block.pointwise.weight                                                                                                      | (728, 728, 1, 1)                                |
| backbone.block7.sep_conv1.block.bn_depth.*                   | backbone.block7.sep_conv1.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block7.sep_conv1.block.bn_point.*                   | backbone.block7.sep_conv1.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block7.sep_conv1.block.depthwise.weight             | backbone.block7.sep_conv1.block.depthwise.weight                                                                                                      | (728, 1, 3, 3)                                  |
| backbone.block7.sep_conv1.block.pointwise.weight             | backbone.block7.sep_conv1.block.pointwise.weight                                                                                                      | (728, 728, 1, 1)                                |
| backbone.block7.sep_conv2.block.bn_depth.*                   | backbone.block7.sep_conv2.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block7.sep_conv2.block.bn_point.*                   | backbone.block7.sep_conv2.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block7.sep_conv2.block.depthwise.weight             | backbone.block7.sep_conv2.block.depthwise.weight                                                                                                      | (728, 1, 3, 3)                                  |
| backbone.block7.sep_conv2.block.pointwise.weight             | backbone.block7.sep_conv2.block.pointwise.weight                                                                                                      | (728, 728, 1, 1)                                |
| backbone.block7.sep_conv3.block.bn_depth.*                   | backbone.block7.sep_conv3.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block7.sep_conv3.block.bn_point.*                   | backbone.block7.sep_conv3.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block7.sep_conv3.block.depthwise.weight             | backbone.block7.sep_conv3.block.depthwise.weight                                                                                                      | (728, 1, 3, 3)                                  |
| backbone.block7.sep_conv3.block.pointwise.weight             | backbone.block7.sep_conv3.block.pointwise.weight                                                                                                      | (728, 728, 1, 1)                                |
| backbone.block8.sep_conv1.block.bn_depth.*                   | backbone.block8.sep_conv1.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block8.sep_conv1.block.bn_point.*                   | backbone.block8.sep_conv1.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block8.sep_conv1.block.depthwise.weight             | backbone.block8.sep_conv1.block.depthwise.weight                                                                                                      | (728, 1, 3, 3)                                  |
| backbone.block8.sep_conv1.block.pointwise.weight             | backbone.block8.sep_conv1.block.pointwise.weight                                                                                                      | (728, 728, 1, 1)                                |
| backbone.block8.sep_conv2.block.bn_depth.*                   | backbone.block8.sep_conv2.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block8.sep_conv2.block.bn_point.*                   | backbone.block8.sep_conv2.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block8.sep_conv2.block.depthwise.weight             | backbone.block8.sep_conv2.block.depthwise.weight                                                                                                      | (728, 1, 3, 3)                                  |
| backbone.block8.sep_conv2.block.pointwise.weight             | backbone.block8.sep_conv2.block.pointwise.weight                                                                                                      | (728, 728, 1, 1)                                |
| backbone.block8.sep_conv3.block.bn_depth.*                   | backbone.block8.sep_conv3.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block8.sep_conv3.block.bn_point.*                   | backbone.block8.sep_conv3.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block8.sep_conv3.block.depthwise.weight             | backbone.block8.sep_conv3.block.depthwise.weight                                                                                                      | (728, 1, 3, 3)                                  |
| backbone.block8.sep_conv3.block.pointwise.weight             | backbone.block8.sep_conv3.block.pointwise.weight                                                                                                      | (728, 728, 1, 1)                                |
| backbone.block9.sep_conv1.block.bn_depth.*                   | backbone.block9.sep_conv1.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block9.sep_conv1.block.bn_point.*                   | backbone.block9.sep_conv1.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block9.sep_conv1.block.depthwise.weight             | backbone.block9.sep_conv1.block.depthwise.weight                                                                                                      | (728, 1, 3, 3)                                  |
| backbone.block9.sep_conv1.block.pointwise.weight             | backbone.block9.sep_conv1.block.pointwise.weight                                                                                                      | (728, 728, 1, 1)                                |
| backbone.block9.sep_conv2.block.bn_depth.*                   | backbone.block9.sep_conv2.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block9.sep_conv2.block.bn_point.*                   | backbone.block9.sep_conv2.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block9.sep_conv2.block.depthwise.weight             | backbone.block9.sep_conv2.block.depthwise.weight                                                                                                      | (728, 1, 3, 3)                                  |
| backbone.block9.sep_conv2.block.pointwise.weight             | backbone.block9.sep_conv2.block.pointwise.weight                                                                                                      | (728, 728, 1, 1)                                |
| backbone.block9.sep_conv3.block.bn_depth.*                   | backbone.block9.sep_conv3.block.bn_depth.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block9.sep_conv3.block.bn_point.*                   | backbone.block9.sep_conv3.block.bn_point.{bias,num_batches_tracked,running_mean,running_var,weight}                                                   | (728,) () (728,) (728,) (728,)                  |
| backbone.block9.sep_conv3.block.depthwise.weight             | backbone.block9.sep_conv3.block.depthwise.weight                                                                                                      | (728, 1, 3, 3)                                  |
| backbone.block9.sep_conv3.block.pointwise.weight             | backbone.block9.sep_conv3.block.pointwise.weight                                                                                                      | (728, 728, 1, 1)                                |
| backbone.bn1.*                                               | backbone.bn1.{bias,num_batches_tracked,running_mean,running_var,weight}                                                                               | (32,) () (32,) (32,) (32,)                      |
| backbone.bn2.*                                               | backbone.bn2.{bias,num_batches_tracked,running_mean,running_var,weight}                                                                               | (64,) () (64,) (64,) (64,)                      |
| backbone.conv1.weight                                        | backbone.conv1.weight                                                                                                                                 | (32, 3, 3, 3)                                   |
| backbone.conv2.weight                                        | backbone.conv2.weight                                                                                                                                 | (64, 32, 3, 3)                                  |
| ins_embed_head.center_head.0.*                               | ins_embed_head.center_head.0.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}                               | (128,) () (128,) (128,) (128,) (128,128,3,3)    |
| ins_embed_head.center_head.1.*                               | ins_embed_head.center_head.1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}                               | (32,) () (32,) (32,) (32,) (32,128,3,3)         |
| ins_embed_head.center_predictor.*                            | ins_embed_head.center_predictor.{bias,weight}                                                                                                         | (1,) (1,32,1,1)                                 |
| ins_embed_head.decoder.res2.fuse_conv.depthwise.*            | ins_embed_head.decoder.res2.fuse_conv.depthwise.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}            | (160,) () (160,) (160,) (160,) (160,1,5,5)      |
| ins_embed_head.decoder.res2.fuse_conv.pointwise.*            | ins_embed_head.decoder.res2.fuse_conv.pointwise.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}            | (128,) () (128,) (128,) (128,) (128,160,1,1)    |
| ins_embed_head.decoder.res2.project_conv.*                   | ins_embed_head.decoder.res2.project_conv.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}                   | (32,) () (32,) (32,) (32,) (32,256,1,1)         |
| ins_embed_head.decoder.res3.fuse_conv.depthwise.*            | ins_embed_head.decoder.res3.fuse_conv.depthwise.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}            | (320,) () (320,) (320,) (320,) (320,1,5,5)      |
| ins_embed_head.decoder.res3.fuse_conv.pointwise.*            | ins_embed_head.decoder.res3.fuse_conv.pointwise.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}            | (128,) () (128,) (128,) (128,) (128,320,1,1)    |
| ins_embed_head.decoder.res3.project_conv.*                   | ins_embed_head.decoder.res3.project_conv.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}                   | (64,) () (64,) (64,) (64,) (64,728,1,1)         |
| ins_embed_head.decoder.res5.project_conv.convs.0.*           | ins_embed_head.decoder.res5.project_conv.convs.0.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}           | (256,) () (256,) (256,) (256,) (256,2048,1,1)   |
| ins_embed_head.decoder.res5.project_conv.convs.1.depthwise.* | ins_embed_head.decoder.res5.project_conv.convs.1.depthwise.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight} | (2048,) () (2048,) (2048,) (2048,) (2048,1,3,3) |
| ins_embed_head.decoder.res5.project_conv.convs.1.pointwise.* | ins_embed_head.decoder.res5.project_conv.convs.1.pointwise.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight} | (256,) () (256,) (256,) (256,) (256,2048,1,1)   |
| ins_embed_head.decoder.res5.project_conv.convs.2.depthwise.* | ins_embed_head.decoder.res5.project_conv.convs.2.depthwise.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight} | (2048,) () (2048,) (2048,) (2048,) (2048,1,3,3) |
| ins_embed_head.decoder.res5.project_conv.convs.2.pointwise.* | ins_embed_head.decoder.res5.project_conv.convs.2.pointwise.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight} | (256,) () (256,) (256,) (256,) (256,2048,1,1)   |
| ins_embed_head.decoder.res5.project_conv.convs.3.depthwise.* | ins_embed_head.decoder.res5.project_conv.convs.3.depthwise.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight} | (2048,) () (2048,) (2048,) (2048,) (2048,1,3,3) |
| ins_embed_head.decoder.res5.project_conv.convs.3.pointwise.* | ins_embed_head.decoder.res5.project_conv.convs.3.pointwise.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight} | (256,) () (256,) (256,) (256,) (256,2048,1,1)   |
| ins_embed_head.decoder.res5.project_conv.convs.4.1.*         | ins_embed_head.decoder.res5.project_conv.convs.4.1.{bias,weight}                                                                                      | (256,) (256,2048,1,1)                           |
| ins_embed_head.decoder.res5.project_conv.project.*           | ins_embed_head.decoder.res5.project_conv.project.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}           | (256,) () (256,) (256,) (256,) (256,1280,1,1)   |
| ins_embed_head.offset_head.depthwise.*                       | ins_embed_head.offset_head.depthwise.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}                       | (128,) () (128,) (128,) (128,) (128,1,5,5)      |
| ins_embed_head.offset_head.pointwise.*                       | ins_embed_head.offset_head.pointwise.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}                       | (32,) () (32,) (32,) (32,) (32,128,1,1)         |
| ins_embed_head.offset_predictor.*                            | ins_embed_head.offset_predictor.{bias,weight}                                                                                                         | (2,) (2,32,1,1)                                 |
| sem_seg_head.decoder.res2.fuse_conv.depthwise.*              | sem_seg_head.decoder.res2.fuse_conv.depthwise.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}              | (288,) () (288,) (288,) (288,) (288,1,5,5)      |
| sem_seg_head.decoder.res2.fuse_conv.pointwise.*              | sem_seg_head.decoder.res2.fuse_conv.pointwise.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}              | (256,) () (256,) (256,) (256,) (256,288,1,1)    |
| sem_seg_head.decoder.res2.project_conv.*                     | sem_seg_head.decoder.res2.project_conv.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}                     | (32,) () (32,) (32,) (32,) (32,256,1,1)         |
| sem_seg_head.decoder.res3.fuse_conv.depthwise.*              | sem_seg_head.decoder.res3.fuse_conv.depthwise.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}              | (320,) () (320,) (320,) (320,) (320,1,5,5)      |
| sem_seg_head.decoder.res3.fuse_conv.pointwise.*              | sem_seg_head.decoder.res3.fuse_conv.pointwise.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}              | (256,) () (256,) (256,) (256,) (256,320,1,1)    |
| sem_seg_head.decoder.res3.project_conv.*                     | sem_seg_head.decoder.res3.project_conv.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}                     | (64,) () (64,) (64,) (64,) (64,728,1,1)         |
| sem_seg_head.decoder.res5.project_conv.convs.0.*             | sem_seg_head.decoder.res5.project_conv.convs.0.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}             | (256,) () (256,) (256,) (256,) (256,2048,1,1)   |
| sem_seg_head.decoder.res5.project_conv.convs.1.depthwise.*   | sem_seg_head.decoder.res5.project_conv.convs.1.depthwise.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}   | (2048,) () (2048,) (2048,) (2048,) (2048,1,3,3) |
| sem_seg_head.decoder.res5.project_conv.convs.1.pointwise.*   | sem_seg_head.decoder.res5.project_conv.convs.1.pointwise.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) () (256,) (256,) (256,) (256,2048,1,1)   |
| sem_seg_head.decoder.res5.project_conv.convs.2.depthwise.*   | sem_seg_head.decoder.res5.project_conv.convs.2.depthwise.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}   | (2048,) () (2048,) (2048,) (2048,) (2048,1,3,3) |
| sem_seg_head.decoder.res5.project_conv.convs.2.pointwise.*   | sem_seg_head.decoder.res5.project_conv.convs.2.pointwise.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) () (256,) (256,) (256,) (256,2048,1,1)   |
| sem_seg_head.decoder.res5.project_conv.convs.3.depthwise.*   | sem_seg_head.decoder.res5.project_conv.convs.3.depthwise.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}   | (2048,) () (2048,) (2048,) (2048,) (2048,1,3,3) |
| sem_seg_head.decoder.res5.project_conv.convs.3.pointwise.*   | sem_seg_head.decoder.res5.project_conv.convs.3.pointwise.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) () (256,) (256,) (256,) (256,2048,1,1)   |
| sem_seg_head.decoder.res5.project_conv.convs.4.1.*           | sem_seg_head.decoder.res5.project_conv.convs.4.1.{bias,weight}                                                                                        | (256,) (256,2048,1,1)                           |
| sem_seg_head.decoder.res5.project_conv.project.*             | sem_seg_head.decoder.res5.project_conv.project.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}             | (256,) () (256,) (256,) (256,) (256,1280,1,1)   |
| sem_seg_head.head.depthwise.*                                | sem_seg_head.head.depthwise.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}                                | (256,) () (256,) (256,) (256,) (256,1,5,5)      |
| sem_seg_head.head.pointwise.*                                | sem_seg_head.head.pointwise.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}                                | (256,) () (256,) (256,) (256,) (256,256,1,1)    |
| sem_seg_head.predictor.*                                     | sem_seg_head.predictor.{bias,weight}                                                                                                                  | (19,) (19,256,1,1)                              |
[5m[31mWARNING[0m [32m[06/28 17:58:59 fvcore.common.checkpoint]: [0mSome model parameters or buffers are not found in the checkpoint:
[34mins_embed_head.decoder.res5.project_conv.qconcat.convs.0.{bias, weight}[0m
[34mins_embed_head.decoder.res5.project_conv.qconcat.convs.1.{bias, weight}[0m
[34mins_embed_head.decoder.res5.project_conv.qconcat.convs.2.{bias, weight}[0m
[34mins_embed_head.decoder.res5.project_conv.qconcat.convs.3.{bias, weight}[0m
[34mins_embed_head.decoder.res5.project_conv.qconcat.convs.4.{bias, weight}[0m
[34mins_embed_head.qconcat.res2.conv1.{bias, weight}[0m
[34mins_embed_head.qconcat.res2.conv2.{bias, weight}[0m
[34mins_embed_head.qconcat.res3.conv1.{bias, weight}[0m
[34mins_embed_head.qconcat.res3.conv2.{bias, weight}[0m
[34msem_seg_head.decoder.res5.project_conv.qconcat.convs.0.{bias, weight}[0m
[34msem_seg_head.decoder.res5.project_conv.qconcat.convs.1.{bias, weight}[0m
[34msem_seg_head.decoder.res5.project_conv.qconcat.convs.2.{bias, weight}[0m
[34msem_seg_head.decoder.res5.project_conv.qconcat.convs.3.{bias, weight}[0m
[34msem_seg_head.decoder.res5.project_conv.qconcat.convs.4.{bias, weight}[0m
[34msem_seg_head.qconcat.res2.conv1.{bias, weight}[0m
[34msem_seg_head.qconcat.res2.conv2.{bias, weight}[0m
[34msem_seg_head.qconcat.res3.conv1.{bias, weight}[0m
[34msem_seg_head.qconcat.res3.conv2.{bias, weight}[0m
[32m[06/28 17:58:59 d2.data.datasets.cityscapes_panoptic]: [0m3 cities found in 'datasets/cityscapes/leftImg8bit/val'.
[32m[06/28 17:58:59 d2.data.dataset_mapper]: [0m[DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(1024, 1024), max_size=2048, sample_style='choice')]
[32m[06/28 17:58:59 d2.data.common]: [0mSerializing 500 elements to byte tensors and concatenating them all ...
[32m[06/28 17:58:59 d2.data.common]: [0mSerialized dataset takes 0.74 MiB
[32m[06/28 17:58:59 d2.evaluation.evaluator]: [0mStart inference on 500 batches
[32m[06/28 17:58:59 d2.evaluation.cityscapes_evaluation]: [0mWriting cityscapes results to temporary directory /tmp/cityscapes_eval_9vgf604o ...
[32m[06/28 17:58:59 d2.evaluation.cityscapes_evaluation]: [0mWriting cityscapes results to temporary directory /tmp/cityscapes_eval_k3gst2vo ...
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  17,  29,  73,  84,  86,  87,  88,  89,  90,  91,  92,  94,  96,
         99, 104, 106, 107, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 143, 151, 154,
        172, 173, 175, 176, 177, 178, 179, 180, 181, 185, 191],
       device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  7,  8, 10, 11, 12, 14, 15, 16, 17],
       device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  7000,  8000, 10000, 11001,
        11002, 11003, 11004, 11005, 11006, 11007, 11008, 11009, 11010, 11011,
        11012, 11013, 11014, 11015, 11016, 11017, 11018, 11019, 11020, 11021,
        11022, 11023, 11024, 11025, 11026, 11027, 11028, 11029, 11030, 11031,
        11032, 11033, 11034, 11035, 11036, 11037, 11038, 11039, 11040, 11041,
        11042, 11043, 11044, 11045, 11046, 11047, 11048, 11049, 11050, 16001,
        17001], device='cuda:0')
[32m[06/28 17:59:08 d2.evaluation.evaluator]: [0mInference done 1/500. Dataloading: 0.9608 s/iter. Inference: 6.3257 s/iter. Eval: 1.1359 s/iter. Total: 8.4240 s/iter. ETA=1:10:03
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 13, 17, 27, 28, 29, 30, 31, 32, 59], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 11001, 11002, 11003,
        11004, 11005, 11006, 11007, 11008, 11009], device='cuda:0')
[32m[06/28 17:59:13 d2.evaluation.evaluator]: [0mInference done 2/500. Dataloading: 0.4819 s/iter. Inference: 5.7308 s/iter. Eval: 0.7854 s/iter. Total: 6.9991 s/iter. ETA=0:58:05
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  72, 186, 187, 190, 191, 192], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 17], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 11001, 11002, 11003,
        11004, 11005, 11006], device='cuda:0')
[32m[06/28 17:59:19 d2.evaluation.evaluator]: [0mInference done 3/500. Dataloading: 0.3213 s/iter. Inference: 5.6000 s/iter. Eval: 0.6475 s/iter. Total: 6.5696 s/iter. ETA=0:54:25
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 39, 47, 48], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  4,  5,  6,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002, 11003],
       device='cuda:0')
[32m[06/28 17:59:24 d2.evaluation.evaluator]: [0mInference done 4/500. Dataloading: 0.2410 s/iter. Inference: 5.4802 s/iter. Eval: 0.5547 s/iter. Total: 6.2766 s/iter. ETA=0:51:53
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  5,  6,  7,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 48, 59, 60, 61], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 11, 17, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  4000,  5000,  7000,  8000, 10000,
        11001, 11002, 17001, 18001], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  10,  11,  12,  13,  14,  15,  24,  29,  33,  39,  53,  54, 182],
       device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 11, 17, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 10000, 11001, 11002,
        11003, 11004, 11005, 11006, 11007, 11008, 11009, 11010, 11011, 11012,
        17001], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  11,  14,  17,  37,  53,  56,  57,  67,  68,  69,  70,  71,  72,
         73,  74,  76,  77,  78,  79,  81,  82, 160, 161, 169, 182, 183],
       device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 11, 17, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 10000, 11001, 11002,
        11003, 11004, 11005, 11006, 11007, 11008, 11009, 11010, 11011, 11012,
        11013, 11014, 11015, 11016, 11017, 11018, 11019, 11020, 11021, 11022,
        11023, 17001, 17002, 18001], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,   9,  10, 196], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8,  9, 10, 11, 14, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  7000,  8000,  9000, 10000,
        11001, 14001, 14002], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,
         91,  92,  93,  94,  95,  96,  97,  98,  99, 100, 101, 102, 103, 105,
        106, 108, 109, 186], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  7,  8,  9, 10, 11, 17, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  4000,  5000,  8000,  9000, 10000,
        11001, 11002, 11003, 11004, 11005, 11006, 11007, 11008, 11009, 11010,
        11011, 11012, 11013, 11014, 11015, 11016, 11017, 11018, 11019, 11020,
        11021, 11022, 11023, 11024, 11025, 11026, 11027, 11028, 11029, 11030,
        11031], device='cuda:0')
[32m[06/28 17:59:59 d2.evaluation.evaluator]: [0mInference done 11/500. Dataloading: 0.0070 s/iter. Inference: 4.5163 s/iter. Eval: 0.4240 s/iter. Total: 4.9473 s/iter. ETA=0:40:19
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  73,  74,  75,  76,  77,  78,  80,  81,  82, 133, 134, 135, 136,
        137, 148, 159, 192, 193, 194, 195], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  4000,  5000,  8000,  9000, 10000,
        11001, 11002, 11003, 11004, 11005, 11006, 11007, 11008, 11009, 11010,
        11011, 11012, 11013, 11014, 11015, 11016, 11017, 11018, 11019, 11020],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  19,  22,  23, 185], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 17, 18],
       device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000,  9000, 10000, 11001,
        11002, 11003, 18001], device='cuda:0')
[32m[06/28 18:00:08 d2.evaluation.evaluator]: [0mInference done 13/500. Dataloading: 0.0055 s/iter. Inference: 4.4920 s/iter. Eval: 0.4174 s/iter. Total: 4.9150 s/iter. ETA=0:39:53
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  8,  9, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  46, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 141,
        144, 145, 146, 168, 169, 170, 171, 172, 177, 178, 190],
       device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8,  9, 10, 11, 13], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000,  9000, 10000, 11001,
        11002, 11003, 11004, 11005, 11006, 11007, 11008, 11009, 11010, 11011,
        11012, 11013, 11014, 11015, 11016, 11017, 11018, 11019, 11020, 11021,
        11022, 11023, 13001], device='cuda:0')
[32m[06/28 18:00:18 d2.evaluation.evaluator]: [0mInference done 15/500. Dataloading: 0.0045 s/iter. Inference: 4.4558 s/iter. Eval: 0.4123 s/iter. Total: 4.8727 s/iter. ETA=0:39:23
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  86,  87,  88,  89, 157, 158], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 13, 14, 17],
       device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  4000,  5000,  8000, 10000, 11001,
        11002, 11003, 11004, 11005, 11006], device='cuda:0')
[32m[06/28 18:00:23 d2.evaluation.evaluator]: [0mInference done 16/500. Dataloading: 0.0041 s/iter. Inference: 4.4808 s/iter. Eval: 0.4092 s/iter. Total: 4.8942 s/iter. ETA=0:39:28
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,  28,  29,
         30,  31,  32,  33,  34,  37,  44,  45,  46,  47, 172, 181],
       device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  7,  8,  9, 10, 11, 12, 17, 18],
       device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 10000, 11001, 11002,
        11003, 11004, 11005, 11006, 11007, 11008, 11009, 11010, 11011, 11012,
        11013, 11014, 11015, 11016, 11017, 11018, 11019, 11020, 11021, 11022,
        11023, 11024, 18001], device='cuda:0')
[32m[06/28 18:00:28 d2.evaluation.evaluator]: [0mInference done 17/500. Dataloading: 0.0062 s/iter. Inference: 4.4920 s/iter. Eval: 0.4221 s/iter. Total: 4.9204 s/iter. ETA=0:39:36
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  20, 195, 199], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8, 10, 11, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  7000,  8000, 10000, 11001,
        11002, 11003], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 41], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 11, 17], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 10000, 11001],
       device='cuda:0')
[32m[06/28 18:00:38 d2.evaluation.evaluator]: [0mInference done 19/500. Dataloading: 0.0053 s/iter. Inference: 4.4868 s/iter. Eval: 0.4025 s/iter. Total: 4.8947 s/iter. ETA=0:39:14
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0, 156], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  7,  8,  9, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 10000, 11001],
       device='cuda:0')
[32m[06/28 18:00:43 d2.evaluation.evaluator]: [0mInference done 20/500. Dataloading: 0.0050 s/iter. Inference: 4.5150 s/iter. Eval: 0.3913 s/iter. Total: 4.9115 s/iter. ETA=0:39:17
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  14,  16, 130, 131, 132, 133, 134, 187], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002, 11003,
        11004, 11005, 11006, 11007, 11008], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0, 190], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 14, 17, 18],
       device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 10000, 18001],
       device='cuda:0')
[32m[06/28 18:00:52 d2.evaluation.evaluator]: [0mInference done 22/500. Dataloading: 0.0045 s/iter. Inference: 4.4857 s/iter. Eval: 0.3822 s/iter. Total: 4.8724 s/iter. ETA=0:38:49
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 47], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  5,  6,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  5000,  8000, 10000, 11001], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0, 164, 166], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8,  9, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002],
       device='cuda:0')
[32m[06/28 18:01:01 d2.evaluation.evaluator]: [0mInference done 24/500. Dataloading: 0.0041 s/iter. Inference: 4.4642 s/iter. Eval: 0.3683 s/iter. Total: 4.8367 s/iter. ETA=0:38:22
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  22,  31,  33,  34, 181], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  7,  8,  9, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000,  9000, 11001, 11002,
        11003, 11004, 11005], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,   1,  13,  14,  15,  16,  17,  18,  19,  20,  21,  23,  52, 168,
        173, 179], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 13, 14, 17],
       device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  7000,  8000, 11001, 11002,
        11003, 11004, 11005, 11006, 11007, 11008, 11009, 11010, 11011, 11012,
        11013, 13001, 17001], device='cuda:0')
[32m[06/28 18:01:10 d2.evaluation.evaluator]: [0mInference done 26/500. Dataloading: 0.0056 s/iter. Inference: 4.4494 s/iter. Eval: 0.3689 s/iter. Total: 4.8240 s/iter. ETA=0:38:06
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  66,  68,  72,  82,  83,  84,  85,  86,  87,  88,  89,  90, 125,
        126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,
        140], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 11, 17, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 10000, 11001, 11002,
        18001, 18002, 18003, 18004, 18005, 18006, 18007, 18008, 18009, 18010,
        18011, 18012, 18013, 18014, 18015, 18016, 18017, 18018, 18019, 18020,
        18021, 18022, 18023, 18024, 18025, 18026], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0, 153, 155, 161], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8, 10, 11, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 11001, 11002, 18001],
       device='cuda:0')
[32m[06/28 18:01:20 d2.evaluation.evaluator]: [0mInference done 28/500. Dataloading: 0.0051 s/iter. Inference: 4.4527 s/iter. Eval: 0.3719 s/iter. Total: 4.8299 s/iter. ETA=0:37:59
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([  -1,    0, 1000, 2000, 3000, 5000, 8000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0, 118, 124, 127, 128, 129, 130, 131, 132, 133], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  8, 10, 11, 17, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002, 11003,
        11004, 11005, 11006, 11007, 11008, 17001], device='cuda:0')
[32m[06/28 18:01:31 d2.evaluation.evaluator]: [0mInference done 30/500. Dataloading: 0.0047 s/iter. Inference: 4.5076 s/iter. Eval: 0.3708 s/iter. Total: 4.8832 s/iter. ETA=0:38:15
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,   1,   2,  71,  72,  76,  77, 160], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  4000,  5000,  8000, 11001, 11002,
        11003, 11004, 11005, 11006, 11007], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  32,  36,  41,  89,  90,  91,  92,  93,  94,  95,  96,  97,  98,
         99, 100, 101, 103, 104, 105, 106], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  7000,  8000, 11001, 11002, 11003,
        11004, 11005, 11006, 11007, 11008, 11009, 11010, 11011, 11012, 11013,
        11014, 11015, 11016, 11017, 11018, 11019, 11020], device='cuda:0')
[32m[06/28 18:01:41 d2.evaluation.evaluator]: [0mInference done 32/500. Dataloading: 0.0044 s/iter. Inference: 4.4909 s/iter. Eval: 0.3765 s/iter. Total: 4.8720 s/iter. ETA=0:38:00
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  66,  75,  77,  85,  86,  87,  88,  89,  90, 131, 137, 142, 162],
       device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 11, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 11001, 11002, 11003,
        11004, 11005, 11006, 11007, 11008, 11009, 11010, 11011, 11012, 18001],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  18,  19,  20,  21,  22,  23,  24,  25,  69,  76,  77,  78,  79,
         80, 120, 139, 143, 148, 183], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 17, 18],
       device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  4000,  5000,  7000,  8000, 10000,
        11001, 11002, 11003, 11004, 11005, 11006, 11007, 11008, 11009, 11010,
        11011, 11012, 11013, 11014, 11015, 11016, 11017, 11018, 18001],
       device='cuda:0')
[32m[06/28 18:01:50 d2.evaluation.evaluator]: [0mInference done 34/500. Dataloading: 0.0053 s/iter. Inference: 4.4854 s/iter. Eval: 0.3818 s/iter. Total: 4.8726 s/iter. ETA=0:37:50
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,
         52,  55,  56,  57,  71, 107, 108, 109, 110, 111, 112, 113, 114, 115,
        116, 149, 153, 184, 185, 186, 187], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 17, 18],
       device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 10000, 11001, 11002,
        11003, 11004, 11005, 11006, 11007, 11008, 11009, 11010, 11011, 11012,
        11013, 11014, 11015, 11016, 11017, 11018, 11019, 11020, 11021, 11022,
        11023, 11024, 11025, 11026, 11027, 11028, 11029, 11030, 11031, 11032,
        11033, 11034], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 51, 65, 66, 85], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002, 11003,
        11004], device='cuda:0')
[32m[06/28 18:02:01 d2.evaluation.evaluator]: [0mInference done 36/500. Dataloading: 0.0049 s/iter. Inference: 4.4933 s/iter. Eval: 0.3867 s/iter. Total: 4.8851 s/iter. ETA=0:37:46
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  84,  86,  93,  95,  97,  99, 101, 103, 105, 106, 107],
       device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  4,  5,  6,  8, 10, 11, 12, 17, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 11001, 17001, 17002, 18001,
        18002, 18003, 18004, 18005, 18006, 18007, 18008], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 80, 81], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 11, 17], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  4000,  5000,  8000, 10000, 11001,
        11002], device='cuda:0')
[32m[06/28 18:02:10 d2.evaluation.evaluator]: [0mInference done 38/500. Dataloading: 0.0047 s/iter. Inference: 4.4780 s/iter. Eval: 0.3838 s/iter. Total: 4.8666 s/iter. ETA=0:37:28
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0,  2,  5,  6,  7,  8,  9, 10, 11, 30], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 13, 15, 18],
       device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  4000,  5000,  7000,  8000, 10000,
        11001, 11002, 11003, 11004, 11005, 11006, 11007, 11008, 11009],
       device='cuda:0')
[32m[06/28 18:02:15 d2.evaluation.evaluator]: [0mInference done 39/500. Dataloading: 0.0046 s/iter. Inference: 4.5044 s/iter. Eval: 0.3845 s/iter. Total: 4.8937 s/iter. ETA=0:37:36
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0,  1,  2,  3,  6,  7,  8, 11, 14], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  7000,  8000, 10000, 11001, 11002,
        11003, 11004, 11005, 11006, 11007, 11008], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  14,  15,  19,  21,  24,  25,  26,  27,  28,  29,  30,  31,  98,
        110, 112, 113, 117, 121, 130, 136, 146, 147, 148, 149, 150],
       device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 11, 17], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 10000, 11001, 11002,
        11003, 11004, 11005, 11006, 11007, 11008, 11009, 11010, 11011, 11012,
        11013, 11014, 11015, 11016, 17001, 17002, 17003, 17004, 17005, 17006,
        17007, 17008, 17009], device='cuda:0')
[32m[06/28 18:02:26 d2.evaluation.evaluator]: [0mInference done 41/500. Dataloading: 0.0053 s/iter. Inference: 4.5123 s/iter. Eval: 0.3877 s/iter. Total: 4.9055 s/iter. ETA=0:37:31
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0, 132], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 11001],
       device='cuda:0')
[32m[06/28 18:02:31 d2.evaluation.evaluator]: [0mInference done 42/500. Dataloading: 0.0052 s/iter. Inference: 4.5266 s/iter. Eval: 0.3851 s/iter. Total: 4.9170 s/iter. ETA=0:37:31
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  43,  69,  74,  76,  78,  80,  82,  90, 150, 189],
       device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 17], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 10000, 11001, 11002,
        11003, 11004, 11005, 11006, 11007, 11008, 11009, 11010],
       device='cuda:0')
[32m[06/28 18:02:37 d2.evaluation.evaluator]: [0mInference done 43/500. Dataloading: 0.0050 s/iter. Inference: 4.5432 s/iter. Eval: 0.3860 s/iter. Total: 4.9344 s/iter. ETA=0:37:35
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 72, 95, 98], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  5,  6,  8, 10, 11, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002, 18001],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0, 141, 157, 158, 159, 160, 161, 162, 163, 164, 165],
       device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002, 11003,
        11004, 11005, 11006, 11007, 11008, 11009, 11010], device='cuda:0')
[32m[06/28 18:02:46 d2.evaluation.evaluator]: [0mInference done 45/500. Dataloading: 0.0048 s/iter. Inference: 4.5379 s/iter. Eval: 0.3835 s/iter. Total: 4.9263 s/iter. ETA=0:37:21
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  7,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  8000, 10000], device='cuda:0')
[32m[06/28 18:02:51 d2.evaluation.evaluator]: [0mInference done 46/500. Dataloading: 0.0047 s/iter. Inference: 4.5483 s/iter. Eval: 0.3794 s/iter. Total: 4.9325 s/iter. ETA=0:37:19
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0,  1, 43, 44, 45, 65, 66, 67], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 11, 13, 17], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002, 11003,
        11004, 11005, 11006, 11007], device='cuda:0')
[32m[06/28 18:02:56 d2.evaluation.evaluator]: [0mInference done 47/500. Dataloading: 0.0046 s/iter. Inference: 4.5508 s/iter. Eval: 0.3794 s/iter. Total: 4.9349 s/iter. ETA=0:37:15
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 50], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 14], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  8000, 10000, 14001], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  5,  7,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  5000,  8000, 10000], device='cuda:0')
[32m[06/28 18:03:06 d2.evaluation.evaluator]: [0mInference done 49/500. Dataloading: 0.0050 s/iter. Inference: 4.5485 s/iter. Eval: 0.3726 s/iter. Total: 4.9263 s/iter. ETA=0:37:01
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  24,  25,  26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,
         37,  38,  39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  56, 112,
        162, 197], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 11, 17, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  7000,  8000, 10000, 11001,
        11002, 11003, 11004, 11005, 11006, 11007, 11008, 11009, 11010, 11011,
        11012, 11013, 11014, 11015, 11016, 11017, 11018, 11019, 11020, 11021,
        11022, 11023, 11024, 11025, 11026, 11027, 17001, 18001],
       device='cuda:0')
[32m[06/28 18:03:11 d2.evaluation.evaluator]: [0mInference done 50/500. Dataloading: 0.0049 s/iter. Inference: 4.5456 s/iter. Eval: 0.3789 s/iter. Total: 4.9296 s/iter. ETA=0:36:58
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 68, 69, 70, 71, 72, 73, 75, 76, 77, 85], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  7000,  8000, 11001, 11002,
        11003, 11004, 11005, 11006, 11007, 11008, 11009, 11010],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0, 130], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001],
       device='cuda:0')
[32m[06/28 18:03:20 d2.evaluation.evaluator]: [0mInference done 52/500. Dataloading: 0.0047 s/iter. Inference: 4.5351 s/iter. Eval: 0.3766 s/iter. Total: 4.9165 s/iter. ETA=0:36:42
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8,  9, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  5000,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 14, 15, 16, 17, 18], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8,  9, 10, 11, 17], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002, 11003,
        11004, 11005], device='cuda:0')
[32m[06/28 18:03:29 d2.evaluation.evaluator]: [0mInference done 54/500. Dataloading: 0.0045 s/iter. Inference: 4.5244 s/iter. Eval: 0.3718 s/iter. Total: 4.9008 s/iter. ETA=0:36:25
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  5000,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  8000, 10000], device='cuda:0')
[32m[06/28 18:03:39 d2.evaluation.evaluator]: [0mInference done 56/500. Dataloading: 0.0044 s/iter. Inference: 4.5222 s/iter. Eval: 0.3679 s/iter. Total: 4.8946 s/iter. ETA=0:36:13
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 56], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001],
       device='cuda:0')
[32m[06/28 18:03:44 d2.evaluation.evaluator]: [0mInference done 57/500. Dataloading: 0.0048 s/iter. Inference: 4.5312 s/iter. Eval: 0.3655 s/iter. Total: 4.9016 s/iter. ETA=0:36:11
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  60,  77, 184], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002, 11003],
       device='cuda:0')
[32m[06/28 18:03:49 d2.evaluation.evaluator]: [0mInference done 58/500. Dataloading: 0.0047 s/iter. Inference: 4.5390 s/iter. Eval: 0.3638 s/iter. Total: 4.9077 s/iter. ETA=0:36:09
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  42, 196], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 14, 16],
       device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000,  9000, 10000, 11001,
        11002], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,   1, 118, 133, 134, 135, 136, 137, 138, 139, 141, 143, 145, 147,
        151], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8,  9, 10, 11, 12], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  7000,  8000,  9000, 10000,
        11001, 11002, 11003, 11004, 11005, 11006, 11007, 11008, 11009, 11010,
        11011, 11012, 11013, 11014], device='cuda:0')
[32m[06/28 18:03:59 d2.evaluation.evaluator]: [0mInference done 60/500. Dataloading: 0.0046 s/iter. Inference: 4.5413 s/iter. Eval: 0.3646 s/iter. Total: 4.9107 s/iter. ETA=0:36:00
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 52, 56, 57, 58], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  5,  6,  8, 10, 11, 17, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002, 11003,
        18001], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 69, 82], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002],
       device='cuda:0')
[32m[06/28 18:04:09 d2.evaluation.evaluator]: [0mInference done 62/500. Dataloading: 0.0044 s/iter. Inference: 4.5359 s/iter. Eval: 0.3615 s/iter. Total: 4.9019 s/iter. ETA=0:35:47
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  83, 186], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000,  9000, 10000, 11001, 11002],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 12, 22, 23, 24, 25], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 17], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002, 11003,
        11004, 11005], device='cuda:0')
[32m[06/28 18:04:18 d2.evaluation.evaluator]: [0mInference done 64/500. Dataloading: 0.0043 s/iter. Inference: 4.5286 s/iter. Eval: 0.3595 s/iter. Total: 4.8926 s/iter. ETA=0:35:33
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0, 164, 173, 174, 175, 182, 183, 184, 185, 186], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 11, 17, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 10000, 11001, 11002,
        11003, 11004, 11005, 11006, 11007, 11008, 17001], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0,  3, 67, 69, 72, 75, 85], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  7,  8,  9, 11, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000,  9000, 11001, 11002,
        11003, 11004, 11005, 18001], device='cuda:0')
[32m[06/28 18:04:27 d2.evaluation.evaluator]: [0mInference done 66/500. Dataloading: 0.0046 s/iter. Inference: 4.5205 s/iter. Eval: 0.3592 s/iter. Total: 4.8844 s/iter. ETA=0:35:19
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  88,  94,  95,  97,  99, 101, 107, 108, 114, 182, 183],
       device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  7000,  8000,  9000, 11001, 11002,
        11003, 11004, 11005, 11006, 11007, 11008, 11009, 11010, 11011],
       device='cuda:0')
[32m[06/28 18:04:32 d2.evaluation.evaluator]: [0mInference done 67/500. Dataloading: 0.0046 s/iter. Inference: 4.5220 s/iter. Eval: 0.3604 s/iter. Total: 4.8871 s/iter. ETA=0:35:16
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  45,  46,  47,  48,  49,  51,  58,  59,  60,  61,  62,  63, 172,
        173], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  7,  8, 10, 11, 17, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 11001, 11002, 11003, 11004,
        11005, 11006, 11007, 11008, 11009, 11010, 11011, 11012, 11013, 11014],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,   2,   9,  46,  84,  85,  86,  88,  91,  92,  93, 118, 121, 122,
        123, 177], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 11, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  7000,  8000, 10000, 11001,
        11002, 11003, 11004, 11005, 11006, 11007, 11008, 11009, 11010, 11011,
        11012, 11013, 11014, 18001], device='cuda:0')
[32m[06/28 18:04:42 d2.evaluation.evaluator]: [0mInference done 69/500. Dataloading: 0.0044 s/iter. Inference: 4.5162 s/iter. Eval: 0.3631 s/iter. Total: 4.8838 s/iter. ETA=0:35:04
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  7,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  5000,  8000, 10000], device='cuda:0')
[32m[06/28 18:04:47 d2.evaluation.evaluator]: [0mInference done 70/500. Dataloading: 0.0043 s/iter. Inference: 4.5232 s/iter. Eval: 0.3608 s/iter. Total: 4.8885 s/iter. ETA=0:35:02
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 26, 36], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002],
       device='cuda:0')
[32m[06/28 18:04:52 d2.evaluation.evaluator]: [0mInference done 71/500. Dataloading: 0.0044 s/iter. Inference: 4.5310 s/iter. Eval: 0.3596 s/iter. Total: 4.8952 s/iter. ETA=0:35:00
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  87, 189], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  7000,  8000, 10000, 11001,
        11002], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  56,  57, 157, 166, 171, 176], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 10000, 11001, 11002,
        11003, 11004, 11005, 11006], device='cuda:0')
[32m[06/28 18:05:01 d2.evaluation.evaluator]: [0mInference done 73/500. Dataloading: 0.0050 s/iter. Inference: 4.5239 s/iter. Eval: 0.3584 s/iter. Total: 4.8874 s/iter. ETA=0:34:46
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0,  1,  2,  3,  4, 71], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8, 10, 11, 17, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 11001, 11002, 11003,
        11004, 18001], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 58, 59, 60, 61, 62], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 11, 17, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  4000,  5000,  8000, 10000, 11001, 11002,
        11003, 11004, 11005], device='cuda:0')
[32m[06/28 18:05:11 d2.evaluation.evaluator]: [0mInference done 75/500. Dataloading: 0.0048 s/iter. Inference: 4.5199 s/iter. Eval: 0.3585 s/iter. Total: 4.8834 s/iter. ETA=0:34:35
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72],
       device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  7,  8, 10, 11, 12, 17, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 11001, 11002, 11003,
        11004, 11005, 11006, 11007, 11008, 11009, 11010, 11011, 11012, 11013,
        11014], device='cuda:0')
[32m[06/28 18:05:16 d2.evaluation.evaluator]: [0mInference done 76/500. Dataloading: 0.0048 s/iter. Inference: 4.5224 s/iter. Eval: 0.3593 s/iter. Total: 4.8866 s/iter. ETA=0:34:31
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  47,  57,  72,  86,  89, 115, 193, 199], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  7,  8,  9, 10, 11, 17], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 11001, 11002, 11003,
        11004, 11005, 11006, 11007, 17001], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  87,  91,  93,  95,  96,  97,  98, 106, 109, 110, 111, 112, 113,
        114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 134, 161],
       device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 11, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 11001, 11002, 11003,
        11004, 11005, 11006, 11007, 11008, 11009, 11010, 11011, 11012, 11013,
        11014, 11015, 11016, 11017, 11018, 11019, 11020, 11021, 11022, 11023,
        11024, 11025], device='cuda:0')
[32m[06/28 18:05:26 d2.evaluation.evaluator]: [0mInference done 78/500. Dataloading: 0.0046 s/iter. Inference: 4.5191 s/iter. Eval: 0.3626 s/iter. Total: 4.8865 s/iter. ETA=0:34:22
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  94, 111, 178, 189, 190, 191], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002, 11003,
        11004, 11005, 11006], device='cuda:0')
[32m[06/28 18:05:31 d2.evaluation.evaluator]: [0mInference done 79/500. Dataloading: 0.0046 s/iter. Inference: 4.5246 s/iter. Eval: 0.3620 s/iter. Total: 4.8913 s/iter. ETA=0:34:19
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,   7,   8,   9,  24,  25,  26,  27,  28,  29,  39,  76,  88,  89,
        160, 161, 162, 163, 171, 175, 176, 184, 188], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  4000,  5000,  7000,  8000, 10000,
        11001, 11002, 11003, 11004, 11005, 11006, 11007, 11008, 11009, 11010,
        11011, 11012, 11013, 11014, 11015, 11016, 11017, 11018, 11019, 11020,
        11021, 11022], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  73,  74,  75,  76,  77,  78,  79,  80,  81,  82,  83,  84,  85,
         86, 155], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  7,  8, 10, 11, 17, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  4000,  5000,  8000, 10000, 11001,
        11002, 11003, 11004, 11005, 11006, 11007, 11008, 11009, 11010, 17001,
        17002, 17003, 18001, 18002], device='cuda:0')
[32m[06/28 18:05:41 d2.evaluation.evaluator]: [0mInference done 81/500. Dataloading: 0.0052 s/iter. Inference: 4.5255 s/iter. Eval: 0.3677 s/iter. Total: 4.8986 s/iter. ETA=0:34:12
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  56,  68,  74, 167, 170], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  7,  8, 10, 11, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 10000, 11001, 11002,
        11003, 11004, 11005], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 32, 37, 38, 39, 40, 41, 42, 43, 45, 50, 54, 55], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002, 11003,
        11004, 11005, 11006, 11007, 11008, 11009, 11010, 11011, 11012],
       device='cuda:0')
[32m[06/28 18:05:51 d2.evaluation.evaluator]: [0mInference done 83/500. Dataloading: 0.0051 s/iter. Inference: 4.5215 s/iter. Eval: 0.3676 s/iter. Total: 4.8943 s/iter. ETA=0:34:00
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  10,  11,  12,  13,  14,  15,  16,  20,  42,  43,  45,  46,  47,
         53,  54,  55,  56,  57,  58,  59,  61,  63,  67,  68,  69,  72,  75,
         78,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90, 177],
       device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  5,  6,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  7000, 10000, 11001, 11002, 11003,
        11004, 11005, 11006, 11007, 11008, 11009, 11010, 11011, 11012, 11013,
        11014, 11015, 11016, 11017, 11018, 11019, 11020, 11021, 11022, 11023,
        11024, 11025, 11026, 11027, 11028, 11029, 11030, 11031, 11032, 11033,
        11034, 11035, 11036, 11037, 11038, 11039, 11040], device='cuda:0')
[32m[06/28 18:05:56 d2.evaluation.evaluator]: [0mInference done 84/500. Dataloading: 0.0050 s/iter. Inference: 4.5210 s/iter. Eval: 0.3714 s/iter. Total: 4.8976 s/iter. ETA=0:33:57
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0, 105, 134], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  5000,  7000,  8000, 10000, 11001, 11002],
       device='cuda:0')
[32m[06/28 18:06:01 d2.evaluation.evaluator]: [0mInference done 85/500. Dataloading: 0.0049 s/iter. Inference: 4.5263 s/iter. Eval: 0.3699 s/iter. Total: 4.9012 s/iter. ETA=0:33:54
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  62,  63,  64,  65,  67,  68,  69,  70,  71,  72,  73,  74,  75,
         76,  77,  78,  97,  98,  99, 100, 101, 102, 107, 108, 111, 112, 140,
        144, 147], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 11, 12], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002, 11003,
        11004, 11005, 11006, 11007, 11008, 11009, 11010, 11011, 11012, 11013,
        11014, 11015, 11016, 11017, 11018, 11019, 11020, 11021, 11022, 11023,
        11024, 11025, 11026, 11027, 11028, 11029], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  24,  25,  26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,
         37,  54,  61,  79,  82, 122, 123, 124, 125, 146, 149, 165, 167, 169],
       device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 11, 12, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002, 11003,
        11004, 11005, 11006, 11007, 11008, 11009, 11010, 11011, 11012, 11013,
        11014, 11015, 11016, 11017, 11018, 11019, 11020, 11021, 11022, 11023,
        11024, 11025, 11026, 11027], device='cuda:0')
[32m[06/28 18:06:11 d2.evaluation.evaluator]: [0mInference done 87/500. Dataloading: 0.0048 s/iter. Inference: 4.5205 s/iter. Eval: 0.3750 s/iter. Total: 4.9005 s/iter. ETA=0:33:43
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  5,  6,  7,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  70, 151], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  5,  6,  7,  8, 10, 11, 17], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  5000,  8000, 11001, 17001], device='cuda:0')
[32m[06/28 18:06:21 d2.evaluation.evaluator]: [0mInference done 89/500. Dataloading: 0.0055 s/iter. Inference: 4.5221 s/iter. Eval: 0.3732 s/iter. Total: 4.9010 s/iter. ETA=0:33:34
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 25, 26, 27, 28], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  4,  5,  6,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002, 11003,
        11004], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 41, 47, 50, 51, 52], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  5,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002, 11003,
        11004, 11005], device='cuda:0')
[32m[06/28 18:06:31 d2.evaluation.evaluator]: [0mInference done 91/500. Dataloading: 0.0054 s/iter. Inference: 4.5234 s/iter. Eval: 0.3718 s/iter. Total: 4.9007 s/iter. ETA=0:33:24
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  93,  98,  99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109,
        111], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  5,  6,  7,  8, 10, 11, 14, 15], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000, 10000, 11001, 11002, 11003, 11004,
        11005, 11006, 11007, 11008, 11009, 11010, 11011, 11012, 11013, 11014],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  36,  50,  73,  74, 124, 125, 192], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  7000,  8000, 10000, 11001,
        11002, 11003, 11004, 11005, 11006, 11007], device='cuda:0')
[32m[06/28 18:06:40 d2.evaluation.evaluator]: [0mInference done 93/500. Dataloading: 0.0053 s/iter. Inference: 4.5182 s/iter. Eval: 0.3718 s/iter. Total: 4.8955 s/iter. ETA=0:33:12
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0, 142, 144, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161,
        165, 166, 176, 177, 179], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 11, 17, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 10000, 11001, 11002,
        11003, 11004, 11005, 11006, 11007, 11008, 11009, 11010, 11011, 11012,
        17001, 17002, 17003, 17004, 17005, 17006], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  8000, 10000], device='cuda:0')
[32m[06/28 18:06:50 d2.evaluation.evaluator]: [0mInference done 95/500. Dataloading: 0.0052 s/iter. Inference: 4.5204 s/iter. Eval: 0.3717 s/iter. Total: 4.8974 s/iter. ETA=0:33:03
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  49,  66, 158, 159, 170, 171, 172, 173, 174, 175, 176, 177, 178,
        179, 180, 181, 182], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  7,  8, 10, 11, 12, 17, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 10000, 11001, 11002,
        11003, 11004, 12001, 17001, 17002, 17003, 17004, 17005, 17006, 17007,
        17008, 17009, 17010, 17011, 17012], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0,  1, 19, 20, 22, 26, 47, 48, 55, 56, 57], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  4,  5,  6,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002, 11003,
        11004, 11005, 11006, 11007, 11008, 11009, 11010], device='cuda:0')
[32m[06/28 18:06:59 d2.evaluation.evaluator]: [0mInference done 97/500. Dataloading: 0.0056 s/iter. Inference: 4.5148 s/iter. Eval: 0.3730 s/iter. Total: 4.8936 s/iter. ETA=0:32:52
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  32,  33,  76,  85,  86,  87,  88, 173, 182], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  7,  8,  9, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000,  9000, 10000, 11001, 11002,
        11003, 11004, 11005, 11006, 11007, 11008, 11009], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  92, 103, 104, 110, 112, 115, 116], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  7,  8,  9, 10, 11, 17], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000,  9000, 10000, 11001,
        11002, 11003, 11004, 11005, 11006, 11007], device='cuda:0')
[32m[06/28 18:07:09 d2.evaluation.evaluator]: [0mInference done 99/500. Dataloading: 0.0055 s/iter. Inference: 4.5181 s/iter. Eval: 0.3739 s/iter. Total: 4.8976 s/iter. ETA=0:32:43
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 98, 99], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  4,  5,  6,  7,  8, 10, 11, 17, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002],
       device='cuda:0')
[32m[06/28 18:07:15 d2.evaluation.evaluator]: [0mInference done 100/500. Dataloading: 0.0054 s/iter. Inference: 4.5227 s/iter. Eval: 0.3730 s/iter. Total: 4.9013 s/iter. ETA=0:32:40
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  57,  68,  79, 178, 183], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8, 10, 11, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 11001, 11002, 11003, 11004,
        11005], device='cuda:0')
[32m[06/28 18:07:20 d2.evaluation.evaluator]: [0mInference done 101/500. Dataloading: 0.0054 s/iter. Inference: 4.5268 s/iter. Eval: 0.3722 s/iter. Total: 4.9046 s/iter. ETA=0:32:36
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,   7,  74,  75,  76, 149, 161, 165], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000,  9000, 10000, 11001,
        11002, 11003, 11004, 11005, 11006, 11007], device='cuda:0')
[32m[06/28 18:07:25 d2.evaluation.evaluator]: [0mInference done 102/500. Dataloading: 0.0053 s/iter. Inference: 4.5277 s/iter. Eval: 0.3725 s/iter. Total: 4.9057 s/iter. ETA=0:32:32
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 35, 56, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70],
       device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 17], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  7000,  8000,  9000, 10000,
        11001, 11002, 11003, 11004, 11005, 11006, 11007, 11008, 11009, 11010,
        11011, 11012, 11013], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  7,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000], device='cuda:0')
[32m[06/28 18:07:35 d2.evaluation.evaluator]: [0mInference done 104/500. Dataloading: 0.0052 s/iter. Inference: 4.5310 s/iter. Eval: 0.3719 s/iter. Total: 4.9083 s/iter. ETA=0:32:23
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 59], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 10000, 11001],
       device='cuda:0')
[32m[06/28 18:07:41 d2.evaluation.evaluator]: [0mInference done 105/500. Dataloading: 0.0056 s/iter. Inference: 4.5395 s/iter. Eval: 0.3710 s/iter. Total: 4.9162 s/iter. ETA=0:32:21
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 74, 75, 80], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  5,  6,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  5000,  8000, 10000, 11001, 11002, 11003],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0, 114], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  7000,  8000, 10000, 11001],
       device='cuda:0')
[32m[06/28 18:07:50 d2.evaluation.evaluator]: [0mInference done 107/500. Dataloading: 0.0055 s/iter. Inference: 4.5382 s/iter. Eval: 0.3688 s/iter. Total: 4.9126 s/iter. ETA=0:32:10
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 77], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  5,  6,  7,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000], device='cuda:0')
[32m[06/28 18:07:59 d2.evaluation.evaluator]: [0mInference done 109/500. Dataloading: 0.0054 s/iter. Inference: 4.5350 s/iter. Eval: 0.3668 s/iter. Total: 4.9073 s/iter. ETA=0:31:58
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0, 185], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 10000, 11001],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  72,  76,  77,  78, 196], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 17], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  4000,  5000,  8000, 10000, 11001,
        11002, 11003, 11004, 11005], device='cuda:0')
[32m[06/28 18:08:09 d2.evaluation.evaluator]: [0mInference done 111/500. Dataloading: 0.0053 s/iter. Inference: 4.5359 s/iter. Eval: 0.3657 s/iter. Total: 4.9070 s/iter. ETA=0:31:48
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,   3,   4,   5,   6,   8,  21, 181], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 11001, 11002, 11003,
        11004, 11005, 11006, 11007], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  36, 116, 119, 143, 146, 154, 181], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 11, 14], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  4000,  5000,  8000, 10000, 11001,
        11002, 11003, 11004, 11005, 11006, 14001], device='cuda:0')
[32m[06/28 18:08:19 d2.evaluation.evaluator]: [0mInference done 113/500. Dataloading: 0.0056 s/iter. Inference: 4.5324 s/iter. Eval: 0.3658 s/iter. Total: 4.9039 s/iter. ETA=0:31:37
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  5000,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0, 153, 170, 179, 180, 181, 182, 183, 184, 185, 186, 187],
       device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  5,  6,  7,  8, 10, 11, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002, 11003,
        11004, 11005, 11006, 11007, 11008, 11009, 18001, 18002],
       device='cuda:0')
[32m[06/28 18:08:28 d2.evaluation.evaluator]: [0mInference done 115/500. Dataloading: 0.0055 s/iter. Inference: 4.5303 s/iter. Eval: 0.3651 s/iter. Total: 4.9011 s/iter. ETA=0:31:26
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0, 115, 116, 118, 121, 122, 124], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002, 11003,
        11004, 11005, 11006], device='cuda:0')
[32m[06/28 18:08:34 d2.evaluation.evaluator]: [0mInference done 116/500. Dataloading: 0.0055 s/iter. Inference: 4.5360 s/iter. Eval: 0.3651 s/iter. Total: 4.9067 s/iter. ETA=0:31:24
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0, 151, 152, 153, 154, 155, 156, 166], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 10000, 11001, 11002,
        11003, 11004, 11005, 18001, 18002], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0, 121, 130, 131, 133, 136, 145, 149, 150, 165, 174, 194, 195],
       device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8, 10, 11, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 10000, 11001, 11002,
        11003, 11004, 11005, 11006, 11007, 11008, 11009, 11010, 18001, 18002],
       device='cuda:0')
[32m[06/28 18:08:43 d2.evaluation.evaluator]: [0mInference done 118/500. Dataloading: 0.0054 s/iter. Inference: 4.5328 s/iter. Eval: 0.3644 s/iter. Total: 4.9027 s/iter. ETA=0:31:12
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0, 194], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 17, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 18001],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0, 114], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 10000, 11001],
       device='cuda:0')
[32m[06/28 18:08:53 d2.evaluation.evaluator]: [0mInference done 120/500. Dataloading: 0.0053 s/iter. Inference: 4.5345 s/iter. Eval: 0.3632 s/iter. Total: 4.9031 s/iter. ETA=0:31:03
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  85, 181], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 17, 18],
       device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  4000,  5000,  8000, 10000, 11001,
        17001], device='cuda:0')
[32m[06/28 18:08:58 d2.evaluation.evaluator]: [0mInference done 121/500. Dataloading: 0.0059 s/iter. Inference: 4.5358 s/iter. Eval: 0.3632 s/iter. Total: 4.9051 s/iter. ETA=0:30:59
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  86,  93, 106, 130, 135, 138, 166, 170, 172, 198],
       device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8, 10, 11, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  8000, 10000, 11001, 11002, 11003, 18001,
        18002, 18003, 18004, 18005, 18006, 18007], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 84, 91, 93, 95], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8,  9, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002, 11003,
        11004], device='cuda:0')
[32m[06/28 18:09:08 d2.evaluation.evaluator]: [0mInference done 123/500. Dataloading: 0.0058 s/iter. Inference: 4.5372 s/iter. Eval: 0.3629 s/iter. Total: 4.9061 s/iter. ETA=0:30:49
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 82, 83], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 10000, 11001, 11002],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,   1,  80,  81,  82,  83,  84,  85,  95, 106, 107, 108, 184],
       device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 11, 17, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  7000, 10000, 11001, 11002, 11003,
        11004, 11005, 11006, 11007, 11008, 11009, 11010, 11011, 11012],
       device='cuda:0')
[32m[06/28 18:09:18 d2.evaluation.evaluator]: [0mInference done 125/500. Dataloading: 0.0057 s/iter. Inference: 4.5396 s/iter. Eval: 0.3626 s/iter. Total: 4.9081 s/iter. ETA=0:30:40
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 61, 62, 63, 92], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002, 11003,
        11004], device='cuda:0')
[32m[06/28 18:09:24 d2.evaluation.evaluator]: [0mInference done 126/500. Dataloading: 0.0057 s/iter. Inference: 4.5465 s/iter. Eval: 0.3623 s/iter. Total: 4.9146 s/iter. ETA=0:30:38
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  73, 102, 117], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002, 11003],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0, 174, 176, 177, 178, 179, 180], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  5,  7,  8, 10, 11, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002, 18001,
        18002, 18003, 18004], device='cuda:0')
[32m[06/28 18:09:35 d2.evaluation.evaluator]: [0mInference done 128/500. Dataloading: 0.0056 s/iter. Inference: 4.5543 s/iter. Eval: 0.3621 s/iter. Total: 4.9221 s/iter. ETA=0:30:31
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 82, 83, 84], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 11, 12, 17, 18],
       device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  4000,  5000,  8000, 10000, 11001,
        11002, 11003], device='cuda:0')
[32m[06/28 18:09:40 d2.evaluation.evaluator]: [0mInference done 129/500. Dataloading: 0.0060 s/iter. Inference: 4.5572 s/iter. Eval: 0.3617 s/iter. Total: 4.9250 s/iter. ETA=0:30:27
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 60, 61], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002],
       device='cuda:0')
[32m[06/28 18:09:45 d2.evaluation.evaluator]: [0mInference done 130/500. Dataloading: 0.0059 s/iter. Inference: 4.5616 s/iter. Eval: 0.3611 s/iter. Total: 4.9287 s/iter. ETA=0:30:23
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  50,  51,  82, 135, 136], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8, 10, 11, 13], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000, 10000, 11001, 11002, 11003,
        11004, 11005], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  56,  57,  58,  59,  60,  61,  94, 118, 124, 130, 138, 139, 140,
        146, 157, 165], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 11, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 10000, 11001, 11002,
        11003, 11004, 11005, 11006, 11007, 11008, 11009, 11010, 11011, 11012,
        11013, 11014, 11015, 11016], device='cuda:0')
[32m[06/28 18:09:55 d2.evaluation.evaluator]: [0mInference done 132/500. Dataloading: 0.0058 s/iter. Inference: 4.5597 s/iter. Eval: 0.3620 s/iter. Total: 4.9277 s/iter. ETA=0:30:13
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  26,  27,  28,  33,  37,  47,  52,  85,  86, 189],
       device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 11, 17], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002, 11003,
        11004, 11005, 11006, 11007, 11008, 11009, 11010], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 76, 79, 80, 81], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  7, 10, 11, 17, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000, 10000, 11001, 11002, 11003, 17001],
       device='cuda:0')
[32m[06/28 18:10:05 d2.evaluation.evaluator]: [0mInference done 134/500. Dataloading: 0.0057 s/iter. Inference: 4.5655 s/iter. Eval: 0.3618 s/iter. Total: 4.9332 s/iter. ETA=0:30:05
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  21, 170, 185], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  4,  5,  7,  8, 10, 11, 17, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000, 10000, 11001, 17001, 17002],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0, 121], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  5,  6,  8, 10, 11, 17], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 17001],
       device='cuda:0')
[32m[06/28 18:10:15 d2.evaluation.evaluator]: [0mInference done 136/500. Dataloading: 0.0059 s/iter. Inference: 4.5629 s/iter. Eval: 0.3607 s/iter. Total: 4.9296 s/iter. ETA=0:29:54
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,   6,  48,  49,  50,  51,  52,  53,  54,  55,  56,  57, 123, 188],
       device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 13, 18],
       device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000,  9000, 10000, 11001,
        11002, 11003, 11004, 11005, 11006, 11007, 11008, 11009, 11010, 11011,
        11012, 13001], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  41,  94, 196], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 11, 14], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 11001, 11002, 14001],
       device='cuda:0')
[32m[06/28 18:10:25 d2.evaluation.evaluator]: [0mInference done 138/500. Dataloading: 0.0058 s/iter. Inference: 4.5661 s/iter. Eval: 0.3610 s/iter. Total: 4.9330 s/iter. ETA=0:29:45
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0, 110, 158], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  78,  81,  84,  86,  88,  90,  92,  94,  96,  98, 105, 107, 109,
        111, 114, 115, 116, 176], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8,  9, 10, 11, 17, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000,  9000, 10000, 11001,
        11002, 11003, 11004, 11005, 11006, 11007, 11008, 11009, 11010, 11011,
        11012, 11013, 11014, 11015, 11016, 18001, 18002], device='cuda:0')
[32m[06/28 18:10:35 d2.evaluation.evaluator]: [0mInference done 140/500. Dataloading: 0.0057 s/iter. Inference: 4.5628 s/iter. Eval: 0.3610 s/iter. Total: 4.9297 s/iter. ETA=0:29:34
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  85,  86,  87,  88, 187, 188], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8,  9, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000,  9000, 10000, 11001,
        11002, 11003, 11004, 11005, 11006], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  16,  17,  20,  21,  23,  34,  39,  40,  41,  42,  43,  46,  53,
         57,  59,  61,  62,  63, 165, 166, 167, 171, 172, 173, 174, 175, 176],
       device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 11, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 11001, 11002, 11003,
        11004, 11005, 11006, 11007, 11008, 11009, 11010, 11011, 11012, 11013,
        11014, 11015, 11016, 11017, 11018, 11019, 11020, 11021, 11022, 11023,
        11024, 11025, 11026, 11027], device='cuda:0')
[32m[06/28 18:10:44 d2.evaluation.evaluator]: [0mInference done 142/500. Dataloading: 0.0057 s/iter. Inference: 4.5592 s/iter. Eval: 0.3627 s/iter. Total: 4.9277 s/iter. ETA=0:29:24
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0,  7, 10, 11, 12, 13, 14], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 11001, 11002, 11003,
        11004, 11005, 11006], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  35,  36,  37,  38,  39,  40,  41,  43,  45,  52,  53,  58,  59,
        158, 165, 185], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 11, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 11001, 11002, 11003, 11004,
        11005, 11006, 11007, 11008, 11009, 11010, 11011, 11012, 11013, 11014,
        18001, 18002], device='cuda:0')
[32m[06/28 18:10:55 d2.evaluation.evaluator]: [0mInference done 144/500. Dataloading: 0.0058 s/iter. Inference: 4.5639 s/iter. Eval: 0.3640 s/iter. Total: 4.9339 s/iter. ETA=0:29:16
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  58,  60,  62,  64,  66, 149, 159, 162, 163, 164, 165, 166, 194],
       device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  4,  5,  6,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 11001, 11002, 11003, 11004,
        11005, 11006, 11007, 11008, 11009, 11010, 11011, 11012, 11013],
       device='cuda:0')
[32m[06/28 18:11:00 d2.evaluation.evaluator]: [0mInference done 145/500. Dataloading: 0.0058 s/iter. Inference: 4.5675 s/iter. Eval: 0.3647 s/iter. Total: 4.9381 s/iter. ETA=0:29:13
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 25, 45, 46], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 11, 12, 17, 18],
       device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 11001, 17001, 18001],
       device='cuda:0')
[32m[06/28 18:11:06 d2.evaluation.evaluator]: [0mInference done 146/500. Dataloading: 0.0057 s/iter. Inference: 4.5709 s/iter. Eval: 0.3647 s/iter. Total: 4.9415 s/iter. ETA=0:29:09
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 42, 43, 45, 46, 47, 48, 49, 50, 51, 69, 98], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  4000,  5000,  8000, 10000, 11001, 11002,
        11003, 11004, 11005, 11006, 11007, 11008, 11009, 11010, 11011],
       device='cuda:0')
[32m[06/28 18:11:11 d2.evaluation.evaluator]: [0mInference done 147/500. Dataloading: 0.0057 s/iter. Inference: 4.5726 s/iter. Eval: 0.3651 s/iter. Total: 4.9435 s/iter. ETA=0:29:05
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0,  4, 11], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 13, 14],
       device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  4000,  5000,  8000,  9000, 10000,
        11001, 11002], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  85, 100, 101, 109, 118, 182, 193], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 10000, 11001, 11002,
        11003, 11004, 11005, 11006, 11007], device='cuda:0')
[32m[06/28 18:11:21 d2.evaluation.evaluator]: [0mInference done 149/500. Dataloading: 0.0056 s/iter. Inference: 4.5714 s/iter. Eval: 0.3644 s/iter. Total: 4.9416 s/iter. ETA=0:28:54
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  74,  77, 163, 164, 166, 171, 172, 173, 177, 187],
       device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 10000, 11001, 11002,
        11003, 11004, 11005, 11006, 11007, 11008, 11009, 11010],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0, 167, 168, 169, 170, 171, 172, 173, 174, 175, 180],
       device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 15], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000,  9000, 10000, 11001,
        11002, 11003, 11004, 11005, 11006, 11007, 11008, 11009, 11010],
       device='cuda:0')
[32m[06/28 18:11:30 d2.evaluation.evaluator]: [0mInference done 151/500. Dataloading: 0.0055 s/iter. Inference: 4.5690 s/iter. Eval: 0.3645 s/iter. Total: 4.9392 s/iter. ETA=0:28:43
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  16,  17,  18,  19,  20,  32,  34,  35,  36,  37,  38,  39,  40,
         41,  60,  61, 180, 181, 182, 183, 184, 185], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 11, 14, 15, 18],
       device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  4000,  5000,  8000, 11001, 11002,
        11003, 11004, 11005, 11006, 11007, 11008, 11009, 11010, 11011, 11012,
        11013, 11014, 11015, 11016, 11017, 11018, 11019, 11020, 14001, 14002],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  26,  40,  41,  42,  57,  58,  59,  60,  69,  70,  71,  72, 185],
       device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 11, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  4000,  5000,  8000, 10000, 11001,
        11002, 11003, 11004, 11005, 11006, 11007, 11008, 11009, 11010, 18001,
        18002, 18003], device='cuda:0')
[32m[06/28 18:11:40 d2.evaluation.evaluator]: [0mInference done 153/500. Dataloading: 0.0057 s/iter. Inference: 4.5661 s/iter. Eval: 0.3663 s/iter. Total: 4.9382 s/iter. ETA=0:28:33
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 27, 29, 31, 33, 35, 37, 46], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  7,  8,  9, 10, 11, 17, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002, 11003,
        11004, 11005, 11006, 11007], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0, 184, 187, 188], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 11, 17], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  4000,  5000,  8000, 10000, 11001, 17001,
        17002], device='cuda:0')
[32m[06/28 18:11:50 d2.evaluation.evaluator]: [0mInference done 155/500. Dataloading: 0.0056 s/iter. Inference: 4.5649 s/iter. Eval: 0.3661 s/iter. Total: 4.9367 s/iter. ETA=0:28:23
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 49, 54, 55, 56, 76], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  5,  6,  7,  8, 10, 11, 17], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002, 11003,
        11004, 11005], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 21, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
        54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 77, 78, 84],
       device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 11, 12, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  4000,  5000,  7000,  8000, 10000,
        11001, 11002, 11003, 11004, 11005, 11006, 11007, 11008, 11009, 11010,
        11011, 11012, 11013, 11014, 11015, 11016, 11017, 11018, 11019, 11020,
        11021, 11022, 11023, 11024, 11025, 11026, 11027, 11028, 11029, 11030,
        11031, 11032, 11033, 11034, 11035], device='cuda:0')
[32m[06/28 18:12:00 d2.evaluation.evaluator]: [0mInference done 157/500. Dataloading: 0.0055 s/iter. Inference: 4.5636 s/iter. Eval: 0.3677 s/iter. Total: 4.9370 s/iter. ETA=0:28:13
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  60,  61, 162], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 11, 17], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002, 17001],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  58, 134, 147, 150], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 11, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  8000, 10000, 11001, 11002, 11003,
        18001], device='cuda:0')
[32m[06/28 18:12:09 d2.evaluation.evaluator]: [0mInference done 159/500. Dataloading: 0.0055 s/iter. Inference: 4.5604 s/iter. Eval: 0.3668 s/iter. Total: 4.9328 s/iter. ETA=0:28:02
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000], device='cuda:0')
[32m[06/28 18:12:14 d2.evaluation.evaluator]: [0mInference done 160/500. Dataloading: 0.0057 s/iter. Inference: 4.5637 s/iter. Eval: 0.3662 s/iter. Total: 4.9357 s/iter. ETA=0:27:58
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  5,  6,  7,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  44,  65,  66,  68,  69,  70,  71,  72, 111, 112, 116, 117, 118],
       device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 11, 12, 17], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 10000, 11001, 11002,
        11003, 11004, 11005, 11006, 11007, 11008, 11009, 11010, 11011, 11012,
        11013], device='cuda:0')
[32m[06/28 18:12:23 d2.evaluation.evaluator]: [0mInference done 162/500. Dataloading: 0.0056 s/iter. Inference: 4.5592 s/iter. Eval: 0.3658 s/iter. Total: 4.9308 s/iter. ETA=0:27:46
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 59, 60], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  21,  31,  32,  33,  82, 115, 117, 130, 136, 139, 140, 167],
       device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000,  9000, 10000, 11001,
        11002, 11003, 11004, 11005, 11006, 11007, 11008, 11009, 11010, 11011,
        11012], device='cuda:0')
[32m[06/28 18:12:32 d2.evaluation.evaluator]: [0mInference done 164/500. Dataloading: 0.0056 s/iter. Inference: 4.5548 s/iter. Eval: 0.3657 s/iter. Total: 4.9262 s/iter. ETA=0:27:35
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  25,  45,  46,  47,  75,  76,  77,  78, 169, 171, 172, 190, 191,
        198], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 13, 17],
       device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  4000,  5000,  8000, 10000, 11001,
        11002, 11003, 11004, 11005, 11006, 11007, 11008, 11009, 11010, 11011,
        11012, 11013, 17001], device='cuda:0')
[32m[06/28 18:12:37 d2.evaluation.evaluator]: [0mInference done 165/500. Dataloading: 0.0055 s/iter. Inference: 4.5551 s/iter. Eval: 0.3663 s/iter. Total: 4.9270 s/iter. ETA=0:27:30
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  40,  41,  46,  52,  53,  54,  55,  56,  57,  58,  59,  60,  61,
         62,  80,  81,  82,  83,  86,  87,  88,  89,  90,  91,  92,  93,  94,
         95,  96, 120, 152], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 11, 17, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 10000, 11001, 11002,
        17001, 17002, 17003, 17004, 17005, 17006, 17007, 17008, 17009, 17010,
        17011, 17012, 17013, 17014, 17015, 17016, 17017, 17018, 17019, 17020,
        17021, 17022, 17023, 17024, 17025, 17026, 18001, 18002, 18003],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  21,  25,  27,  43,  69,  75,  76,  77,  78,  79,  80,  81, 104,
        105], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 17, 18],
       device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 10000, 11001, 11002,
        11003, 11004, 11005, 11006, 11007, 11008, 17001, 17002, 17003, 18001,
        18002, 18003], device='cuda:0')
[32m[06/28 18:12:47 d2.evaluation.evaluator]: [0mInference done 167/500. Dataloading: 0.0055 s/iter. Inference: 4.5518 s/iter. Eval: 0.3681 s/iter. Total: 4.9255 s/iter. ETA=0:27:20
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  5000,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0, 196], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  4,  5,  6,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001],
       device='cuda:0')
[32m[06/28 18:12:56 d2.evaluation.evaluator]: [0mInference done 169/500. Dataloading: 0.0056 s/iter. Inference: 4.5481 s/iter. Eval: 0.3668 s/iter. Total: 4.9207 s/iter. ETA=0:27:08
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 70, 71, 72], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  7,  8, 10, 11, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  7000,  8000, 11001, 11002, 11003],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  89,  90, 168, 169, 170], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002, 11003,
        11004, 11005], device='cuda:0')
[32m[06/28 18:13:05 d2.evaluation.evaluator]: [0mInference done 171/500. Dataloading: 0.0056 s/iter. Inference: 4.5450 s/iter. Eval: 0.3658 s/iter. Total: 4.9165 s/iter. ETA=0:26:57
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 73, 74, 75, 76], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  5,  6,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  8000, 10000, 11001, 11002, 11003, 11004],
       device='cuda:0')
[32m[06/28 18:13:10 d2.evaluation.evaluator]: [0mInference done 172/500. Dataloading: 0.0055 s/iter. Inference: 4.5462 s/iter. Eval: 0.3657 s/iter. Total: 4.9175 s/iter. ETA=0:26:52
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0, 112, 121, 123, 125, 127, 129, 133], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  5,  6,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  8000, 10000, 11001, 11002, 11003, 11004, 11005,
        11006, 11007], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  7,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,  2000,  5000,  8000, 10000], device='cuda:0')
[32m[06/28 18:13:20 d2.evaluation.evaluator]: [0mInference done 174/500. Dataloading: 0.0055 s/iter. Inference: 4.5439 s/iter. Eval: 0.3650 s/iter. Total: 4.9145 s/iter. ETA=0:26:42
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  60,  61,  62,  63,  64,  65, 109, 143, 144, 145, 146, 147, 148,
        149, 150, 151, 152, 153, 154, 155, 156, 157], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  8000, 10000, 11001, 11002, 11003, 11004,
        11005, 11006, 11007, 11008, 11009, 11010, 11011, 11012, 11013, 11014,
        11015, 11016, 11017, 11018, 11019, 11020, 11021, 11022],
       device='cuda:0')
[32m[06/28 18:13:25 d2.evaluation.evaluator]: [0mInference done 175/500. Dataloading: 0.0054 s/iter. Inference: 4.5438 s/iter. Eval: 0.3661 s/iter. Total: 4.9154 s/iter. ETA=0:26:37
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  22,  37,  47,  48,  49,  50,  51, 179], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 14], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 10000, 11001, 11002,
        11003, 11004, 11005, 11006, 11007, 14001], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 63, 64, 65, 66, 77, 78, 81, 84, 95], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 10000, 11001, 11002,
        11003, 11004, 11005, 11006, 11007, 11008, 18001], device='cuda:0')
[32m[06/28 18:13:35 d2.evaluation.evaluator]: [0mInference done 177/500. Dataloading: 0.0057 s/iter. Inference: 4.5446 s/iter. Eval: 0.3658 s/iter. Total: 4.9162 s/iter. ETA=0:26:27
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 45, 47, 49, 54], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8, 10, 11, 13], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  7000,  8000, 10000, 11001,
        11002, 11003, 11004], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  3,  5,  6,  7,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([  -1,    0, 2000, 8000], device='cuda:0')
[32m[06/28 18:13:44 d2.evaluation.evaluator]: [0mInference done 179/500. Dataloading: 0.0056 s/iter. Inference: 4.5411 s/iter. Eval: 0.3646 s/iter. Total: 4.9114 s/iter. ETA=0:26:16
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  5,  6,  7,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 65, 95], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002],
       device='cuda:0')
[32m[06/28 18:13:53 d2.evaluation.evaluator]: [0mInference done 181/500. Dataloading: 0.0055 s/iter. Inference: 4.5397 s/iter. Eval: 0.3636 s/iter. Total: 4.9090 s/iter. ETA=0:26:05
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 94], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  8, 10, 11, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 18001],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 46, 48, 70, 71, 75], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 11, 17, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 10000, 11001, 11002,
        11003, 11004, 11005], device='cuda:0')
[32m[06/28 18:14:02 d2.evaluation.evaluator]: [0mInference done 183/500. Dataloading: 0.0055 s/iter. Inference: 4.5362 s/iter. Eval: 0.3629 s/iter. Total: 4.9047 s/iter. ETA=0:25:54
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 73, 74, 75, 76, 77, 78], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 10000, 11001, 11002,
        11003, 11004, 11005, 11006], device='cuda:0')
[32m[06/28 18:14:07 d2.evaluation.evaluator]: [0mInference done 184/500. Dataloading: 0.0056 s/iter. Inference: 4.5376 s/iter. Eval: 0.3627 s/iter. Total: 4.9060 s/iter. ETA=0:25:50
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([0, 2, 6], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([  -1, 2000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  66, 150, 183], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  7000,  8000, 11001, 11002,
        11003], device='cuda:0')
[32m[06/28 18:14:17 d2.evaluation.evaluator]: [0mInference done 186/500. Dataloading: 0.0057 s/iter. Inference: 4.5372 s/iter. Eval: 0.3616 s/iter. Total: 4.9047 s/iter. ETA=0:25:40
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  41,  43,  46,  47,  49,  50,  51,  52,  53,  54,  55,  63, 188],
       device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8,  9, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  7000,  8000, 11001, 11002,
        11003, 11004, 11005, 11006, 11007, 11008, 11009, 11010, 11011, 11012,
        11013], device='cuda:0')
[32m[06/28 18:14:22 d2.evaluation.evaluator]: [0mInference done 187/500. Dataloading: 0.0057 s/iter. Inference: 4.5385 s/iter. Eval: 0.3619 s/iter. Total: 4.9063 s/iter. ETA=0:25:35
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 55, 57, 68, 69, 70, 71, 81, 83, 84], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  7000,  8000, 11001, 11002, 11003,
        11004, 11005, 11006, 11007, 11008, 11009], device='cuda:0')
[32m[06/28 18:14:27 d2.evaluation.evaluator]: [0mInference done 188/500. Dataloading: 0.0057 s/iter. Inference: 4.5400 s/iter. Eval: 0.3620 s/iter. Total: 4.9078 s/iter. ETA=0:25:31
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  56,  57,  58,  62,  64,  83,  89,  95, 101, 107, 111, 115, 121,
        127], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002, 11003,
        11004, 11005, 11006, 11007, 11008, 11009, 11010, 11011, 11012, 11013,
        11014], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  60,  61,  62,  63,  64,  65,  66,  71,  74,  77,  88,  90,  92,
         94,  96,  98, 100, 102, 108, 110, 112, 114, 116, 118, 120, 130, 185],
       device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 11, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  4000,  5000,  8000, 10000, 11001,
        11002, 11003, 11004, 11005, 11006, 11007, 11008, 11009, 11010, 11011,
        11012, 11013, 11014, 11015, 11016, 11017, 11018, 11019, 11020, 18001,
        18002, 18003, 18004, 18005, 18006, 18007], device='cuda:0')
[32m[06/28 18:14:37 d2.evaluation.evaluator]: [0mInference done 190/500. Dataloading: 0.0056 s/iter. Inference: 4.5377 s/iter. Eval: 0.3636 s/iter. Total: 4.9070 s/iter. ETA=0:25:21
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  37,  52,  53,  59,  72,  74,  77,  80,  82,  83,  84,  85,  86,
         87,  88,  89, 102, 107, 154, 173, 176, 177, 178, 183, 184],
       device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  5,  7, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000, 11001, 11002, 11003, 11004, 11005,
        11006, 11007, 11008, 11009, 11010, 11011, 11012, 11013, 11014, 11015,
        11016, 11017, 11018, 11019, 11020, 11021, 11022, 11023, 11024, 11025],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0,  1,  2, 42, 43, 44, 48, 49, 59, 60], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  5,  6,  8, 10, 11, 17, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002, 11003,
        11004, 11005, 11006, 11007, 11008, 18001], device='cuda:0')
[32m[06/28 18:14:47 d2.evaluation.evaluator]: [0mInference done 192/500. Dataloading: 0.0058 s/iter. Inference: 4.5394 s/iter. Eval: 0.3645 s/iter. Total: 4.9098 s/iter. ETA=0:25:12
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0, 120, 184], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  5,  7,  8, 10, 11, 17], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  5000,  8000, 10000, 11001, 17001],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0, 102, 125, 146, 147], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 11001, 11002, 11003, 11004],
       device='cuda:0')
[32m[06/28 18:14:58 d2.evaluation.evaluator]: [0mInference done 194/500. Dataloading: 0.0059 s/iter. Inference: 4.5423 s/iter. Eval: 0.3642 s/iter. Total: 4.9125 s/iter. ETA=0:25:03
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  79,  80, 101, 112], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  8000, 10000, 11001, 11002, 11003, 11004],
       device='cuda:0')
[32m[06/28 18:15:03 d2.evaluation.evaluator]: [0mInference done 195/500. Dataloading: 0.0059 s/iter. Inference: 4.5458 s/iter. Eval: 0.3640 s/iter. Total: 4.9159 s/iter. ETA=0:24:59
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 69, 70, 71, 73], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  5,  6,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  8000, 10000, 11001, 11002, 11003, 11004],
       device='cuda:0')
[32m[06/28 18:15:08 d2.evaluation.evaluator]: [0mInference done 196/500. Dataloading: 0.0060 s/iter. Inference: 4.5483 s/iter. Eval: 0.3638 s/iter. Total: 4.9182 s/iter. ETA=0:24:55
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 77, 79], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  5,  6,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  8000, 10000, 11001, 11002], device='cuda:0')
[32m[06/28 18:15:18 d2.evaluation.evaluator]: [0mInference done 198/500. Dataloading: 0.0059 s/iter. Inference: 4.5475 s/iter. Eval: 0.3628 s/iter. Total: 4.9164 s/iter. ETA=0:24:44
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 27, 74], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  5,  6,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  8000, 10000, 11001, 11002],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  58, 104], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  5,  6,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  8000, 10000, 11001, 11002],
       device='cuda:0')
[32m[06/28 18:15:27 d2.evaluation.evaluator]: [0mInference done 200/500. Dataloading: 0.0058 s/iter. Inference: 4.5449 s/iter. Eval: 0.3620 s/iter. Total: 4.9128 s/iter. ETA=0:24:33
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  30,  32,  35,  49,  50, 113, 114, 115, 119, 120],
       device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 11, 17], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 10000, 11001, 11002,
        11003, 11004, 11005, 11006, 11007, 11008, 11009, 17001],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000], device='cuda:0')
[32m[06/28 18:15:37 d2.evaluation.evaluator]: [0mInference done 202/500. Dataloading: 0.0058 s/iter. Inference: 4.5444 s/iter. Eval: 0.3616 s/iter. Total: 4.9119 s/iter. ETA=0:24:23
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0, 102, 108], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 11, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 18001],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  94, 175], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  8, 10, 11, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 18001],
       device='cuda:0')
[32m[06/28 18:15:47 d2.evaluation.evaluator]: [0mInference done 204/500. Dataloading: 0.0059 s/iter. Inference: 4.5478 s/iter. Eval: 0.3610 s/iter. Total: 4.9148 s/iter. ETA=0:24:14
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  92, 155, 156, 173, 174, 177], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  5,  7,  8,  9, 10, 11, 12], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000,  9000, 10000, 11001, 11002,
        11003, 11004, 11005, 11006], device='cuda:0')
[32m[06/28 18:15:53 d2.evaluation.evaluator]: [0mInference done 205/500. Dataloading: 0.0059 s/iter. Inference: 4.5505 s/iter. Eval: 0.3607 s/iter. Total: 4.9173 s/iter. ETA=0:24:10
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  95,  96, 123, 135], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  4,  5,  7,  8, 10, 11, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  8000, 10000, 11001, 11002, 11003, 18001],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  46,  47,  51,  66,  67,  69, 133, 136, 137, 139, 146, 147, 148],
       device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  7000,  8000, 10000, 11001, 11002,
        11003, 11004, 11005, 11006, 11007, 11008, 11009, 11010, 11011, 11012,
        11013], device='cuda:0')
[32m[06/28 18:16:02 d2.evaluation.evaluator]: [0mInference done 207/500. Dataloading: 0.0058 s/iter. Inference: 4.5483 s/iter. Eval: 0.3611 s/iter. Total: 4.9154 s/iter. ETA=0:24:00
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  5,  6,  7,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  5000,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  8000, 10000], device='cuda:0')
[32m[06/28 18:16:12 d2.evaluation.evaluator]: [0mInference done 209/500. Dataloading: 0.0058 s/iter. Inference: 4.5494 s/iter. Eval: 0.3597 s/iter. Total: 4.9150 s/iter. ETA=0:23:50
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0, 166, 168, 170, 172, 174, 176, 178, 180, 182], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8, 10, 14], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  5000,  8000, 10000, 14001, 14002, 14003, 14004,
        14005, 14006, 14007, 14008, 14009], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 17, 27, 30], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8, 10, 11, 14], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 10000, 11001, 11002,
        14001], device='cuda:0')
[32m[06/28 18:16:21 d2.evaluation.evaluator]: [0mInference done 211/500. Dataloading: 0.0057 s/iter. Inference: 4.5474 s/iter. Eval: 0.3593 s/iter. Total: 4.9125 s/iter. ETA=0:23:39
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  7,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 10000],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  3,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,  2000,  5000,  8000, 10000], device='cuda:0')
[32m[06/28 18:16:31 d2.evaluation.evaluator]: [0mInference done 213/500. Dataloading: 0.0058 s/iter. Inference: 4.5481 s/iter. Eval: 0.3585 s/iter. Total: 4.9126 s/iter. ETA=0:23:29
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  7,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,  2000,  5000,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 91, 92, 94, 95], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8, 10, 11, 17, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  7000, 10000, 11001, 11002, 11003,
        18001], device='cuda:0')
[32m[06/28 18:16:40 d2.evaluation.evaluator]: [0mInference done 215/500. Dataloading: 0.0058 s/iter. Inference: 4.5476 s/iter. Eval: 0.3579 s/iter. Total: 4.9114 s/iter. ETA=0:23:19
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 61], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  5,  6,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 73], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  5,  6,  7, 10, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000, 10000, 18001], device='cuda:0')
[32m[06/28 18:16:50 d2.evaluation.evaluator]: [0mInference done 217/500. Dataloading: 0.0057 s/iter. Inference: 4.5484 s/iter. Eval: 0.3571 s/iter. Total: 4.9114 s/iter. ETA=0:23:09
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  63, 100, 101, 104, 106, 107, 108, 109, 115], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  5,  8, 10, 11, 17, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000, 11001, 18001, 18002, 18003, 18004,
        18005, 18006, 18007, 18008], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 99], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  5,  6,  8, 10, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  5000,  8000, 10000, 18001], device='cuda:0')
[32m[06/28 18:17:00 d2.evaluation.evaluator]: [0mInference done 219/500. Dataloading: 0.0057 s/iter. Inference: 4.5466 s/iter. Eval: 0.3563 s/iter. Total: 4.9087 s/iter. ETA=0:22:59
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0, 101], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  7,  8,  9, 10, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 18001],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  73,  77,  78,  79,  85,  87, 135, 136, 141, 144, 145, 151, 158,
        164], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 13, 17, 18],
       device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002, 11003,
        11004, 11005, 11006, 11007, 11008, 11009, 11010, 11011, 11012, 11013,
        11014], device='cuda:0')
[32m[06/28 18:17:09 d2.evaluation.evaluator]: [0mInference done 221/500. Dataloading: 0.0059 s/iter. Inference: 4.5455 s/iter. Eval: 0.3563 s/iter. Total: 4.9077 s/iter. ETA=0:22:49
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  33,  34,  35,  36,  37,  38,  39,  40,  41,  42,  43,  44, 157,
        196], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002, 11003,
        11004, 11005, 11006, 11007, 11008, 11009, 11010, 11011, 11012, 11013,
        11014], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  60,  65,  69,  80,  92,  93,  94, 183], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 11, 12, 17, 18],
       device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  8000, 10000, 11001, 11002, 11003,
        12001, 18001, 18002, 18003, 18004], device='cuda:0')
[32m[06/28 18:17:19 d2.evaluation.evaluator]: [0mInference done 223/500. Dataloading: 0.0058 s/iter. Inference: 4.5436 s/iter. Eval: 0.3564 s/iter. Total: 4.9060 s/iter. ETA=0:22:38
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  89,  95,  97, 101, 103, 105, 131, 133, 163, 176, 177, 180],
       device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  5,  7,  8, 10, 11, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002, 11003,
        11004, 11005, 11006, 11007, 11008, 18001, 18002, 18003, 18004],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 25, 26, 27, 43, 44, 45, 46, 47, 48, 49, 51, 81], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002, 11003,
        11004, 11005, 11006, 11007, 11008, 11009, 11010, 11011, 11012],
       device='cuda:0')
[32m[06/28 18:17:28 d2.evaluation.evaluator]: [0mInference done 225/500. Dataloading: 0.0058 s/iter. Inference: 4.5422 s/iter. Eval: 0.3568 s/iter. Total: 4.9049 s/iter. ETA=0:22:28
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0, 124, 125, 126, 127, 128, 169, 177], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 11, 17, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002, 11003,
        11004, 11005, 11006, 17001], device='cuda:0')
[32m[06/28 18:17:33 d2.evaluation.evaluator]: [0mInference done 226/500. Dataloading: 0.0057 s/iter. Inference: 4.5436 s/iter. Eval: 0.3567 s/iter. Total: 4.9062 s/iter. ETA=0:22:24
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  30,  31,  32,  33,  34,  35,  36,  37,  48,  50,  51, 171, 182,
        183], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 11, 17, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002, 11003,
        11004, 11005, 11006, 11007, 11008, 11009, 11010, 11011, 11012, 11013,
        11014], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  63,  64,  65,  66, 170, 171, 181, 182, 183, 184, 185, 186, 187],
       device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  7,  8,  9, 10, 11, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  4000,  5000,  8000,  9000, 10000,
        11001, 11002, 11003, 11004, 11005, 11006, 11007, 11008, 11009, 11010,
        11011, 11012, 18001], device='cuda:0')
[32m[06/28 18:17:43 d2.evaluation.evaluator]: [0mInference done 228/500. Dataloading: 0.0059 s/iter. Inference: 4.5419 s/iter. Eval: 0.3573 s/iter. Total: 4.9052 s/iter. ETA=0:22:14
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,   1,  79,  82, 179, 185, 186, 187, 194, 195, 196],
       device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  7000,  8000, 10000, 11001,
        11002, 11003, 11004, 11005, 11006, 11007, 11008, 11009, 11010],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0,  1,  3,  4,  7, 73, 74], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 11001, 11002, 11003, 11004,
        11005, 11006], device='cuda:0')
[32m[06/28 18:17:52 d2.evaluation.evaluator]: [0mInference done 230/500. Dataloading: 0.0058 s/iter. Inference: 4.5395 s/iter. Eval: 0.3576 s/iter. Total: 4.9030 s/iter. ETA=0:22:03
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 76, 84, 97], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  5,  6,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  8000, 10000, 11001, 11002, 11003],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,   8,  10,  22,  23,  24,  25,  44,  89, 107, 108, 159],
       device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  4000,  5000,  7000,  8000,  9000,
        10000, 11001, 11002, 11003, 11004, 11005, 11006, 11007, 11008, 11009,
        11010, 11011], device='cuda:0')
[32m[06/28 18:18:02 d2.evaluation.evaluator]: [0mInference done 232/500. Dataloading: 0.0058 s/iter. Inference: 4.5369 s/iter. Eval: 0.3576 s/iter. Total: 4.9005 s/iter. ETA=0:21:53
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  69,  71,  75,  78,  79,  83,  87,  91,  92,  94, 133, 134, 135,
        136, 137, 150, 163, 168, 181], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 11, 17, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 10000, 11001, 11002,
        11003, 11004, 11005, 11006, 11007, 11008, 11009, 11010, 11011, 11012,
        11013, 11014, 11015, 11016, 11017, 17001, 17002], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  64,  65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,
         77,  78,  79,  80,  81,  82,  83,  84, 105, 106, 107, 108, 109, 110,
        111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
        126, 127, 141, 142, 159, 165], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 11, 14, 17], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 10000, 11001, 11002,
        11003, 11004, 11005, 11006, 11007, 11008, 11009, 11010, 11011, 11012,
        11013, 11014, 11015, 11016, 11017, 11018, 11019, 11020, 11021, 11022,
        11023, 11024, 11025, 11026, 11027, 11028, 11029, 11030, 11031, 11032,
        11033, 11034, 11035, 11036, 11037, 11038, 11039, 11040, 11041, 11042,
        11043, 11044, 11045, 11046, 11047], device='cuda:0')
[32m[06/28 18:18:11 d2.evaluation.evaluator]: [0mInference done 234/500. Dataloading: 0.0057 s/iter. Inference: 4.5350 s/iter. Eval: 0.3605 s/iter. Total: 4.9013 s/iter. ETA=0:21:43
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  72,  73,  74,  75,  76,  77,  78,  79,  80,  81,  82,  83,  84,
         87, 141, 142, 143, 144, 160, 161, 162, 163, 164, 165, 166, 167, 168,
        169, 170], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 11, 12, 13, 14, 15, 18],
       device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  7000,  8000, 10000, 11001, 11002,
        11003, 11004, 11005, 11006, 11007, 11008, 11009, 11010, 11011, 11012,
        11013, 11014, 11015, 11016, 11017, 11018, 11019, 11020, 11021, 11022,
        11023, 11024, 11025, 11026, 11027, 11028, 14001], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  51,  65,  66,  70,  71,  73,  74,  75,  76,  77,  80,  84,  87,
         88,  89,  90,  92, 101, 174], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  7,  8,  9, 10, 11, 13, 17], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  7000,  8000, 11001, 11002, 11003,
        11004, 11005, 11006, 11007, 11008, 11009, 11010, 11011, 11012, 11013,
        11014, 11015, 11016, 11017, 11018, 11019], device='cuda:0')
[32m[06/28 18:18:22 d2.evaluation.evaluator]: [0mInference done 236/500. Dataloading: 0.0059 s/iter. Inference: 4.5348 s/iter. Eval: 0.3626 s/iter. Total: 4.9035 s/iter. ETA=0:21:34
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 56, 59, 60], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  4,  5,  6,  7,  8, 10, 11, 17, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002, 18001],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 41], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001],
       device='cuda:0')
[32m[06/28 18:18:31 d2.evaluation.evaluator]: [0mInference done 238/500. Dataloading: 0.0059 s/iter. Inference: 4.5347 s/iter. Eval: 0.3621 s/iter. Total: 4.9027 s/iter. ETA=0:21:24
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  34,  39, 125, 149, 169], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  7000,  8000, 10000, 11001,
        11002, 11003, 11004, 11005], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  23,  24, 195], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  4,  5,  6,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002, 11003],
       device='cuda:0')
[32m[06/28 18:18:41 d2.evaluation.evaluator]: [0mInference done 240/500. Dataloading: 0.0058 s/iter. Inference: 4.5356 s/iter. Eval: 0.3622 s/iter. Total: 4.9037 s/iter. ETA=0:21:14
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 15, 25, 26], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002, 11003],
       device='cuda:0')
[32m[06/28 18:18:47 d2.evaluation.evaluator]: [0mInference done 241/500. Dataloading: 0.0058 s/iter. Inference: 4.5372 s/iter. Eval: 0.3620 s/iter. Total: 4.9052 s/iter. ETA=0:21:10
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0, 110], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  5,  6,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  5000,  8000, 10000, 11001], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  23,  24,  25,  26,  60,  79,  80,  81,  82,  83,  84,  85,  86,
         87, 122, 167, 180], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 11, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 10000, 11001, 11002,
        11003, 11004, 11005, 11006, 11007, 11008, 11009, 11010, 11011, 11012,
        11013, 11014, 11015, 11016, 18001], device='cuda:0')
[32m[06/28 18:18:56 d2.evaluation.evaluator]: [0mInference done 243/500. Dataloading: 0.0058 s/iter. Inference: 4.5363 s/iter. Eval: 0.3619 s/iter. Total: 4.9041 s/iter. ETA=0:21:00
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  48,  55, 174], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 17], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000,  9000, 10000, 11001,
        11002, 17001], device='cuda:0')
[32m[06/28 18:19:01 d2.evaluation.evaluator]: [0mInference done 244/500. Dataloading: 0.0059 s/iter. Inference: 4.5373 s/iter. Eval: 0.3618 s/iter. Total: 4.9051 s/iter. ETA=0:20:55
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  3,  5,  7,  8,  9, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  5000,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  5000,  8000, 10000], device='cuda:0')
[32m[06/28 18:19:10 d2.evaluation.evaluator]: [0mInference done 246/500. Dataloading: 0.0058 s/iter. Inference: 4.5350 s/iter. Eval: 0.3608 s/iter. Total: 4.9018 s/iter. ETA=0:20:45
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  7,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  5000,  8000, 10000], device='cuda:0')
[32m[06/28 18:19:16 d2.evaluation.evaluator]: [0mInference done 247/500. Dataloading: 0.0058 s/iter. Inference: 4.5369 s/iter. Eval: 0.3603 s/iter. Total: 4.9031 s/iter. ETA=0:20:40
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0,  4,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
        24, 45, 49, 50, 51, 52, 53, 54, 55], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  7000,  8000, 10000, 11001,
        11002, 11003, 11004, 11005, 11006, 11007, 11008, 11009, 11010, 11011,
        11012, 11013, 11014, 11015, 11016, 11017, 11018, 11019, 11020, 11021,
        11022, 11023, 11024, 11025, 11026], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0, 127, 128, 129, 167, 172, 189, 191], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 11, 13, 17, 18],
       device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 10000, 11001, 11002,
        11003, 17001, 18001, 18002, 18003], device='cuda:0')
[32m[06/28 18:19:25 d2.evaluation.evaluator]: [0mInference done 249/500. Dataloading: 0.0058 s/iter. Inference: 4.5348 s/iter. Eval: 0.3612 s/iter. Total: 4.9019 s/iter. ETA=0:20:30
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  80,  81,  82,  83, 149, 151, 152, 161, 188, 189],
       device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 17, 18],
       device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  7000,  8000, 10000, 11001,
        11002, 11003, 11004, 17001, 17002, 17003, 17004, 18001, 18002],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  15,  93, 186], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 11, 17, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  4000,  5000,  8000, 10000, 11001, 11002,
        11003], device='cuda:0')
[32m[06/28 18:19:35 d2.evaluation.evaluator]: [0mInference done 251/500. Dataloading: 0.0058 s/iter. Inference: 4.5334 s/iter. Eval: 0.3613 s/iter. Total: 4.9006 s/iter. ETA=0:20:20
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0, 108], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  5,  6,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  5000,  7000,  8000, 10000, 11001],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0, 137, 138, 139, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
        152, 153, 154], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8,  9, 10, 11, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002, 11003,
        11004, 11005, 11006, 11007, 11008, 11009, 11010, 11011, 11012, 11013,
        11014, 11015, 11016], device='cuda:0')
[32m[06/28 18:19:44 d2.evaluation.evaluator]: [0mInference done 253/500. Dataloading: 0.0059 s/iter. Inference: 4.5312 s/iter. Eval: 0.3610 s/iter. Total: 4.8983 s/iter. ETA=0:20:09
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  17,  56,  57,  58,  59,  60,  61,  62,  63,  64,  65,  66,  67,
         68,  69,  86,  88,  90,  92,  94,  96,  98, 100, 102, 104, 106, 108,
        110, 114, 116, 139, 140], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  4000,  5000,  8000, 10000, 11001, 11002,
        11003, 11004, 11005, 11006, 11007, 11008, 11009, 11010, 11011, 11012,
        11013, 11014, 11015, 11016, 11017, 11018, 11019, 11020, 11021, 11022,
        11023, 11024, 11025, 11026, 11027, 11028, 11029, 11030, 11031, 11032],
       device='cuda:0')
[32m[06/28 18:19:49 d2.evaluation.evaluator]: [0mInference done 254/500. Dataloading: 0.0058 s/iter. Inference: 4.5306 s/iter. Eval: 0.3624 s/iter. Total: 4.8990 s/iter. ETA=0:20:05
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  76,  81,  82,  84,  85,  89, 102, 103, 104, 105],
       device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 11, 17, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  7000,  8000, 11001, 11002, 11003,
        11004, 18001, 18002, 18003, 18004, 18005, 18006], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  60,  65,  66, 176], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8, 10, 11, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  7000,  8000, 11001, 11002, 11003,
        18001], device='cuda:0')
[32m[06/28 18:19:59 d2.evaluation.evaluator]: [0mInference done 256/500. Dataloading: 0.0058 s/iter. Inference: 4.5314 s/iter. Eval: 0.3623 s/iter. Total: 4.8997 s/iter. ETA=0:19:55
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58,
        59, 60, 61, 62], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8, 10, 11, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002, 11003,
        11004, 11005, 11006, 11007, 11008, 11009, 11010, 11011, 11012, 11013,
        11014, 11015, 11016, 11017, 11018, 11019, 11020, 11021],
       device='cuda:0')
[32m[06/28 18:20:04 d2.evaluation.evaluator]: [0mInference done 257/500. Dataloading: 0.0058 s/iter. Inference: 4.5315 s/iter. Eval: 0.3630 s/iter. Total: 4.9005 s/iter. ETA=0:19:50
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 10000],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  28,  43,  57,  96, 113, 119, 128, 130, 132, 133],
       device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  7000,  8000, 10000, 11001, 11002,
        11003, 11004, 11005, 11006, 11007, 11008, 11009, 11010],
       device='cuda:0')
[32m[06/28 18:20:14 d2.evaluation.evaluator]: [0mInference done 259/500. Dataloading: 0.0057 s/iter. Inference: 4.5306 s/iter. Eval: 0.3629 s/iter. Total: 4.8994 s/iter. ETA=0:19:40
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  79,  80,  81,  82,  83,  89,  91,  92,  93,  94,  95, 142],
       device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  5,  6,  7,  8,  9, 10, 11, 17, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 11001, 11002, 11003, 11004,
        11005, 11006, 11007, 11008, 11009, 11010, 17001, 17002],
       device='cuda:0')
[32m[06/28 18:20:19 d2.evaluation.evaluator]: [0mInference done 260/500. Dataloading: 0.0058 s/iter. Inference: 4.5317 s/iter. Eval: 0.3629 s/iter. Total: 4.9005 s/iter. ETA=0:19:36
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  10,  15, 175, 179, 180, 186], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  4000,  5000,  8000, 10000, 11001, 11002,
        11003, 11004, 11005, 11006], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  46,  48,  50,  52,  54,  56,  59,  63,  64,  66,  69,  72,  73,
         74,  75,  76,  77,  78,  79,  80,  81,  82,  83,  84,  85,  86,  87,
         88, 147], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 11, 17, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 10000, 11001, 11002,
        11003, 11004, 11005, 11006, 11007, 11008, 11009, 11010, 11011, 11012,
        11013, 11014, 11015, 11016, 11017, 11018, 11019, 11020, 11021, 11022,
        11023, 11024, 11025, 11026, 11027, 11028, 18001], device='cuda:0')
[32m[06/28 18:20:28 d2.evaluation.evaluator]: [0mInference done 262/500. Dataloading: 0.0058 s/iter. Inference: 4.5301 s/iter. Eval: 0.3638 s/iter. Total: 4.8998 s/iter. ETA=0:19:26
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0,  5,  6,  7,  8,  9, 10, 11, 12, 21, 22], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  4,  5,  6,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  7000,  8000, 10000, 11001, 11002,
        11003, 11004, 11005, 11006, 11007, 11008, 11009, 11010],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  53,  56,  72,  73,  74,  75,  76,  77,  78,  79,  80,  82,  85,
         86,  87,  95,  96, 184], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 11, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  7000,  8000, 10000, 11001, 11002,
        11003, 11004, 11005, 11006, 11007, 11008, 11009, 11010, 11011, 11012,
        11013, 11014, 11015, 11016, 11017, 18001], device='cuda:0')
[32m[06/28 18:20:38 d2.evaluation.evaluator]: [0mInference done 264/500. Dataloading: 0.0057 s/iter. Inference: 4.5279 s/iter. Eval: 0.3646 s/iter. Total: 4.8983 s/iter. ETA=0:19:16
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  5,  7,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  5000,  7000,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0, 120], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  5,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  8000, 10000, 11001], device='cuda:0')
[32m[06/28 18:20:47 d2.evaluation.evaluator]: [0mInference done 266/500. Dataloading: 0.0057 s/iter. Inference: 4.5258 s/iter. Eval: 0.3636 s/iter. Total: 4.8952 s/iter. ETA=0:19:05
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0, 104, 105], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 10000, 11001, 11002],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0, 189], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  7000,  8000,  9000, 10000,
        18001], device='cuda:0')
[32m[06/28 18:20:56 d2.evaluation.evaluator]: [0mInference done 268/500. Dataloading: 0.0057 s/iter. Inference: 4.5256 s/iter. Eval: 0.3632 s/iter. Total: 4.8946 s/iter. ETA=0:18:55
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  18,  44,  54,  67,  69,  79, 140, 148, 149], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  7,  8,  9, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000,  9000, 10000, 11001,
        11002, 11003, 11004, 11005, 11006, 11007, 11008, 11009],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0, 157], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  8,  9, 10, 17], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000,  9000, 17001],
       device='cuda:0')
[32m[06/28 18:21:06 d2.evaluation.evaluator]: [0mInference done 270/500. Dataloading: 0.0056 s/iter. Inference: 4.5241 s/iter. Eval: 0.3631 s/iter. Total: 4.8930 s/iter. ETA=0:18:45
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0, 178], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8,  9, 10, 11, 17], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000,  9000, 10000, 11001],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000], device='cuda:0')
[32m[06/28 18:21:15 d2.evaluation.evaluator]: [0mInference done 272/500. Dataloading: 0.0056 s/iter. Inference: 4.5217 s/iter. Eval: 0.3626 s/iter. Total: 4.8900 s/iter. ETA=0:18:34
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 58], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8,  9, 10, 11, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 18001],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  13,  14,  15,  16,  17, 189], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8,  9, 10, 11, 14, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000,  9000, 10000, 11001,
        11002, 11003, 11004, 11005, 11006], device='cuda:0')
[32m[06/28 18:21:24 d2.evaluation.evaluator]: [0mInference done 274/500. Dataloading: 0.0056 s/iter. Inference: 4.5209 s/iter. Eval: 0.3623 s/iter. Total: 4.8889 s/iter. ETA=0:18:24
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 47, 55, 56, 62, 63, 64, 65, 66, 78, 84, 85, 86, 87, 89, 91, 93, 95,
        99], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8,  9, 10, 11, 14, 17, 18],
       device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  7000,  8000,  9000, 10000,
        11001, 11002, 11003, 11004, 11005, 11006, 11007, 11008, 11009, 11010,
        11011, 11012, 11013, 14001, 18001, 18002, 18003, 18004],
       device='cuda:0')
[32m[06/28 18:21:30 d2.evaluation.evaluator]: [0mInference done 275/500. Dataloading: 0.0056 s/iter. Inference: 4.5231 s/iter. Eval: 0.3629 s/iter. Total: 4.8918 s/iter. ETA=0:18:20
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  7,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000], device='cuda:0')
[32m[06/28 18:21:35 d2.evaluation.evaluator]: [0mInference done 276/500. Dataloading: 0.0056 s/iter. Inference: 4.5252 s/iter. Eval: 0.3626 s/iter. Total: 4.8935 s/iter. ETA=0:18:16
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 65], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  7,  8,  9, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000,  9000, 10000, 11001],
       device='cuda:0')
[32m[06/28 18:21:41 d2.evaluation.evaluator]: [0mInference done 277/500. Dataloading: 0.0056 s/iter. Inference: 4.5273 s/iter. Eval: 0.3622 s/iter. Total: 4.8952 s/iter. ETA=0:18:11
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  8,  9, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([    0,  1000,  2000,  3000,  5000,  8000,  9000, 10000],
       device='cuda:0')
[32m[06/28 18:21:46 d2.evaluation.evaluator]: [0mInference done 278/500. Dataloading: 0.0056 s/iter. Inference: 4.5292 s/iter. Eval: 0.3618 s/iter. Total: 4.8967 s/iter. ETA=0:18:07
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0, 157], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  7,  8,  9, 10, 17], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000,  9000, 10000, 17001],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([    0,  1000,  2000,  3000,  5000,  8000, 10000], device='cuda:0')
[32m[06/28 18:21:55 d2.evaluation.evaluator]: [0mInference done 280/500. Dataloading: 0.0055 s/iter. Inference: 4.5272 s/iter. Eval: 0.3611 s/iter. Total: 4.8940 s/iter. ETA=0:17:56
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  59,  65, 194], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 10000, 11001, 11002,
        11003], device='cuda:0')
[32m[06/28 18:22:00 d2.evaluation.evaluator]: [0mInference done 281/500. Dataloading: 0.0055 s/iter. Inference: 4.5286 s/iter. Eval: 0.3611 s/iter. Total: 4.8953 s/iter. ETA=0:17:52
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  71,  73, 163, 167], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  7,  8,  9, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000,  9000, 10000, 11001,
        11002, 11003, 11004], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  76,  93, 191], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  7,  8,  9, 10, 11, 17], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000,  9000, 11001, 17001,
        17002], device='cuda:0')
[32m[06/28 18:22:10 d2.evaluation.evaluator]: [0mInference done 283/500. Dataloading: 0.0055 s/iter. Inference: 4.5283 s/iter. Eval: 0.3610 s/iter. Total: 4.8950 s/iter. ETA=0:17:42
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0, 107, 108, 109, 110, 111, 112, 114, 115, 117, 118, 119, 120, 121,
        122, 123, 126, 128, 150], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  7,  8,  9, 10, 11, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000,  9000, 10000, 18001,
        18002, 18003, 18004, 18005, 18006, 18007, 18008, 18009, 18010, 18011,
        18012, 18013, 18014, 18015, 18016, 18017, 18018], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0, 161, 162, 166], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  7,  8,  9, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000,  9000, 11001, 11002,
        11003], device='cuda:0')
[32m[06/28 18:22:19 d2.evaluation.evaluator]: [0mInference done 285/500. Dataloading: 0.0055 s/iter. Inference: 4.5266 s/iter. Eval: 0.3611 s/iter. Total: 4.8933 s/iter. ETA=0:17:32
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([0, 1, 2, 3, 5, 7, 8, 9], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([  -1,    0, 1000, 2000, 3000, 5000, 8000, 9000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0, 134, 166], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  4,  5,  7,  8,  9, 11, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000, 11001, 18001], device='cuda:0')
[32m[06/28 18:22:28 d2.evaluation.evaluator]: [0mInference done 287/500. Dataloading: 0.0055 s/iter. Inference: 4.5243 s/iter. Eval: 0.3604 s/iter. Total: 4.8903 s/iter. ETA=0:17:21
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  15, 151, 152, 153, 154, 169, 170], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  7,  8,  9, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000,  9000, 11001, 11002,
        11003, 11004, 11005, 11006, 11007], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  98,  99, 100, 102, 104, 106, 133], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  3000,  5000,  8000, 11001, 11002, 11003, 11004,
        11005, 11006, 11007], device='cuda:0')
[32m[06/28 18:22:38 d2.evaluation.evaluator]: [0mInference done 289/500. Dataloading: 0.0055 s/iter. Inference: 4.5245 s/iter. Eval: 0.3605 s/iter. Total: 4.8906 s/iter. ETA=0:17:11
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  56,  58,  59,  60,  63,  65,  98,  99, 100, 101, 102, 103, 104,
        105, 106, 107, 108, 109, 110, 111, 112, 113, 123], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  8,  9, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 10000, 11001, 11002,
        11003, 11004, 11005, 11006, 11007, 11008, 11009, 11010, 11011, 11012,
        11013, 11014, 11015, 11016, 11017, 11018, 11019, 11020, 11021, 11022,
        11023], device='cuda:0')
[32m[06/28 18:22:43 d2.evaluation.evaluator]: [0mInference done 290/500. Dataloading: 0.0055 s/iter. Inference: 4.5245 s/iter. Eval: 0.3611 s/iter. Total: 4.8912 s/iter. ETA=0:17:07
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 46, 49, 50, 51, 52, 53, 54, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94,
        95, 96], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 10000, 11001, 11002,
        11003, 11004, 11005, 11006, 11007, 11008, 11009, 11010, 11011, 11012,
        11013, 11014, 11015, 11016, 11017, 11018, 11019], device='cuda:0')
[32m[06/28 18:22:48 d2.evaluation.evaluator]: [0mInference done 291/500. Dataloading: 0.0054 s/iter. Inference: 4.5247 s/iter. Eval: 0.3615 s/iter. Total: 4.8918 s/iter. ETA=0:17:02
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 85, 86, 88, 90], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  7,  8, 10, 17], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 17001, 17002, 17003,
        17004], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0, 190], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  7,  8,  9, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000,  9000, 10000, 11001],
       device='cuda:0')
[32m[06/28 18:22:57 d2.evaluation.evaluator]: [0mInference done 293/500. Dataloading: 0.0054 s/iter. Inference: 4.5225 s/iter. Eval: 0.3611 s/iter. Total: 4.8892 s/iter. ETA=0:16:52
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0, 178, 182], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  8,  9, 10, 11, 14, 17], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  8000, 11001, 14001], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  25,  26, 173], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  5,  8, 10, 11, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 11001, 11002, 18001],
       device='cuda:0')
[32m[06/28 18:23:07 d2.evaluation.evaluator]: [0mInference done 295/500. Dataloading: 0.0054 s/iter. Inference: 4.5230 s/iter. Eval: 0.3605 s/iter. Total: 4.8890 s/iter. ETA=0:16:42
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0, 113, 133, 154, 155], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  8, 10, 11, 17, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  8000, 10000, 11001, 17001, 17002, 17003],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 31, 32], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  8,  9, 10, 11, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([    0,  1000,  2000,  3000,  5000,  8000,  9000, 10000, 11001, 11002],
       device='cuda:0')
[32m[06/28 18:23:16 d2.evaluation.evaluator]: [0mInference done 297/500. Dataloading: 0.0054 s/iter. Inference: 4.5221 s/iter. Eval: 0.3601 s/iter. Total: 4.8877 s/iter. ETA=0:16:32
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  29,  49, 113], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002, 11003],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  85, 171], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  8, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 11001, 11002],
       device='cuda:0')
[32m[06/28 18:23:25 d2.evaluation.evaluator]: [0mInference done 299/500. Dataloading: 0.0054 s/iter. Inference: 4.5204 s/iter. Eval: 0.3595 s/iter. Total: 4.8854 s/iter. ETA=0:16:21
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  52,  70,  74,  75,  76,  77,  78,  79,  80,  81,  82,  83,  84,
         85,  86,  87,  88,  89,  90,  92,  93,  94,  99, 100, 101, 102, 103,
        104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117,
        118, 119, 120, 121, 122, 125, 126, 183], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 11001, 11002, 11003, 11004,
        11005, 11006, 11007, 11008, 11009, 11010, 11011, 11012, 11013, 11014,
        11015, 11016, 11017, 11018, 11019, 11020, 11021, 11022, 11023, 11024,
        11025, 11026, 11027, 11028, 11029, 11030, 11031, 11032, 11033, 11034,
        11035, 11036, 11037, 11038, 11039, 11040, 11041, 11042, 11043, 11044,
        11045, 11046, 11047, 11048, 11049], device='cuda:0')
[32m[06/28 18:23:31 d2.evaluation.evaluator]: [0mInference done 300/500. Dataloading: 0.0054 s/iter. Inference: 4.5202 s/iter. Eval: 0.3611 s/iter. Total: 4.8868 s/iter. ETA=0:16:17
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0, 175], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  8000, 10000, 11001], device='cuda:0')
[32m[06/28 18:23:36 d2.evaluation.evaluator]: [0mInference done 301/500. Dataloading: 0.0053 s/iter. Inference: 4.5229 s/iter. Eval: 0.3608 s/iter. Total: 4.8892 s/iter. ETA=0:16:12
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  13,  51,  54,  57,  58,  59,  60, 171, 192], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  8, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  8000, 11001, 11002, 11003, 11004,
        11005, 11006, 11007, 11008, 11009], device='cuda:0')
[32m[06/28 18:23:41 d2.evaluation.evaluator]: [0mInference done 302/500. Dataloading: 0.0053 s/iter. Inference: 4.5237 s/iter. Eval: 0.3609 s/iter. Total: 4.8900 s/iter. ETA=0:16:08
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 78], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  8,  9, 10, 17], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 10000, 17001],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  57, 172, 173], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  7,  8, 10, 17, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 17001, 18001, 18002],
       device='cuda:0')
[32m[06/28 18:23:51 d2.evaluation.evaluator]: [0mInference done 304/500. Dataloading: 0.0053 s/iter. Inference: 4.5237 s/iter. Eval: 0.3605 s/iter. Total: 4.8896 s/iter. ETA=0:15:58
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  18,  19,  20,  21,  22,  23,  24,  25, 186], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002, 11003,
        11004, 11005, 11006, 11007, 11008, 11009], device='cuda:0')
[32m[06/28 18:23:56 d2.evaluation.evaluator]: [0mInference done 305/500. Dataloading: 0.0053 s/iter. Inference: 4.5248 s/iter. Eval: 0.3607 s/iter. Total: 4.8909 s/iter. ETA=0:15:53
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 98], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  8000, 10000, 11001], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 27, 61, 62, 72, 73, 76, 77], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 11001, 11002, 11003,
        11004, 11005, 11006, 11007], device='cuda:0')
[32m[06/28 18:24:06 d2.evaluation.evaluator]: [0mInference done 307/500. Dataloading: 0.0053 s/iter. Inference: 4.5243 s/iter. Eval: 0.3607 s/iter. Total: 4.8903 s/iter. ETA=0:15:43
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  78,  81, 130, 184], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  7,  8, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000, 11001, 11002, 11003, 11004],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0, 110, 137, 150, 190], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  5,  8, 10, 11, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  8000, 10000, 11001, 18001, 18002, 18003],
       device='cuda:0')
[32m[06/28 18:24:15 d2.evaluation.evaluator]: [0mInference done 309/500. Dataloading: 0.0052 s/iter. Inference: 4.5227 s/iter. Eval: 0.3604 s/iter. Total: 4.8884 s/iter. ETA=0:15:33
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  61,  62,  94, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126,
        127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 143],
       device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  8,  9, 10, 11, 13], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 10000, 11001, 11002,
        11003, 11004, 11005, 11006, 11007, 11008, 11009, 11010, 11011, 11012,
        11013, 11014, 11015, 11016, 11017, 11018, 11019, 11020, 11021, 11022,
        11023, 11024, 11025], device='cuda:0')
[32m[06/28 18:24:20 d2.evaluation.evaluator]: [0mInference done 310/500. Dataloading: 0.0052 s/iter. Inference: 4.5229 s/iter. Eval: 0.3610 s/iter. Total: 4.8893 s/iter. ETA=0:15:28
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0, 148, 159, 183, 189], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  7,  8,  9, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 11001, 11002, 11003, 11004],
       device='cuda:0')
[32m[06/28 18:24:26 d2.evaluation.evaluator]: [0mInference done 311/500. Dataloading: 0.0052 s/iter. Inference: 4.5241 s/iter. Eval: 0.3610 s/iter. Total: 4.8904 s/iter. ETA=0:15:24
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0, 178], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  8,  9, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([    0,  1000,  2000,  3000,  5000,  8000,  9000, 11001],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 80], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,  2000,  5000,  8000, 11001], device='cuda:0')
[32m[06/28 18:24:35 d2.evaluation.evaluator]: [0mInference done 313/500. Dataloading: 0.0052 s/iter. Inference: 4.5243 s/iter. Eval: 0.3604 s/iter. Total: 4.8900 s/iter. ETA=0:15:14
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([0, 1, 2, 5, 8], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([  -1,    0, 2000, 8000], device='cuda:0')
[32m[06/28 18:24:40 d2.evaluation.evaluator]: [0mInference done 314/500. Dataloading: 0.0052 s/iter. Inference: 4.5257 s/iter. Eval: 0.3602 s/iter. Total: 4.8912 s/iter. ETA=0:15:09
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0, 169, 170, 171, 174], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  8,  9, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000,  9000, 11001, 11002, 11003,
        11004], device='cuda:0')
[32m[06/28 18:24:46 d2.evaluation.evaluator]: [0mInference done 315/500. Dataloading: 0.0052 s/iter. Inference: 4.5271 s/iter. Eval: 0.3600 s/iter. Total: 4.8923 s/iter. ETA=0:15:05
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([0, 1, 2, 3, 5, 8, 9], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   0, 1000, 2000, 3000, 5000, 8000, 9000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0, 100, 101, 186], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  8,  9, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  8000,  9000, 11001, 11002, 11003],
       device='cuda:0')
[32m[06/28 18:24:55 d2.evaluation.evaluator]: [0mInference done 317/500. Dataloading: 0.0051 s/iter. Inference: 4.5262 s/iter. Eval: 0.3599 s/iter. Total: 4.8914 s/iter. ETA=0:14:55
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  70,  71, 169, 170, 171, 172, 173, 174, 175, 176, 177],
       device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  8,  9, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 11001, 11002, 11003, 11004,
        11005, 11006, 11007, 11008, 11009, 11010, 11011], device='cuda:0')
[32m[06/28 18:25:00 d2.evaluation.evaluator]: [0mInference done 318/500. Dataloading: 0.0051 s/iter. Inference: 4.5270 s/iter. Eval: 0.3599 s/iter. Total: 4.8921 s/iter. ETA=0:14:50
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82,
        83, 84], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  5,  7,  8,  9, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000,  9000, 18001, 18002, 18003,
        18004, 18005, 18006, 18007, 18008, 18009, 18010, 18011, 18012, 18013,
        18014, 18015, 18016, 18017, 18018, 18019], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  33, 139], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  7,  8,  9, 11, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 11001, 18001],
       device='cuda:0')
[32m[06/28 18:25:10 d2.evaluation.evaluator]: [0mInference done 320/500. Dataloading: 0.0051 s/iter. Inference: 4.5263 s/iter. Eval: 0.3599 s/iter. Total: 4.8914 s/iter. ETA=0:14:40
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 43, 46, 51, 54, 61, 65, 66], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  7,  8,  9, 11, 17, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 11001, 11002, 17001,
        17002, 17003, 17004, 18001], device='cuda:0')
[32m[06/28 18:25:15 d2.evaluation.evaluator]: [0mInference done 321/500. Dataloading: 0.0051 s/iter. Inference: 4.5273 s/iter. Eval: 0.3598 s/iter. Total: 4.8923 s/iter. ETA=0:14:35
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  97, 100], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  8,  9, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 10000, 11001, 11002],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  90,  91,  93,  95,  97,  98,  99, 100, 101, 107, 109, 111, 113,
        115, 117, 129, 130, 131, 132, 133, 134, 135, 136, 137, 160, 165, 173,
        175, 176, 180, 181, 182, 183, 184, 185], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8,  9, 11, 15], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000,  9000, 11001, 11002,
        11003, 11004, 11005, 11006, 11007, 11008, 11009, 11010, 11011, 11012,
        11013, 11014, 11015, 11016, 11017, 11018, 11019, 11020, 11021, 11022,
        11023, 11024, 11025, 11026, 11027, 11028, 11029, 11030, 11031, 11032,
        11033, 11034, 11035], device='cuda:0')
[32m[06/28 18:25:25 d2.evaluation.evaluator]: [0mInference done 323/500. Dataloading: 0.0051 s/iter. Inference: 4.5256 s/iter. Eval: 0.3605 s/iter. Total: 4.8913 s/iter. ETA=0:14:25
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  12,  13,  40,  41,  42, 114, 135], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8,  9, 11, 14], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  7000,  8000,  9000, 11001,
        11002, 11003, 11004, 11005, 11006, 14001], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8,  9, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000], device='cuda:0')
[32m[06/28 18:25:34 d2.evaluation.evaluator]: [0mInference done 325/500. Dataloading: 0.0051 s/iter. Inference: 4.5246 s/iter. Eval: 0.3604 s/iter. Total: 4.8902 s/iter. ETA=0:14:15
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([0, 1, 2, 8], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([  -1,    0, 2000, 8000], device='cuda:0')
[32m[06/28 18:25:39 d2.evaluation.evaluator]: [0mInference done 326/500. Dataloading: 0.0050 s/iter. Inference: 4.5256 s/iter. Eval: 0.3600 s/iter. Total: 4.8909 s/iter. ETA=0:14:11
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 41, 53, 55, 57], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  7,  8, 10, 17], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 10000, 17001, 17002,
        17003, 17004], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  5,  8,  9, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,  2000,  5000,  8000,  9000, 10000], device='cuda:0')
[32m[06/28 18:25:48 d2.evaluation.evaluator]: [0mInference done 328/500. Dataloading: 0.0050 s/iter. Inference: 4.5239 s/iter. Eval: 0.3594 s/iter. Total: 4.8884 s/iter. ETA=0:14:00
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  8,  9, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000,  9000, 10000],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 57], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  5,  6,  7,  8, 10, 17], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 17001],
       device='cuda:0')
[32m[06/28 18:25:57 d2.evaluation.evaluator]: [0mInference done 330/500. Dataloading: 0.0050 s/iter. Inference: 4.5226 s/iter. Eval: 0.3587 s/iter. Total: 4.8864 s/iter. ETA=0:13:50
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0,  1, 38], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  7,  8,  9, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000,  9000, 10000, 11001,
        11002], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0, 120, 138], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  7,  8,  9, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([    0,  1000,  2000,  3000,  5000,  7000,  8000,  9000, 10000, 11001,
        11002], device='cuda:0')
[32m[06/28 18:26:06 d2.evaluation.evaluator]: [0mInference done 332/500. Dataloading: 0.0050 s/iter. Inference: 4.5217 s/iter. Eval: 0.3582 s/iter. Total: 4.8850 s/iter. ETA=0:13:40
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 59, 63, 65, 66], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  5,  7,  8,  9, 10, 11, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  5000,  8000, 10000, 11001, 11002, 18001, 18002],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 33], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  5,  6,  7,  8,  9, 10, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  5000,  8000, 10000, 18001], device='cuda:0')
[32m[06/28 18:26:15 d2.evaluation.evaluator]: [0mInference done 334/500. Dataloading: 0.0050 s/iter. Inference: 4.5200 s/iter. Eval: 0.3575 s/iter. Total: 4.8826 s/iter. ETA=0:13:30
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 40, 54], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  5,  8, 10, 11, 17, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  5000,  8000, 10000, 11001, 17001],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  5,  7,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  5000,  8000, 10000], device='cuda:0')
[32m[06/28 18:26:25 d2.evaluation.evaluator]: [0mInference done 336/500. Dataloading: 0.0050 s/iter. Inference: 4.5193 s/iter. Eval: 0.3568 s/iter. Total: 4.8812 s/iter. ETA=0:13:20
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 68], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 46, 51, 55, 63], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  7,  8, 10, 11, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  7000,  8000, 10000, 11001, 11002,
        18001, 18002], device='cuda:0')
[32m[06/28 18:26:34 d2.evaluation.evaluator]: [0mInference done 338/500. Dataloading: 0.0050 s/iter. Inference: 4.5186 s/iter. Eval: 0.3562 s/iter. Total: 4.8799 s/iter. ETA=0:13:10
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 92, 93], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  5,  6,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002],
       device='cuda:0')
[32m[06/28 18:26:43 d2.evaluation.evaluator]: [0mInference done 340/500. Dataloading: 0.0050 s/iter. Inference: 4.5170 s/iter. Eval: 0.3555 s/iter. Total: 4.8776 s/iter. ETA=0:13:00
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 59, 61, 85, 92, 93], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  7,  8, 10, 11, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  5000,  8000, 10000, 11001, 11002, 18001, 18002,
        18003], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 27, 34, 36, 38, 40], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8, 10, 11, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 11001, 11002, 11003, 11004,
        18001], device='cuda:0')
[32m[06/28 18:26:52 d2.evaluation.evaluator]: [0mInference done 342/500. Dataloading: 0.0049 s/iter. Inference: 4.5152 s/iter. Eval: 0.3554 s/iter. Total: 4.8757 s/iter. ETA=0:12:50
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  94,  98, 100, 102, 104, 105], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  8, 10, 11, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002, 11003,
        11004, 11005, 11006], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  96, 101, 102, 103, 104], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  8, 11, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  5000,  8000, 11001, 11002, 11003, 11004, 18001],
       device='cuda:0')
[32m[06/28 18:27:01 d2.evaluation.evaluator]: [0mInference done 344/500. Dataloading: 0.0049 s/iter. Inference: 4.5138 s/iter. Eval: 0.3553 s/iter. Total: 4.8741 s/iter. ETA=0:12:40
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 12, 13, 19, 28, 29], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8,  9, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 11001, 11002, 11003, 11004,
        11005], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 10000],
       device='cuda:0')
[32m[06/28 18:27:11 d2.evaluation.evaluator]: [0mInference done 346/500. Dataloading: 0.0049 s/iter. Inference: 4.5130 s/iter. Eval: 0.3549 s/iter. Total: 4.8729 s/iter. ETA=0:12:30
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  65, 179], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8,  9, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000,  9000, 10000, 11001,
        11002], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 32], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8,  9, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,  2000,  5000,  8000,  9000, 11001], device='cuda:0')
[32m[06/28 18:27:20 d2.evaluation.evaluator]: [0mInference done 348/500. Dataloading: 0.0049 s/iter. Inference: 4.5112 s/iter. Eval: 0.3545 s/iter. Total: 4.8707 s/iter. ETA=0:12:20
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  8,  9, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,  2000,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  5,  6,  7,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  5000,  7000,  8000, 10000], device='cuda:0')
[32m[06/28 18:27:29 d2.evaluation.evaluator]: [0mInference done 350/500. Dataloading: 0.0049 s/iter. Inference: 4.5107 s/iter. Eval: 0.3538 s/iter. Total: 4.8695 s/iter. ETA=0:12:10
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  5,  6,  7,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,  2000,  5000,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 58, 65], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8,  9, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002],
       device='cuda:0')
[32m[06/28 18:27:38 d2.evaluation.evaluator]: [0mInference done 352/500. Dataloading: 0.0049 s/iter. Inference: 4.5095 s/iter. Eval: 0.3534 s/iter. Total: 4.8679 s/iter. ETA=0:12:00
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 75], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8,  9, 10, 11, 17], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  7000,  8000, 10000, 11001],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8,  9, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000], device='cuda:0')
[32m[06/28 18:27:48 d2.evaluation.evaluator]: [0mInference done 354/500. Dataloading: 0.0049 s/iter. Inference: 4.5089 s/iter. Eval: 0.3530 s/iter. Total: 4.8669 s/iter. ETA=0:11:50
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  7000,  8000, 10000],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 14, 16, 17], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  8,  9, 10, 14], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 14001, 14002, 14003],
       device='cuda:0')
[32m[06/28 18:27:57 d2.evaluation.evaluator]: [0mInference done 356/500. Dataloading: 0.0048 s/iter. Inference: 4.5083 s/iter. Eval: 0.3526 s/iter. Total: 4.8660 s/iter. ETA=0:11:40
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 37, 40], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  5,  7,  8,  9, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 21, 22, 23], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002, 11003],
       device='cuda:0')
[32m[06/28 18:28:06 d2.evaluation.evaluator]: [0mInference done 358/500. Dataloading: 0.0048 s/iter. Inference: 4.5067 s/iter. Eval: 0.3522 s/iter. Total: 4.8638 s/iter. ETA=0:11:30
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  17,  23,  24, 173], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002, 11003,
        11004], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  5,  7,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,  2000,  5000,  8000, 10000], device='cuda:0')
[32m[06/28 18:28:15 d2.evaluation.evaluator]: [0mInference done 360/500. Dataloading: 0.0049 s/iter. Inference: 4.5049 s/iter. Eval: 0.3516 s/iter. Total: 4.8616 s/iter. ETA=0:11:20
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0, 117], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0, 171, 172, 177], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002, 11003],
       device='cuda:0')
[32m[06/28 18:28:24 d2.evaluation.evaluator]: [0mInference done 362/500. Dataloading: 0.0048 s/iter. Inference: 4.5033 s/iter. Eval: 0.3514 s/iter. Total: 4.8597 s/iter. ETA=0:11:10
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 75, 76], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  7,  8, 10, 11, 17], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 10000, 11001, 11002],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0, 6, 9], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  6,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  5000,  8000, 10000, 11001, 11002],
       device='cuda:0')
[32m[06/28 18:28:33 d2.evaluation.evaluator]: [0mInference done 364/500. Dataloading: 0.0048 s/iter. Inference: 4.5025 s/iter. Eval: 0.3512 s/iter. Total: 4.8587 s/iter. ETA=0:11:00
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 27, 28, 41, 44, 48, 52, 53], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 10000, 11001, 11002,
        11003, 11004, 11005, 11006, 11007], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,   3,   4,   5,   6,   8,   9,  11,  12,  13,  22,  30, 161, 166,
        188], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  8,  9, 10, 11, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000,  9000, 10000, 11001,
        11002, 11003, 11004, 11005, 11006, 11007, 11008, 11009, 11010, 11011,
        11012, 11013, 18001], device='cuda:0')
[32m[06/28 18:28:43 d2.evaluation.evaluator]: [0mInference done 366/500. Dataloading: 0.0048 s/iter. Inference: 4.5011 s/iter. Eval: 0.3514 s/iter. Total: 4.8574 s/iter. ETA=0:10:50
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  34, 191, 192], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  5,  6,  7,  8, 10, 11, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002, 18001],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,   1,   2,   3,   4,  87,  92,  93,  96, 100, 103, 112, 124, 188,
        189, 190], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  7000,  8000, 10000, 11001, 11002,
        11003, 11004, 11005, 11006, 11007, 11008, 11009, 11010, 11011, 11012,
        11013, 11014, 11015], device='cuda:0')
[32m[06/28 18:28:52 d2.evaluation.evaluator]: [0mInference done 368/500. Dataloading: 0.0048 s/iter. Inference: 4.4994 s/iter. Eval: 0.3515 s/iter. Total: 4.8558 s/iter. ETA=0:10:40
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  77,  78, 174, 178, 179], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8, 10, 11, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002, 11003,
        11004, 18001], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  88,  89,  90,  93,  94,  95,  96,  97,  98,  99, 116, 118, 120],
       device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  5,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000, 10000, 11001, 11002, 11003, 11004,
        11005, 11006, 11007, 11008, 11009, 11010, 11011, 11012, 11013],
       device='cuda:0')
[32m[06/28 18:29:01 d2.evaluation.evaluator]: [0mInference done 370/500. Dataloading: 0.0048 s/iter. Inference: 4.4981 s/iter. Eval: 0.3516 s/iter. Total: 4.8546 s/iter. ETA=0:10:31
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 58, 74, 79], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  7,  8, 10, 11, 17], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002, 17001],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 91, 93], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002],
       device='cuda:0')
[32m[06/28 18:29:10 d2.evaluation.evaluator]: [0mInference done 372/500. Dataloading: 0.0048 s/iter. Inference: 4.4975 s/iter. Eval: 0.3515 s/iter. Total: 4.8539 s/iter. ETA=0:10:21
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  35,  36,  51,  52,  53,  54,  55,  57,  60, 144],
       device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  7,  8,  9, 10, 11, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 10000, 11001, 11002,
        11003, 11004, 11005, 11006, 11007, 11008, 11009, 18001],
       device='cuda:0')
[32m[06/28 18:29:16 d2.evaluation.evaluator]: [0mInference done 373/500. Dataloading: 0.0047 s/iter. Inference: 4.4993 s/iter. Eval: 0.3516 s/iter. Total: 4.8558 s/iter. ETA=0:10:16
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0, 112, 116, 119], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  7,  8, 10, 11, 17, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  3000,  5000,  8000, 10000, 11001, 11002, 18001],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 42], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 10000, 11001],
       device='cuda:0')
[32m[06/28 18:29:26 d2.evaluation.evaluator]: [0mInference done 375/500. Dataloading: 0.0048 s/iter. Inference: 4.5001 s/iter. Eval: 0.3514 s/iter. Total: 4.8565 s/iter. ETA=0:10:07
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,   9,  16, 199], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002, 11003],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8,  9, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000,  9000, 10000],
       device='cuda:0')
[32m[06/28 18:29:36 d2.evaluation.evaluator]: [0mInference done 377/500. Dataloading: 0.0048 s/iter. Inference: 4.5003 s/iter. Eval: 0.3510 s/iter. Total: 4.8563 s/iter. ETA=0:09:57
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122,
        123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 191],
       device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 17, 18],
       device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000,  9000, 10000, 11001,
        11002, 11003, 11004, 11005, 11006, 11007, 11008, 11009, 11010, 11011,
        11012, 11013, 11014, 11015, 11016, 11017, 11018, 11019, 11020, 11021,
        11022, 11023, 18001], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 11, 42, 43, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
        65, 66, 67, 68, 69, 70, 71, 72, 73, 74], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  7,  8,  9, 10, 11, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 10000, 11001, 11002,
        11003, 11004, 11005, 11006, 11007, 11008, 11009, 11010, 11011, 11012,
        11013, 11014, 11015, 11016, 11017, 11018, 11019, 11020, 11021, 11022,
        11023, 11024, 11025, 11026, 11027], device='cuda:0')
[32m[06/28 18:29:45 d2.evaluation.evaluator]: [0mInference done 379/500. Dataloading: 0.0048 s/iter. Inference: 4.4993 s/iter. Eval: 0.3520 s/iter. Total: 4.8562 s/iter. ETA=0:09:47
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  84, 195], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002],
       device='cuda:0')
[32m[06/28 18:29:51 d2.evaluation.evaluator]: [0mInference done 380/500. Dataloading: 0.0047 s/iter. Inference: 4.5004 s/iter. Eval: 0.3519 s/iter. Total: 4.8572 s/iter. ETA=0:09:42
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 59, 60, 61], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  8,  9, 10, 11, 17], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002, 11003],
       device='cuda:0')
[32m[06/28 18:29:56 d2.evaluation.evaluator]: [0mInference done 381/500. Dataloading: 0.0047 s/iter. Inference: 4.5014 s/iter. Eval: 0.3517 s/iter. Total: 4.8580 s/iter. ETA=0:09:38
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 12, 18, 21, 23, 24, 25], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8, 10, 11, 17, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 10000, 11001, 11002,
        11003, 11004, 11005, 17001], device='cuda:0')
[32m[06/28 18:30:01 d2.evaluation.evaluator]: [0mInference done 382/500. Dataloading: 0.0048 s/iter. Inference: 4.5023 s/iter. Eval: 0.3516 s/iter. Total: 4.8588 s/iter. ETA=0:09:33
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 29, 32, 34, 36], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8,  9, 10, 11, 17, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002, 11003,
        11004], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  48,  49,  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,  60,
         61,  62, 156], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  7,  8, 10, 11, 17, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  8000, 10000, 11001, 11002, 11003, 11004,
        11005, 11006, 18001, 18002, 18003, 18004, 18005, 18006, 18007, 18008,
        18009, 18010], device='cuda:0')
[32m[06/28 18:30:11 d2.evaluation.evaluator]: [0mInference done 384/500. Dataloading: 0.0047 s/iter. Inference: 4.5024 s/iter. Eval: 0.3517 s/iter. Total: 4.8590 s/iter. ETA=0:09:23
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0,  9, 36, 42, 51], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 11001, 11002, 11003,
        11004], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 54], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  5,  6,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  7000,  8000, 10000, 11001],
       device='cuda:0')
[32m[06/28 18:30:21 d2.evaluation.evaluator]: [0mInference done 386/500. Dataloading: 0.0047 s/iter. Inference: 4.5032 s/iter. Eval: 0.3514 s/iter. Total: 4.8594 s/iter. ETA=0:09:13
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0, 192, 193], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 15, 60, 61, 62, 63, 64, 65], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002, 11003,
        11004, 11005, 11006, 11007], device='cuda:0')
[32m[06/28 18:30:30 d2.evaluation.evaluator]: [0mInference done 388/500. Dataloading: 0.0048 s/iter. Inference: 4.5034 s/iter. Eval: 0.3513 s/iter. Total: 4.8596 s/iter. ETA=0:09:04
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 44, 45, 46, 47, 48, 49, 50, 51, 63, 64, 65, 68, 69, 70],
       device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  7,  8, 10, 11, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  7000,  8000, 10000, 11001, 11002,
        11003, 11004, 11005, 11006, 11007, 11008, 11009, 11010, 11011, 11012,
        11013, 11014], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 88, 99], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 10000, 11001, 11002],
       device='cuda:0')
[32m[06/28 18:30:40 d2.evaluation.evaluator]: [0mInference done 390/500. Dataloading: 0.0047 s/iter. Inference: 4.5021 s/iter. Eval: 0.3513 s/iter. Total: 4.8582 s/iter. ETA=0:08:54
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  76, 157], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8,  9, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000,  9000, 10000, 11001,
        11002], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 60], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8,  9, 10, 17], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000,  9000, 10000, 17001],
       device='cuda:0')
[32m[06/28 18:30:49 d2.evaluation.evaluator]: [0mInference done 392/500. Dataloading: 0.0047 s/iter. Inference: 4.5013 s/iter. Eval: 0.3511 s/iter. Total: 4.8573 s/iter. ETA=0:08:44
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 54, 55, 56], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8,  9, 10, 11, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002, 11003],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,   1,   3,   5,   7,  35,  45, 103, 104, 175], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  7,  8,  9, 10, 11, 17, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002, 11003,
        11004, 11005, 11006, 11007, 17001, 17002], device='cuda:0')
[32m[06/28 18:30:58 d2.evaluation.evaluator]: [0mInference done 394/500. Dataloading: 0.0047 s/iter. Inference: 4.5001 s/iter. Eval: 0.3509 s/iter. Total: 4.8558 s/iter. ETA=0:08:34
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 28, 29, 30, 31, 32], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  5,  6,  7,  8, 10, 11, 17], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002, 11003,
        11004, 17001], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 82, 84, 85, 86, 87, 88, 89, 90, 91], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8, 10, 11, 17, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002, 11003,
        11004, 11005, 18001, 18002, 18003, 18004], device='cuda:0')
[32m[06/28 18:31:08 d2.evaluation.evaluator]: [0mInference done 396/500. Dataloading: 0.0047 s/iter. Inference: 4.5006 s/iter. Eval: 0.3507 s/iter. Total: 4.8562 s/iter. ETA=0:08:25
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 31, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 81],
       device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8, 10, 11, 17, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002, 11003,
        11004, 11005, 11006, 11007, 11008, 11009, 11010, 11011, 11012, 17001,
        17002], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  7,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000], device='cuda:0')
[32m[06/28 18:31:17 d2.evaluation.evaluator]: [0mInference done 398/500. Dataloading: 0.0047 s/iter. Inference: 4.5006 s/iter. Eval: 0.3505 s/iter. Total: 4.8559 s/iter. ETA=0:08:15
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  63,  72,  73,  74,  79,  82,  85,  87,  89,  91,  92,  93,  96,
         99, 102, 105, 108, 139, 142, 193], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8,  9, 10, 11, 17], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000,  9000, 11001, 11002,
        11003, 11004, 11005, 11006, 11007, 11008, 11009, 11010, 11011, 11012,
        11013, 11014, 11015, 11016, 11017, 11018, 11019, 11020],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  7,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([  -1,    0, 1000, 2000, 5000, 8000], device='cuda:0')
[32m[06/28 18:31:27 d2.evaluation.evaluator]: [0mInference done 400/500. Dataloading: 0.0047 s/iter. Inference: 4.5006 s/iter. Eval: 0.3508 s/iter. Total: 4.8562 s/iter. ETA=0:08:05
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 57], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  8,  9, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  8000, 10000, 11001], device='cuda:0')
[32m[06/28 18:31:32 d2.evaluation.evaluator]: [0mInference done 401/500. Dataloading: 0.0047 s/iter. Inference: 4.5014 s/iter. Eval: 0.3506 s/iter. Total: 4.8568 s/iter. ETA=0:08:00
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  36,  37,  38,  39,  45,  46,  47, 147], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6, 10, 11, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000, 10000, 11001, 11002, 11003, 11004,
        18001, 18002, 18003, 18004], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  16,  17, 123, 125], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002, 11003,
        11004], device='cuda:0')
[32m[06/28 18:31:43 d2.evaluation.evaluator]: [0mInference done 403/500. Dataloading: 0.0047 s/iter. Inference: 4.5029 s/iter. Eval: 0.3504 s/iter. Total: 4.8581 s/iter. ETA=0:07:51
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([0, 1, 2, 3, 5, 7, 8, 9], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([  -1,    0, 1000, 2000, 5000, 8000, 9000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  53,  54,  55,  56,  64,  65,  66,  67,  68,  69,  78,  91,  92,
         93, 196], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8,  9, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002, 11003,
        11004, 11005, 11006, 11007, 11008, 11009, 11010, 11011, 11012, 11013,
        11014, 11015], device='cuda:0')
[32m[06/28 18:31:53 d2.evaluation.evaluator]: [0mInference done 405/500. Dataloading: 0.0047 s/iter. Inference: 4.5037 s/iter. Eval: 0.3506 s/iter. Total: 4.8591 s/iter. ETA=0:07:41
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  7,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8,  9, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 10000],
       device='cuda:0')
[32m[06/28 18:32:02 d2.evaluation.evaluator]: [0mInference done 407/500. Dataloading: 0.0046 s/iter. Inference: 4.5030 s/iter. Eval: 0.3500 s/iter. Total: 4.8578 s/iter. ETA=0:07:31
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 34, 35, 36, 37, 42], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  7,  8, 10, 11, 17, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002, 11003,
        11004, 18001], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  87, 114, 191], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8,  9, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 11001, 11002, 11003],
       device='cuda:0')
[32m[06/28 18:32:11 d2.evaluation.evaluator]: [0mInference done 409/500. Dataloading: 0.0046 s/iter. Inference: 4.5022 s/iter. Eval: 0.3499 s/iter. Total: 4.8569 s/iter. ETA=0:07:21
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 54], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 10000, 11001],
       device='cuda:0')
[32m[06/28 18:32:17 d2.evaluation.evaluator]: [0mInference done 410/500. Dataloading: 0.0046 s/iter. Inference: 4.5038 s/iter. Eval: 0.3497 s/iter. Total: 4.8583 s/iter. ETA=0:07:17
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 14, 15, 42, 45, 46, 47, 48, 58, 61, 96, 97, 98], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8, 10, 11, 17, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 10000, 11001, 11002,
        11003, 11004, 11005, 11006, 11007, 11008, 11009, 11010, 11011, 11012],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0,  3,  4,  5,  6,  7,  8,  9, 10, 11, 87], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  7,  8,  9, 11, 17], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 11001, 11002, 11003, 11004,
        11005, 11006, 11007, 11008, 11009, 11010], device='cuda:0')
[32m[06/28 18:32:26 d2.evaluation.evaluator]: [0mInference done 412/500. Dataloading: 0.0047 s/iter. Inference: 4.5032 s/iter. Eval: 0.3500 s/iter. Total: 4.8579 s/iter. ETA=0:07:07
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  94,  95,  96,  97,  98, 100], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  5,  7,  8,  9, 10, 11, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002, 11003,
        11004, 11005, 11006], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 30, 31], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  5,  7,  8, 10, 11, 17], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002],
       device='cuda:0')
[32m[06/28 18:32:36 d2.evaluation.evaluator]: [0mInference done 414/500. Dataloading: 0.0046 s/iter. Inference: 4.5023 s/iter. Eval: 0.3498 s/iter. Total: 4.8568 s/iter. ETA=0:06:57
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  7,  8,  9, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0, 184], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8,  9, 10, 11, 17], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 17001],
       device='cuda:0')
[32m[06/28 18:32:45 d2.evaluation.evaluator]: [0mInference done 416/500. Dataloading: 0.0046 s/iter. Inference: 4.5011 s/iter. Eval: 0.3493 s/iter. Total: 4.8552 s/iter. ETA=0:06:47
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0, 149, 150], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000,  9000, 11001, 11002],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 44, 45, 46], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002, 11003],
       device='cuda:0')
[32m[06/28 18:32:54 d2.evaluation.evaluator]: [0mInference done 418/500. Dataloading: 0.0046 s/iter. Inference: 4.5002 s/iter. Eval: 0.3489 s/iter. Total: 4.8538 s/iter. ETA=0:06:38
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  66,  67,  70, 138, 188], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8,  9, 10, 11, 17], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 11001, 11002, 11003,
        11004, 17001], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  52,  73, 189, 192], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  8,  9, 10, 11, 17, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000,  9000, 10000, 11001,
        11002, 11003, 18001], device='cuda:0')
[32m[06/28 18:33:03 d2.evaluation.evaluator]: [0mInference done 420/500. Dataloading: 0.0047 s/iter. Inference: 4.4990 s/iter. Eval: 0.3488 s/iter. Total: 4.8526 s/iter. ETA=0:06:28
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0,  8,  9, 10, 11, 25, 26], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 17, 18],
       device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000,  9000, 10000, 11001,
        11002, 11003, 11004, 18001, 18002], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  46, 180], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  5,  7,  8, 10, 11, 17], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  5000,  8000, 10000, 11001, 17001],
       device='cuda:0')
[32m[06/28 18:33:12 d2.evaluation.evaluator]: [0mInference done 422/500. Dataloading: 0.0046 s/iter. Inference: 4.4982 s/iter. Eval: 0.3486 s/iter. Total: 4.8515 s/iter. ETA=0:06:18
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 50, 52, 70], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  5,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002, 11003],
       device='cuda:0')
[32m[06/28 18:33:17 d2.evaluation.evaluator]: [0mInference done 423/500. Dataloading: 0.0046 s/iter. Inference: 4.4988 s/iter. Eval: 0.3486 s/iter. Total: 4.8522 s/iter. ETA=0:06:13
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  7,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 42, 45, 48, 51, 54], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  5,  7,  8, 10, 11, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([    0,  1000,  2000,  5000,  7000,  8000, 10000, 11001, 18001, 18002,
        18003, 18004], device='cuda:0')
[32m[06/28 18:33:27 d2.evaluation.evaluator]: [0mInference done 425/500. Dataloading: 0.0046 s/iter. Inference: 4.4983 s/iter. Eval: 0.3483 s/iter. Total: 4.8513 s/iter. ETA=0:06:03
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([  -1,    0, 1000, 2000, 5000, 8000], device='cuda:0')
[32m[06/28 18:33:32 d2.evaluation.evaluator]: [0mInference done 426/500. Dataloading: 0.0046 s/iter. Inference: 4.5002 s/iter. Eval: 0.3481 s/iter. Total: 4.8531 s/iter. ETA=0:05:59
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([0, 1, 2, 3, 8], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   0, 1000, 2000, 3000, 8000], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0, 183, 185], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  7,  8,  9, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 11001, 11002],
       device='cuda:0')
[32m[06/28 18:33:42 d2.evaluation.evaluator]: [0mInference done 428/500. Dataloading: 0.0046 s/iter. Inference: 4.5010 s/iter. Eval: 0.3476 s/iter. Total: 4.8534 s/iter. ETA=0:05:49
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0, 170], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  7,  8,  9, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000,  9000, 10000, 11001],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 11, 64, 65, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82],
       device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8, 10, 11, 17], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 10000, 11001, 11002,
        11003, 11004, 11005, 11006, 11007, 11008, 11009, 11010, 11011, 11012,
        11013, 11014, 11015, 17001], device='cuda:0')
[32m[06/28 18:33:52 d2.evaluation.evaluator]: [0mInference done 430/500. Dataloading: 0.0046 s/iter. Inference: 4.5012 s/iter. Eval: 0.3478 s/iter. Total: 4.8538 s/iter. ETA=0:05:39
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,   3,   5,  11,  30,  31,  32,  33,  34,  35,  39,  40,  41,  42,
         43,  58, 107, 108, 109], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8, 10, 11, 17], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002, 11003,
        11004, 11005, 11006, 11007, 11008, 11009, 11010, 11011, 11012, 11013,
        11014, 11015, 11016, 11017, 11018], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  60,  61,  62, 183], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8,  9, 10, 11, 17], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 10000, 11001, 11002,
        11003, 17001], device='cuda:0')
[32m[06/28 18:34:01 d2.evaluation.evaluator]: [0mInference done 432/500. Dataloading: 0.0046 s/iter. Inference: 4.5002 s/iter. Eval: 0.3480 s/iter. Total: 4.8529 s/iter. ETA=0:05:29
RESIZING OUTPUTS
INSTANCE LABELS tensor([0, 1], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  8000, 10000, 11001], device='cuda:0')
[32m[06/28 18:34:06 d2.evaluation.evaluator]: [0mInference done 433/500. Dataloading: 0.0046 s/iter. Inference: 4.5009 s/iter. Eval: 0.3478 s/iter. Total: 4.8534 s/iter. ETA=0:05:25
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 12, 19, 46, 48], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 10000, 11001, 11002,
        11003, 11004], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 57], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8,  9, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001],
       device='cuda:0')
[32m[06/28 18:34:16 d2.evaluation.evaluator]: [0mInference done 435/500. Dataloading: 0.0045 s/iter. Inference: 4.5014 s/iter. Eval: 0.3476 s/iter. Total: 4.8536 s/iter. ETA=0:05:15
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0,  4, 24], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000,  9000, 10000, 11001,
        11002], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 14, 15], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  7,  8,  9, 10, 11, 17, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 18001],
       device='cuda:0')
[32m[06/28 18:34:25 d2.evaluation.evaluator]: [0mInference done 437/500. Dataloading: 0.0045 s/iter. Inference: 4.5003 s/iter. Eval: 0.3474 s/iter. Total: 4.8523 s/iter. ETA=0:05:05
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 35], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  7,  8,  9, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 21, 22, 30, 31, 98], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  7,  8,  9, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000,  9000, 10000, 11001,
        11002, 11003, 11004, 11005], device='cuda:0')
[32m[06/28 18:34:35 d2.evaluation.evaluator]: [0mInference done 439/500. Dataloading: 0.0045 s/iter. Inference: 4.5001 s/iter. Eval: 0.3472 s/iter. Total: 4.8519 s/iter. ETA=0:04:55
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 47, 51, 52], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8,  9, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  7000,  8000,  9000, 10000,
        11001, 11002, 11003], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 19, 20, 21], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8,  9, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  3000,  5000,  8000,  9000, 10000, 11001, 11002,
        11003], device='cuda:0')
[32m[06/28 18:34:44 d2.evaluation.evaluator]: [0mInference done 441/500. Dataloading: 0.0045 s/iter. Inference: 4.4992 s/iter. Eval: 0.3470 s/iter. Total: 4.8509 s/iter. ETA=0:04:46
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0, 163, 164], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  8,  9, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  10,  16,  17, 174], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  8000, 10000, 11001, 11002, 11003,
        11004], device='cuda:0')
[32m[06/28 18:34:53 d2.evaluation.evaluator]: [0mInference done 443/500. Dataloading: 0.0045 s/iter. Inference: 4.4985 s/iter. Eval: 0.3468 s/iter. Total: 4.8499 s/iter. ETA=0:04:36
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 14, 21, 22, 23, 24, 26, 28, 29, 30, 31, 33], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  7,  8,  9, 10, 11, 17, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000,  9000, 10000, 11001,
        11002, 17001, 17002, 17003, 17004, 17005, 18001, 18002, 18003, 18004],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0, 171], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  7,  8,  9, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  7000,  8000,  9000, 10000, 11001],
       device='cuda:0')
[32m[06/28 18:35:03 d2.evaluation.evaluator]: [0mInference done 445/500. Dataloading: 0.0045 s/iter. Inference: 4.4976 s/iter. Eval: 0.3466 s/iter. Total: 4.8488 s/iter. ETA=0:04:26
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,   1,  56,  57,  58,  59,  60,  61,  62,  63,  69, 187],
       device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8,  9, 10, 11, 14, 17], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000,  9000, 10000, 11001,
        11002, 11003, 11004, 11005, 11006, 11007, 11008, 11009, 11010, 17001],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49],
       device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8,  9, 10, 11, 17], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 10000, 11001, 11002,
        11003, 11004, 11005, 11006, 11007, 11008, 11009, 11010, 11011, 11012,
        11013, 11014, 11015, 11016, 11017], device='cuda:0')
[32m[06/28 18:35:12 d2.evaluation.evaluator]: [0mInference done 447/500. Dataloading: 0.0045 s/iter. Inference: 4.4972 s/iter. Eval: 0.3471 s/iter. Total: 4.8489 s/iter. ETA=0:04:16
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 32], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 11001],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0, 177, 183, 188], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  7,  8,  9, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000,  9000, 10000, 11001,
        11002, 11003], device='cuda:0')
[32m[06/28 18:35:22 d2.evaluation.evaluator]: [0mInference done 449/500. Dataloading: 0.0045 s/iter. Inference: 4.4964 s/iter. Eval: 0.3470 s/iter. Total: 4.8480 s/iter. ETA=0:04:07
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 89, 90, 91, 92], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  8,  9, 10, 11, 17], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 10000, 11001, 11002,
        17001, 17002], device='cuda:0')
[32m[06/28 18:35:27 d2.evaluation.evaluator]: [0mInference done 450/500. Dataloading: 0.0045 s/iter. Inference: 4.4985 s/iter. Eval: 0.3470 s/iter. Total: 4.8501 s/iter. ETA=0:04:02
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 56, 67, 69, 70, 71, 73, 74], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  7,  8,  9, 10, 11, 17, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 10000, 11001, 17001,
        18001, 18002, 18003, 18004, 18005], device='cuda:0')
[32m[06/28 18:35:32 d2.evaluation.evaluator]: [0mInference done 451/500. Dataloading: 0.0045 s/iter. Inference: 4.4991 s/iter. Eval: 0.3469 s/iter. Total: 4.8506 s/iter. ETA=0:03:57
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0, 151, 173], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  7,  8,  9, 10, 17], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 10000, 17001, 17002],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  14,  40,  71, 182], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8,  9, 10, 11, 13, 14, 15],
       device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  7000,  8000, 10000, 11001,
        11002, 14001, 14002], device='cuda:0')
[32m[06/28 18:35:42 d2.evaluation.evaluator]: [0mInference done 453/500. Dataloading: 0.0045 s/iter. Inference: 4.4981 s/iter. Eval: 0.3467 s/iter. Total: 4.8494 s/iter. ETA=0:03:47
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0, 152, 174], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8,  9, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000,  9000, 10000, 11001,
        11002], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,   4,  33,  35,  36,  37,  41, 163], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8,  9, 10, 11, 17], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 10000, 11001, 11002,
        11003, 17001, 17002, 17003, 17004], device='cuda:0')
[32m[06/28 18:35:51 d2.evaluation.evaluator]: [0mInference done 455/500. Dataloading: 0.0044 s/iter. Inference: 4.4969 s/iter. Eval: 0.3465 s/iter. Total: 4.8479 s/iter. ETA=0:03:38
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,   9, 195], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8,  9, 10, 11, 17], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 10000, 11001, 17001],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 37, 38], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8,  9, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  8000,  9000, 10000, 11001, 11002],
       device='cuda:0')
[32m[06/28 18:36:00 d2.evaluation.evaluator]: [0mInference done 457/500. Dataloading: 0.0044 s/iter. Inference: 4.4957 s/iter. Eval: 0.3462 s/iter. Total: 4.8465 s/iter. ETA=0:03:28
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  13,  14,  15,  16,  17,  18,  19,  20,  24, 156],
       device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8,  9, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 10000, 11001, 11002,
        11003, 11004, 11005, 11006, 11007, 11008, 11009, 11010],
       device='cuda:0')
[32m[06/28 18:36:05 d2.evaluation.evaluator]: [0mInference done 458/500. Dataloading: 0.0044 s/iter. Inference: 4.4970 s/iter. Eval: 0.3464 s/iter. Total: 4.8479 s/iter. ETA=0:03:23
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0,  1,  2,  3,  4,  5, 15, 16, 17], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8,  9, 10, 11, 12, 13, 17],
       device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  7000,  8000, 10000, 11001,
        11002, 11003, 11004, 11005, 11006, 12001, 12002], device='cuda:0')
[32m[06/28 18:36:10 d2.evaluation.evaluator]: [0mInference done 459/500. Dataloading: 0.0044 s/iter. Inference: 4.4978 s/iter. Eval: 0.3465 s/iter. Total: 4.8488 s/iter. ETA=0:03:18
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 69, 70, 71, 72, 73, 74, 75, 76], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  8,  9, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,  1000,  2000,  8000, 10000, 11001, 11002, 11003, 11004, 11005,
        11006, 11007, 11008], device='cuda:0')
[32m[06/28 18:36:16 d2.evaluation.evaluator]: [0mInference done 460/500. Dataloading: 0.0044 s/iter. Inference: 4.4986 s/iter. Eval: 0.3466 s/iter. Total: 4.8497 s/iter. ETA=0:03:13
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0, 121], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  7,  8, 10, 11, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 10000, 11001],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  67, 177], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 10000, 11001, 11002],
       device='cuda:0')
[32m[06/28 18:36:25 d2.evaluation.evaluator]: [0mInference done 462/500. Dataloading: 0.0045 s/iter. Inference: 4.4984 s/iter. Eval: 0.3464 s/iter. Total: 4.8494 s/iter. ETA=0:03:04
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 83, 84, 85, 86, 87, 88, 89, 90], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 11, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 11001, 11002, 11003,
        11004, 11005, 11006, 11007, 18001], device='cuda:0')
[32m[06/28 18:36:30 d2.evaluation.evaluator]: [0mInference done 463/500. Dataloading: 0.0045 s/iter. Inference: 4.4990 s/iter. Eval: 0.3463 s/iter. Total: 4.8499 s/iter. ETA=0:02:59
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,   5,  43,  44,  45,  46,  73,  75,  77,  88,  90,  92,  95, 152,
        161, 162, 194], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 11, 12, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 10000, 11001, 11002,
        11003, 11004, 11005, 11006, 11007, 11008, 11009, 11010, 11011, 11012,
        12001, 12002, 12003, 18001], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 60, 61, 62, 63, 72, 73], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  7,  8, 10, 11, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002, 11003,
        11004, 11005, 18001], device='cuda:0')
[32m[06/28 18:36:40 d2.evaluation.evaluator]: [0mInference done 465/500. Dataloading: 0.0044 s/iter. Inference: 4.4982 s/iter. Eval: 0.3465 s/iter. Total: 4.8492 s/iter. ETA=0:02:49
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0, 109, 110, 115, 194, 196, 197], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  7,  8,  9, 10, 11, 17, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002, 11003,
        17001, 17002, 18001], device='cuda:0')
[32m[06/28 18:36:46 d2.evaluation.evaluator]: [0mInference done 466/500. Dataloading: 0.0044 s/iter. Inference: 4.5004 s/iter. Eval: 0.3464 s/iter. Total: 4.8513 s/iter. ETA=0:02:44
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  66,  78, 188], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  7,  8, 10, 11, 17], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000, 11001, 11002, 17001],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0, 177], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  5,  7, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000, 11001], device='cuda:0')
[32m[06/28 18:36:55 d2.evaluation.evaluator]: [0mInference done 468/500. Dataloading: 0.0044 s/iter. Inference: 4.5006 s/iter. Eval: 0.3462 s/iter. Total: 4.8513 s/iter. ETA=0:02:35
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  46,  47,  48,  49,  50, 134, 143, 145, 157], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  5,  6,  7, 10, 11, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000, 10000, 11001, 11002, 11003, 11004,
        11005, 11006, 11007, 11008, 18001], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  12,  17,  62,  63,  64,  65,  66,  67,  68,  69,  70,  71,  72,
         73,  81,  82,  85,  86, 197], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  5,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  7000,  8000, 11001, 11002, 11003,
        11004, 11005, 11006, 11007, 11008, 11009, 11010, 11011, 11012, 11013,
        11014, 11015, 11016, 11017, 11018, 11019], device='cuda:0')
[32m[06/28 18:37:05 d2.evaluation.evaluator]: [0mInference done 470/500. Dataloading: 0.0045 s/iter. Inference: 4.5003 s/iter. Eval: 0.3465 s/iter. Total: 4.8515 s/iter. ETA=0:02:25
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0,  1,  3,  5,  7,  9, 11, 13, 15, 17, 23, 24, 25, 26, 27, 28, 29, 30,
        31, 32, 55, 56, 57, 63], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  7000, 10000, 11001, 11002, 11003,
        11004, 11005, 11006, 11007, 11008, 11009, 11010, 11011, 11012, 11013,
        11014, 11015, 11016, 11017, 11018, 11019, 11020, 11021, 11022, 11023],
       device='cuda:0')
[32m[06/28 18:37:10 d2.evaluation.evaluator]: [0mInference done 471/500. Dataloading: 0.0045 s/iter. Inference: 4.5004 s/iter. Eval: 0.3470 s/iter. Total: 4.8520 s/iter. ETA=0:02:20
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,   7,   8,   9,  10,  11,  12,  39,  40,  41,  42,  43,  44,  45,
         46,  47,  48,  56,  57, 180, 181, 182, 186, 194], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  7000,  8000, 11001, 11002,
        11003, 11004, 11005, 11006, 11007, 11008, 11009, 11010, 11011, 11012,
        11013, 11014, 11015, 11016, 11017, 11018, 11019, 11020, 11021, 11022,
        11023], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 26, 27, 28, 30, 31, 34], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  7, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000, 10000, 11001, 11002, 11003, 11004,
        11005, 11006], device='cuda:0')
[32m[06/28 18:37:20 d2.evaluation.evaluator]: [0mInference done 473/500. Dataloading: 0.0045 s/iter. Inference: 4.4995 s/iter. Eval: 0.3474 s/iter. Total: 4.8516 s/iter. ETA=0:02:10
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 75, 76, 83, 84], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  5,  7,  8, 10, 11, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([    0,  1000,  2000,  5000,  7000,  8000, 10000, 11001, 11002, 11003,
        11004], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  50, 145], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002],
       device='cuda:0')
[32m[06/28 18:37:29 d2.evaluation.evaluator]: [0mInference done 475/500. Dataloading: 0.0045 s/iter. Inference: 4.4994 s/iter. Eval: 0.3472 s/iter. Total: 4.8511 s/iter. ETA=0:02:01
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0, 103, 104, 105, 106, 118, 119], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  7, 10, 11, 17], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000, 10000, 11001, 11002, 11003, 11004, 11005,
        11006], device='cuda:0')
[32m[06/28 18:37:34 d2.evaluation.evaluator]: [0mInference done 476/500. Dataloading: 0.0045 s/iter. Inference: 4.5001 s/iter. Eval: 0.3471 s/iter. Total: 4.8517 s/iter. ETA=0:01:56
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,   8,  28,  37,  39,  40,  41,  42,  43,  44,  45, 184, 185, 186],
       device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8, 10, 11, 12, 13, 14], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000, 11001, 11002, 11003,
        11004, 11005, 11006, 11007, 11008, 11009, 11010, 11011, 11012, 11013],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([0], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  7,  8, 10], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  8000, 10000], device='cuda:0')
[32m[06/28 18:37:44 d2.evaluation.evaluator]: [0mInference done 478/500. Dataloading: 0.0045 s/iter. Inference: 4.4993 s/iter. Eval: 0.3471 s/iter. Total: 4.8510 s/iter. ETA=0:01:46
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 62, 89], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  5000,  7000,  8000, 10000, 11001, 11002],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 43, 44, 45, 46, 47, 48, 49, 54, 55, 56, 57, 58, 59, 62, 64, 65, 66,
        67, 68, 69, 70, 71, 72, 73, 74, 75], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8,  9, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000,  9000, 11001, 11002,
        11003, 11004, 11005, 11006, 11007, 11008, 11009, 11010, 11011, 11012,
        11013, 11014, 11015, 11016, 11017, 11018, 11019, 11020, 11021, 11022,
        11023, 11024, 11025, 11026], device='cuda:0')
[32m[06/28 18:37:54 d2.evaluation.evaluator]: [0mInference done 480/500. Dataloading: 0.0045 s/iter. Inference: 4.4995 s/iter. Eval: 0.3476 s/iter. Total: 4.8517 s/iter. ETA=0:01:37
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,   1,   2,   3,  34,  36,  39,  40,  41,  42,  43,  44,  45,  46,
         47,  48,  54,  55,  56,  81,  84,  85,  86,  95,  96,  97, 123, 128,
        129], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 11001, 11002, 11003,
        11004, 11005, 11006, 11007, 11008, 11009, 11010, 11011, 11012, 11013,
        11014, 11015, 11016, 11017, 11018, 11019, 11020, 11021, 11022, 11023,
        11024, 11025, 11026, 11027, 11028], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  74,  79,  80,  82,  83,  88,  98,  99, 101, 102, 103, 104, 105,
        106], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  5,  7,  8,  9, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  5000,  8000, 10000, 11001, 11002, 11003, 11004,
        11005, 11006, 11007, 11008, 11009, 11010, 11011, 11012, 11013, 11014],
       device='cuda:0')
[32m[06/28 18:38:03 d2.evaluation.evaluator]: [0mInference done 482/500. Dataloading: 0.0045 s/iter. Inference: 4.4984 s/iter. Eval: 0.3482 s/iter. Total: 4.8512 s/iter. ETA=0:01:27
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 23, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57,
        87], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  7,  8,  9, 10, 11, 12], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  7000,  8000,  9000, 11001,
        11002, 11003, 11004, 11005, 11006, 11007, 11008, 11009, 11010, 11011,
        11012, 11013, 11014, 11015, 11016, 11017, 11018], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 77, 89, 90, 91, 92, 93, 94], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  7,  8,  9, 10, 11, 12, 15, 17, 18],
       device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  5000,  8000,  9000, 10000, 11001, 11002, 11003,
        15001, 17001, 17002, 17003], device='cuda:0')
[32m[06/28 18:38:13 d2.evaluation.evaluator]: [0mInference done 484/500. Dataloading: 0.0045 s/iter. Inference: 4.4987 s/iter. Eval: 0.3484 s/iter. Total: 4.8517 s/iter. ETA=0:01:17
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 59, 60], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  8, 10, 11, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  5000,  8000, 10000, 11001, 11002],
       device='cuda:0')
[32m[06/28 18:38:19 d2.evaluation.evaluator]: [0mInference done 485/500. Dataloading: 0.0045 s/iter. Inference: 4.5001 s/iter. Eval: 0.3483 s/iter. Total: 4.8530 s/iter. ETA=0:01:12
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  58,  59,  60,  61,  62,  63,  64,  65,  66,  67,  68,  69,  70,
         71,  72,  73, 121], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8,  9, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  7000,  8000, 10000, 11001,
        11002, 11003, 11004, 11005, 11006, 11007, 11008, 11009, 11010, 11011,
        11012, 11013, 11014, 11015, 11016, 11017], device='cuda:0')
[32m[06/28 18:38:24 d2.evaluation.evaluator]: [0mInference done 486/500. Dataloading: 0.0045 s/iter. Inference: 4.5014 s/iter. Eval: 0.3486 s/iter. Total: 4.8546 s/iter. ETA=0:01:07
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,   3,   4,   5,   9,  12,  14,  16,  18,  21,  22,  23,  24,  25,
         26,  30,  34,  35,  36,  37,  38,  39,  40,  41,  42,  43,  44,  45,
         46,  47,  48,  49,  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,
         60,  61,  62,  63,  64,  65,  66,  67,  68,  69,  70,  84, 114, 167],
       device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  4000,  5000,  8000,  9000, 10000,
        11001, 11002, 11003, 11004, 11005, 11006, 11007, 11008, 11009, 11010,
        11011, 11012, 11013, 11014, 11015, 11016, 11017, 11018, 11019, 11020,
        11021, 11022, 11023, 11024, 11025, 11026, 11027, 11028, 11029, 11030,
        11031, 11032, 11033, 11034, 11035, 11036, 11037, 11038, 11039, 11040,
        11041, 11042, 11043, 11044, 11045, 11046, 11047, 11048, 11049, 11050,
        11051, 11052, 11053, 11054, 11055], device='cuda:0')
[32m[06/28 18:38:30 d2.evaluation.evaluator]: [0mInference done 487/500. Dataloading: 0.0044 s/iter. Inference: 4.5030 s/iter. Eval: 0.3498 s/iter. Total: 4.8573 s/iter. ETA=0:01:03
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 64, 68, 69, 70, 71], device='cuda:0')
CLASS IDS tensor([ 0,  2,  5,  8, 10, 11, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,  2000,  5000,  8000, 10000, 11001, 11002, 11003, 11004, 18001],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([ 0, 67], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  5,  6,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,  2000,  5000,  8000, 10000, 11001], device='cuda:0')
[32m[06/28 18:38:39 d2.evaluation.evaluator]: [0mInference done 489/500. Dataloading: 0.0045 s/iter. Inference: 4.5019 s/iter. Eval: 0.3494 s/iter. Total: 4.8560 s/iter. ETA=0:00:53
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0, 124, 125, 126, 127, 128, 129], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8,  9, 10, 11, 12, 17, 18],
       device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000,  9000, 11001, 11002,
        18001, 18002, 18003, 18004], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,   1,   2,   4,   6,   7,   8,   9,  17,  22,  23,  24,  25,  26,
         64,  81,  82,  86,  87,  88,  91,  92, 142, 143, 160],
       device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 11, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000,  9000, 11001, 11002,
        11003, 11004, 11005, 11006, 11007, 11008, 11009, 11010, 11011, 11012,
        11013, 11014, 11015, 11016, 11017, 11018, 11019, 11020, 11021, 11022,
        11023, 11024], device='cuda:0')
[32m[06/28 18:38:49 d2.evaluation.evaluator]: [0mInference done 491/500. Dataloading: 0.0045 s/iter. Inference: 4.5015 s/iter. Eval: 0.3499 s/iter. Total: 4.8560 s/iter. ETA=0:00:43
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  15,  20,  22,  25,  47,  53,  57,  59,  60,  61,  62,  69, 133,
        134], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  7,  8,  9, 10, 11, 12, 17, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000,  9000, 11001, 11002,
        11003, 11004, 11005, 11006, 11007, 11008, 11009, 11010, 11011, 11012,
        18001, 18002], device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  37,  38,  39,  40,  41,  45,  47,  49,  51,  53,  54,  57, 160,
        164], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 14, 17, 18],
       device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  4000,  5000,  7000,  8000,  9000,
        10000, 11001, 11002, 11003, 11004, 11005, 11006, 11007, 11008, 11009,
        11010, 11011, 11012, 11013, 18001], device='cuda:0')
[32m[06/28 18:38:59 d2.evaluation.evaluator]: [0mInference done 493/500. Dataloading: 0.0045 s/iter. Inference: 4.5024 s/iter. Eval: 0.3503 s/iter. Total: 4.8572 s/iter. ETA=0:00:34
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,   9,  10,  17,  20, 182, 192], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 17], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000,  9000, 10000, 11001,
        11002, 11003, 11004, 11005, 11006], device='cuda:0')
[32m[06/28 18:39:05 d2.evaluation.evaluator]: [0mInference done 494/500. Dataloading: 0.0044 s/iter. Inference: 4.5029 s/iter. Eval: 0.3504 s/iter. Total: 4.8578 s/iter. ETA=0:00:29
RESIZING OUTPUTS
INSTANCE LABELS tensor([0, 4, 5], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 11, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 10000, 11001, 18001],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0, 125, 127, 156, 161, 169], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  5,  6,  7,  8, 10, 11, 17, 18], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  2000,  5000,  8000, 10000, 11001, 18001, 18002, 18003,
        18004], device='cuda:0')
[32m[06/28 18:39:14 d2.evaluation.evaluator]: [0mInference done 496/500. Dataloading: 0.0045 s/iter. Inference: 4.5023 s/iter. Eval: 0.3503 s/iter. Total: 4.8572 s/iter. ETA=0:00:19
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  38,  39,  40,  41,  42,  43,  44,  45,  46, 150],
       device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 11, 13, 14, 15, 16],
       device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 10000, 11001, 11002,
        11003, 11004, 11005, 11006, 11007, 11008, 11009, 16001],
       device='cuda:0')
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,  16,  17,  18,  21,  74,  75, 176, 180], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  7,  8,  9, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000,  9000, 10000, 11001,
        11002, 11003, 11004, 11005, 11006, 11007, 11008], device='cuda:0')
[32m[06/28 18:39:23 d2.evaluation.evaluator]: [0mInference done 498/500. Dataloading: 0.0044 s/iter. Inference: 4.5012 s/iter. Eval: 0.3504 s/iter. Total: 4.8562 s/iter. ETA=0:00:09
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0,   6,   7,   8,  11,  12,  13,  14,  39,  40,  81,  82,  91,  92,
         93,  94,  95,  96,  97,  98,  99, 100, 101, 102, 103, 104, 105, 106,
        107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
        121, 133, 198], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 17], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  4000,  5000,  8000,  9000, 10000,
        11001, 11002, 11003, 11004, 11005, 11006, 11007, 11008, 11009, 11010,
        11011, 11012, 11013, 11014, 11015, 11016, 11017, 11018, 11019, 11020,
        11021, 11022, 11023, 11024, 11025, 11026, 11027, 11028, 11029, 11030,
        11031, 11032, 11033, 11034, 11035, 11036, 11037, 11038, 11039, 11040,
        11041, 11042, 11043, 17001], device='cuda:0')
[32m[06/28 18:39:28 d2.evaluation.evaluator]: [0mInference done 499/500. Dataloading: 0.0044 s/iter. Inference: 4.5009 s/iter. Eval: 0.3511 s/iter. Total: 4.8566 s/iter. ETA=0:00:04
RESIZING OUTPUTS
INSTANCE LABELS tensor([  0, 130, 131, 132, 133, 144, 145, 146, 148, 186], device='cuda:0')
CLASS IDS tensor([ 0,  1,  2,  3,  4,  5,  7,  8, 10, 11], device='cuda:0')
PANOPTIC LABEL LIST (1024, 2048) tensor([   -1,     0,  1000,  2000,  3000,  5000,  8000, 10000, 11001, 11002,
        11003, 11004, 11005, 11006, 11007, 11008, 11009], device='cuda:0')
[32m[06/28 18:39:33 d2.evaluation.evaluator]: [0mInference done 500/500. Dataloading: 0.0044 s/iter. Inference: 4.5012 s/iter. Eval: 0.3512 s/iter. Total: 4.8569 s/iter. ETA=0:00:00
[32m[06/28 18:39:33 d2.evaluation.evaluator]: [0mTotal inference time: 0:40:04.270925 (4.857113 s / iter per device, on 1 devices)
[32m[06/28 18:39:33 d2.evaluation.evaluator]: [0mTotal inference pure compute time: 0:37:08 (4.501163 s / iter per device, on 1 devices)
[32m[06/28 18:39:33 d2.evaluation.panoptic_evaluation]: [0mWriting all panoptic predictions to /tmp/panoptic_evalye8j6l04 ...
[32m[06/28 18:39:49 d2.evaluation.panoptic_evaluation]: [0mPanoptic Evaluation Results:
|        |   PQ   |   SQ   |   RQ   |  #categories  |
|:------:|:------:|:------:|:------:|:-------------:|
|  All   | 5.904  | 29.447 | 8.134  |      19       |
| Things | 0.049  | 13.295 | 0.093  |       8       |
| Stuff  | 10.162 | 41.193 | 13.982 |      11       |
[32m[06/28 18:39:49 d2.evaluation.cityscapes_evaluation]: [0mEvaluating results under /tmp/cityscapes_eval_9vgf604o ...
Evaluating 500 pairs of images...
Images Processed: 1 Images Processed: 2 Images Processed: 3 Images Processed: 4 Images Processed: 5 Images Processed: 6 Images Processed: 7 Images Processed: 8 Images Processed: 9 Images Processed: 10 Images Processed: 11 Images Processed: 12 Images Processed: 13 Images Processed: 14 Images Processed: 15 Images Processed: 16 Images Processed: 17 Images Processed: 18 Images Processed: 19 Images Processed: 20 Images Processed: 21 Images Processed: 22 Images Processed: 23 Images Processed: 24 Images Processed: 25 Images Processed: 26 Images Processed: 27 Images Processed: 28 Images Processed: 29 Images Processed: 30 Images Processed: 31 Images Processed: 32 Images Processed: 33 Images Processed: 34 Images Processed: 35 Images Processed: 36 Images Processed: 37 Images Processed: 38 Images Processed: 39 Images Processed: 40 Images Processed: 41 Images Processed: 42 Images Processed: 43 Images Processed: 44 Images Processed: 45 Images Processed: 46 Images Processed: 47 Images Processed: 48 Images Processed: 49 Images Processed: 50 Images Processed: 51 Images Processed: 52 Images Processed: 53 Images Processed: 54 Images Processed: 55 Images Processed: 56 Images Processed: 57 Images Processed: 58 Images Processed: 59 Images Processed: 60 Images Processed: 61 Images Processed: 62 Images Processed: 63 Images Processed: 64 Images Processed: 65 Images Processed: 66 Images Processed: 67 Images Processed: 68 Images Processed: 69 Images Processed: 70 Images Processed: 71 Images Processed: 72 Images Processed: 73 Images Processed: 74 Images Processed: 75 Images Processed: 76 Images Processed: 77 Images Processed: 78 Images Processed: 79 Images Processed: 80 Images Processed: 81 Images Processed: 82 Images Processed: 83 Images Processed: 84 Images Processed: 85 Images Processed: 86 Images Processed: 87 Images Processed: 88 Images Processed: 89 Images Processed: 90 Images Processed: 91 Images Processed: 92 Images Processed: 93 Images Processed: 94 Images Processed: 95 Images Processed: 96 Images Processed: 97 Images Processed: 98 Images Processed: 99 Images Processed: 100 Images Processed: 101 Images Processed: 102 Images Processed: 103 Images Processed: 104 Images Processed: 105 Images Processed: 106 Images Processed: 107 Images Processed: 108 Images Processed: 109 Images Processed: 110 Images Processed: 111 Images Processed: 112 Images Processed: 113 Images Processed: 114 Images Processed: 115 Images Processed: 116 Images Processed: 117 Images Processed: 118 Images Processed: 119 Images Processed: 120 Images Processed: 121 Images Processed: 122 Images Processed: 123 Images Processed: 124 Images Processed: 125 Images Processed: 126 Images Processed: 127 Images Processed: 128 Images Processed: 129 Images Processed: 130 Images Processed: 131 Images Processed: 132 Images Processed: 133 Images Processed: 134 Images Processed: 135 Images Processed: 136 Images Processed: 137 Images Processed: 138 Images Processed: 139 Images Processed: 140 Images Processed: 141 Images Processed: 142 Images Processed: 143 Images Processed: 144 Images Processed: 145 Images Processed: 146 Images Processed: 147 Images Processed: 148 Images Processed: 149 Images Processed: 150 Images Processed: 151 Images Processed: 152 Images Processed: 153 Images Processed: 154 Images Processed: 155 Images Processed: 156 Images Processed: 157 Images Processed: 158 Images Processed: 159 Images Processed: 160 Images Processed: 161 Images Processed: 162 Images Processed: 163 Images Processed: 164 Images Processed: 165 Images Processed: 166 Images Processed: 167 Images Processed: 168 Images Processed: 169 Images Processed: 170 Images Processed: 171 Images Processed: 172 Images Processed: 173 Images Processed: 174 Images Processed: 175 Images Processed: 176 Images Processed: 177 Images Processed: 178 Images Processed: 179 Images Processed: 180 Images Processed: 181 Images Processed: 182 Images Processed: 183 Images Processed: 184 Images Processed: 185 Images Processed: 186 Images Processed: 187 Images Processed: 188 Images Processed: 189 Images Processed: 190 Images Processed: 191 Images Processed: 192 Images Processed: 193 Images Processed: 194 Images Processed: 195 Images Processed: 196 Images Processed: 197 Images Processed: 198 Images Processed: 199 Images Processed: 200 Images Processed: 201 Images Processed: 202 Images Processed: 203 Images Processed: 204 Images Processed: 205 Images Processed: 206 Images Processed: 207 Images Processed: 208 Images Processed: 209 Images Processed: 210 Images Processed: 211 Images Processed: 212 Images Processed: 213 Images Processed: 214 Images Processed: 215 Images Processed: 216 Images Processed: 217 Images Processed: 218 Images Processed: 219 Images Processed: 220 Images Processed: 221 Images Processed: 222 Images Processed: 223 Images Processed: 224 Images Processed: 225 Images Processed: 226 Images Processed: 227 Images Processed: 228 Images Processed: 229 Images Processed: 230 Images Processed: 231 Images Processed: 232 Images Processed: 233 Images Processed: 234 Images Processed: 235 Images Processed: 236 Images Processed: 237 Images Processed: 238 Images Processed: 239 Images Processed: 240 Images Processed: 241 Images Processed: 242 Images Processed: 243 Images Processed: 244 Images Processed: 245 Images Processed: 246 Images Processed: 247 Images Processed: 248 Images Processed: 249 Images Processed: 250 Images Processed: 251 Images Processed: 252 Images Processed: 253 Images Processed: 254 Images Processed: 255 Images Processed: 256 Images Processed: 257 Images Processed: 258 Images Processed: 259 Images Processed: 260 Images Processed: 261 Images Processed: 262 Images Processed: 263 Images Processed: 264 Images Processed: 265 Images Processed: 266 Images Processed: 267 Images Processed: 268 Images Processed: 269 Images Processed: 270 Images Processed: 271 Images Processed: 272 Images Processed: 273 Images Processed: 274 Images Processed: 275 Images Processed: 276 Images Processed: 277 Images Processed: 278 Images Processed: 279 Images Processed: 280 Images Processed: 281 Images Processed: 282 Images Processed: 283 Images Processed: 284 Images Processed: 285 Images Processed: 286 Images Processed: 287 Images Processed: 288 Images Processed: 289 Images Processed: 290 Images Processed: 291 Images Processed: 292 Images Processed: 293 Images Processed: 294 Images Processed: 295 Images Processed: 296 Images Processed: 297 Images Processed: 298 Images Processed: 299 Images Processed: 300 Images Processed: 301 Images Processed: 302 Images Processed: 303 Images Processed: 304 Images Processed: 305 Images Processed: 306 Images Processed: 307 Images Processed: 308 Images Processed: 309 Images Processed: 310 Images Processed: 311 Images Processed: 312 Images Processed: 313 Images Processed: 314 Images Processed: 315 Images Processed: 316 Images Processed: 317 Images Processed: 318 Images Processed: 319 Images Processed: 320 Images Processed: 321 Images Processed: 322 Images Processed: 323 Images Processed: 324 Images Processed: 325 Images Processed: 326 Images Processed: 327 Images Processed: 328 Images Processed: 329 Images Processed: 330 Images Processed: 331 Images Processed: 332 Images Processed: 333 Images Processed: 334 Images Processed: 335 Images Processed: 336 Images Processed: 337 Images Processed: 338 Images Processed: 339 Images Processed: 340 Images Processed: 341 Images Processed: 342 Images Processed: 343 Images Processed: 344 Images Processed: 345 Images Processed: 346 Images Processed: 347 Images Processed: 348 Images Processed: 349 Images Processed: 350 Images Processed: 351 Images Processed: 352 Images Processed: 353 Images Processed: 354 Images Processed: 355 Images Processed: 356 Images Processed: 357 Images Processed: 358 Images Processed: 359 Images Processed: 360 Images Processed: 361 Images Processed: 362 Images Processed: 363 Images Processed: 364 Images Processed: 365 Images Processed: 366 Images Processed: 367 Images Processed: 368 Images Processed: 369 Images Processed: 370 Images Processed: 371 Images Processed: 372 Images Processed: 373 Images Processed: 374 Images Processed: 375 Images Processed: 376 Images Processed: 377 Images Processed: 378 Images Processed: 379 Images Processed: 380 Images Processed: 381 Images Processed: 382 Images Processed: 383 Images Processed: 384 Images Processed: 385 Images Processed: 386 Images Processed: 387 Images Processed: 388 Images Processed: 389 Images Processed: 390 Images Processed: 391 Images Processed: 392 Images Processed: 393 Images Processed: 394 Images Processed: 395 Images Processed: 396 Images Processed: 397 Images Processed: 398 Images Processed: 399 Images Processed: 400 Images Processed: 401 Images Processed: 402 Images Processed: 403 Images Processed: 404 Images Processed: 405 Images Processed: 406 Images Processed: 407 Images Processed: 408 Images Processed: 409 Images Processed: 410 Images Processed: 411 Images Processed: 412 Images Processed: 413 Images Processed: 414 Images Processed: 415 Images Processed: 416 Images Processed: 417 Images Processed: 418 Images Processed: 419 Images Processed: 420 Images Processed: 421 Images Processed: 422 Images Processed: 423 Images Processed: 424 Images Processed: 425 Images Processed: 426 Images Processed: 427 Images Processed: 428 Images Processed: 429 Images Processed: 430 Images Processed: 431 Images Processed: 432 Images Processed: 433 Images Processed: 434 Images Processed: 435 Images Processed: 436 Images Processed: 437 Images Processed: 438 Images Processed: 439 Images Processed: 440 Images Processed: 441 Images Processed: 442 Images Processed: 443 Images Processed: 444 Images Processed: 445 Images Processed: 446 Images Processed: 447 Images Processed: 448 Images Processed: 449 Images Processed: 450 Images Processed: 451 Images Processed: 452 Images Processed: 453 Images Processed: 454 Images Processed: 455 Images Processed: 456 Images Processed: 457 Images Processed: 458 Images Processed: 459 Images Processed: 460 Images Processed: 461 Images Processed: 462 Images Processed: 463 Images Processed: 464 Images Processed: 465 Images Processed: 466 Images Processed: 467 Images Processed: 468 Images Processed: 469 Images Processed: 470 Images Processed: 471 Images Processed: 472 Images Processed: 473 Images Processed: 474 Images Processed: 475 Images Processed: 476 Images Processed: 477 Images Processed: 478 Images Processed: 479 Images Processed: 480 Images Processed: 481 Images Processed: 482 Images Processed: 483 Images Processed: 484 Images Processed: 485 Images Processed: 486 Images Processed: 487 Images Processed: 488 Images Processed: 489 Images Processed: 490 Images Processed: 491 Images Processed: 492 Images Processed: 493 Images Processed: 494 Images Processed: 495 Images Processed: 496 Images Processed: 497 Images Processed: 498 Images Processed: 499 Images Processed: 500 

--------------  ------  ------  ------  ------  ------  ------  ------  ------  ------  ------  ------  ------  ------  ------  ------  ------  ------  ------  ------  ------  ------  ------  ------  ------  ------  ------  ------  ------  ------  ------  ------  ------  ------  ------  ------- 
              |   u   |   e   |   r   |   o   |   s   |   d   |   g   |   r   |   s   |   p   |   r   |   b   |   w   |   f   |   g   |   b   |   t   |   p   |   p   |   t   |   t   |   v   |   t   |   s   |   p   |   r   |   c   |   t   |   b   |   c   |   t   |   t   |   m   |   b   |  Prior |
--------------  ------  ------  ------  ------  ------  ------  ------  ------  ------  ------  ------  ------  ------  ------  ------  ------  ------  ------  ------  ------  ------  ------  ------  ------  ------  ------  ------  ------  ------  ------  ------  ------  ------  ------  ------- 
    unlabeled |  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.39  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.02  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.03  [0m  0.00  [0m  0.56  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m 0.0004 [0m
  ego vehicle |  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.05  [0m  0.03  [0m  0.00  [0m  0.00  [0m  0.91  [0m  0.01  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m 0.0490 [0m
rectification |  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.01  [0m  0.01  [0m  0.00  [0m  0.00  [0m  0.91  [0m  0.01  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.04  [0m  0.00  [0m  0.01  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m 0.0189 [0m
   out of roi |  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.10  [0m  0.01  [0m  0.00  [0m  0.00  [0m  0.70  [0m  0.01  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.13  [0m  0.00  [0m  0.05  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m 0.0151 [0m
       static |  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.04  [0m  0.02  [0m  0.00  [0m  0.00  [0m  0.80  [0m  0.01  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.05  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.08  [0m  0.00  [0m  0.00  [0m  0.01  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m 0.0149 [0m
      dynamic |  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.07  [0m  0.03  [0m  0.00  [0m  0.00  [0m  0.83  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.02  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.03  [0m  0.00  [0m  0.01  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m 0.0042 [0m
       ground |  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.13  [0m  0.08  [0m  0.00  [0m  0.00  [0m  0.76  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.02  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m 0.0178 [0m
         road |  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.09  [0m  0.08  [0m  0.00  [0m  0.00  [0m  0.83  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m 0.3293 [0m
     sidewalk |  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.08  [0m  0.15  [0m  0.00  [0m  0.00  [0m  0.75  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.01  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m 0.0473 [0m
      parking |  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.10  [0m  0.27  [0m  0.00  [0m  0.00  [0m  0.61  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.01  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m 0.0040 [0m
   rail track |  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.28  [0m  0.20  [0m  0.00  [0m  0.00  [0m  0.43  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.08  [0m  0.01  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m 0.0006 [0m
     building |  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.01  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.95  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.01  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.02  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m 0.1917 [0m
         wall |  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.03  [0m  0.03  [0m  0.00  [0m  0.00  [0m  0.88  [0m  0.01  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.01  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.04  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m 0.0064 [0m
        fence |  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.03  [0m  0.02  [0m  0.00  [0m  0.00  [0m  0.82  [0m  0.01  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.03  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.07  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m 0.0072 [0m
   guard rail |  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.47  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.53  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m 0.0000 [0m
       bridge |  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.01  [0m  0.00  [0m  0.00  [0m  0.83  [0m  0.03  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.02  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.12  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m 0.0003 [0m
         pole |  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.02  [0m  0.01  [0m  0.00  [0m  0.00  [0m  0.54  [0m  0.01  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.33  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.08  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m 0.0129 [0m
    polegroup |  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.06  [0m  0.02  [0m  0.00  [0m  0.00  [0m  0.80  [0m  0.01  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.08  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.03  [0m  0.01  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m 0.0001 [0m
traffic light |  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.72  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.05  [0m  0.00  [0m  0.01  [0m  0.00  [0m  0.21  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m 0.0017 [0m
 traffic sign |  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.02  [0m  0.01  [0m  0.00  [0m  0.00  [0m  0.72  [0m  0.01  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.05  [0m  0.00  [0m  0.00  [0m  0.07  [0m  0.11  [0m  0.00  [0m  0.00  [0m  0.01  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m 0.0058 [0m
   vegetation |  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.20  [0m  0.01  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.01  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.78  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m 0.1515 [0m
      terrain |  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.04  [0m  0.03  [0m  0.00  [0m  0.00  [0m  0.34  [0m  0.03  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.44  [0m  0.11  [0m  0.00  [0m  0.01  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m 0.0073 [0m
          sky |  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.45  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.05  [0m  0.00  [0m  0.49  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m 0.0293 [0m
       person |  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.12  [0m  0.03  [0m  0.00  [0m  0.00  [0m  0.77  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.02  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.03  [0m  0.00  [0m  0.00  [0m  0.03  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m 0.0114 [0m
        rider |  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.11  [0m  0.02  [0m  0.00  [0m  0.00  [0m  0.72  [0m  0.01  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.02  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.09  [0m  0.00  [0m  0.00  [0m  0.03  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m 0.0019 [0m
          car |  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.12  [0m  0.04  [0m  0.00  [0m  0.00  [0m  0.81  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.02  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m 0.0570 [0m
        truck |  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.07  [0m  0.01  [0m  0.00  [0m  0.00  [0m  0.84  [0m  0.01  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.01  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.02  [0m  0.00  [0m  0.00  [0m  0.03  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m 0.0026 [0m
          bus |  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.05  [0m  0.03  [0m  0.00  [0m  0.00  [0m  0.85  [0m  0.02  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.01  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.05  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m 0.0034 [0m
      caravan |  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.02  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.94  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.02  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.02  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m 0.0001 [0m
      trailer |  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.04  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.92  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.02  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.02  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m 0.0002 [0m
        train |  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.05  [0m  0.01  [0m  0.00  [0m  0.00  [0m  0.85  [0m  0.03  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.01  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.03  [0m  0.00  [0m  0.00  [0m  0.02  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m 0.0010 [0m
   motorcycle |  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.38  [0m  0.04  [0m  0.00  [0m  0.00  [0m  0.53  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.01  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.02  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m 0.0007 [0m
      bicycle |  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.19  [0m  0.08  [0m  0.00  [0m  0.00  [0m  0.63  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.03  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.05  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m  0.00  [0m 0.0062 [0m
--------------  ------  ------  ------  ------  ------  ------  ------  ------  ------  ------  ------  ------  ------  ------  ------  ------  ------  ------  ------  ------  ------  ------  ------  ------  ------  ------  ------  ------  ------  ------  ------  ------  ------  ------  -------  

[1mclasses          IoU      nIoU[0m
--------------------------------
road          : 0.086[0m      nan[0m
sidewalk      : 0.092[0m      nan[0m
building      : 0.287[0m      nan[0m
wall          : 0.007[0m      nan[0m
fence         : 0.004[0m      nan[0m
pole          : 0.236[0m      nan[0m
traffic light : 0.012[0m      nan[0m
traffic sign  : 0.065[0m      nan[0m
vegetation    : 0.708[0m      nan[0m
terrain       : 0.106[0m      nan[0m
sky           : 0.482[0m      nan[0m
person        : 0.025[0m    0.022[0m
rider         : 0.000[0m    0.000[0m
car           : 0.000[0m    0.000[0m
truck         : 0.000[0m    0.000[0m
bus           : 0.000[0m    0.000[0m
train         : 0.000[0m    0.000[0m
motorcycle    : 0.001[0m    0.006[0m
bicycle       : 0.001[0m    0.002[0m
--------------------------------
Score Average : 0.111[0m    0.004[0m
--------------------------------


[1mcategories       IoU      nIoU[0m
--------------------------------
flat          : 0.169[0m      nan[0m
construction  : 0.304[0m      nan[0m
object        : 0.201[0m      nan[0m
nature        : 0.715[0m      nan[0m
sky           : 0.482[0m      nan[0m
human         : 0.026[0m    0.023[0m
vehicle       : 0.000[0m    0.001[0m
--------------------------------
Score Average : 0.271[0m    0.012[0m
--------------------------------

[32m[06/28 18:40:57 d2.evaluation.cityscapes_evaluation]: [0mEvaluating results under /tmp/cityscapes_eval_k3gst2vo ...
Creating ground truth instances from png files.
Processing 500 images...
Images Processed: 1 Images Processed: 2 Images Processed: 3 Images Processed: 4 Images Processed: 5 Images Processed: 6 Images Processed: 7 Images Processed: 8 Images Processed: 9 Images Processed: 10 Images Processed: 11 Images Processed: 12 Images Processed: 13 Images Processed: 14 Images Processed: 15 Images Processed: 16 Images Processed: 17 Images Processed: 18 Images Processed: 19 Images Processed: 20 Images Processed: 21 Images Processed: 22 Images Processed: 23 Images Processed: 24 Images Processed: 25 Images Processed: 26 Images Processed: 27 Images Processed: 28 Images Processed: 29 Images Processed: 30 Images Processed: 31 Images Processed: 32 Images Processed: 33 Images Processed: 34 Images Processed: 35 Images Processed: 36 Images Processed: 37 Images Processed: 38 Images Processed: 39 Images Processed: 40 Images Processed: 41 Images Processed: 42 Images Processed: 43 Images Processed: 44 Images Processed: 45 Images Processed: 46 Images Processed: 47 Images Processed: 48 Images Processed: 49 Images Processed: 50 Images Processed: 51 Images Processed: 52 Images Processed: 53 Images Processed: 54 Images Processed: 55 Images Processed: 56 Images Processed: 57 Images Processed: 58 Images Processed: 59 Images Processed: 60 Images Processed: 61 Images Processed: 62 Images Processed: 63 Images Processed: 64 Images Processed: 65 Images Processed: 66 Images Processed: 67 Images Processed: 68 Images Processed: 69 Images Processed: 70 Images Processed: 71 Images Processed: 72 Images Processed: 73 Images Processed: 74 Images Processed: 75 Images Processed: 76 Images Processed: 77 Images Processed: 78 Images Processed: 79 Images Processed: 80 Images Processed: 81 Images Processed: 82 Images Processed: 83 Images Processed: 84 Images Processed: 85 Images Processed: 86 Images Processed: 87 Images Processed: 88 Images Processed: 89 Images Processed: 90 Images Processed: 91 Images Processed: 92 Images Processed: 93 Images Processed: 94 Images Processed: 95 Images Processed: 96 Images Processed: 97 Images Processed: 98 Images Processed: 99 Images Processed: 100 Images Processed: 101 Images Processed: 102 Images Processed: 103 Images Processed: 104 Images Processed: 105 Images Processed: 106 Images Processed: 107 Images Processed: 108 Images Processed: 109 Images Processed: 110 Images Processed: 111 Images Processed: 112 Images Processed: 113 Images Processed: 114 Images Processed: 115 Images Processed: 116 Images Processed: 117 Images Processed: 118 Images Processed: 119 Images Processed: 120 Images Processed: 121 Images Processed: 122 Images Processed: 123 Images Processed: 124 Images Processed: 125 Images Processed: 126 Images Processed: 127 Images Processed: 128 Images Processed: 129 Images Processed: 130 Images Processed: 131 Images Processed: 132 Images Processed: 133 Images Processed: 134 Images Processed: 135 Images Processed: 136 Images Processed: 137 Images Processed: 138 Images Processed: 139 Images Processed: 140 Images Processed: 141 Images Processed: 142 Images Processed: 143 Images Processed: 144 Images Processed: 145 Images Processed: 146 Images Processed: 147 Images Processed: 148 Images Processed: 149 Images Processed: 150 Images Processed: 151 Images Processed: 152 Images Processed: 153 Images Processed: 154 Images Processed: 155 Images Processed: 156 Images Processed: 157 Images Processed: 158 Images Processed: 159 Images Processed: 160 Images Processed: 161 Images Processed: 162 Images Processed: 163 Images Processed: 164 Images Processed: 165 Images Processed: 166 Images Processed: 167 Images Processed: 168 Images Processed: 169 Images Processed: 170 Images Processed: 171 Images Processed: 172 Images Processed: 173 Images Processed: 174 Images Processed: 175 Images Processed: 176 Images Processed: 177 Images Processed: 178 Images Processed: 179 Images Processed: 180 Images Processed: 181 Images Processed: 182 Images Processed: 183 Images Processed: 184 Images Processed: 185 Images Processed: 186 Images Processed: 187 Images Processed: 188 Images Processed: 189 Images Processed: 190 Images Processed: 191 Images Processed: 192 Images Processed: 193 Images Processed: 194 Images Processed: 195 Images Processed: 196 Images Processed: 197 Images Processed: 198 Images Processed: 199 Images Processed: 200 Images Processed: 201 Images Processed: 202 Images Processed: 203 Images Processed: 204 Images Processed: 205 Images Processed: 206 Images Processed: 207 Images Processed: 208 Images Processed: 209 Images Processed: 210 Images Processed: 211 Images Processed: 212 Images Processed: 213 Images Processed: 214 Images Processed: 215 Images Processed: 216 Images Processed: 217 Images Processed: 218 Images Processed: 219 Images Processed: 220 Images Processed: 221 Images Processed: 222 Images Processed: 223 Images Processed: 224 Images Processed: 225 Images Processed: 226 Images Processed: 227 Images Processed: 228 Images Processed: 229 Images Processed: 230 Images Processed: 231 Images Processed: 232 Images Processed: 233 Images Processed: 234 Images Processed: 235 Images Processed: 236 Images Processed: 237 Images Processed: 238 Images Processed: 239 Images Processed: 240 Images Processed: 241 Images Processed: 242 Images Processed: 243 Images Processed: 244 Images Processed: 245 Images Processed: 246 Images Processed: 247 Images Processed: 248 Images Processed: 249 Images Processed: 250 Images Processed: 251 Images Processed: 252 Images Processed: 253 Images Processed: 254 Images Processed: 255 Images Processed: 256 Images Processed: 257 Images Processed: 258 Images Processed: 259 Images Processed: 260 Images Processed: 261 Images Processed: 262 Images Processed: 263 Images Processed: 264 Images Processed: 265 Images Processed: 266 Images Processed: 267 Images Processed: 268 Images Processed: 269 Images Processed: 270 Images Processed: 271 Images Processed: 272 Images Processed: 273 Images Processed: 274 Images Processed: 275 Images Processed: 276 Images Processed: 277 Images Processed: 278 Images Processed: 279 Images Processed: 280 Images Processed: 281 Images Processed: 282 Images Processed: 283 Images Processed: 284 Images Processed: 285 Images Processed: 286 Images Processed: 287 Images Processed: 288 Images Processed: 289 Images Processed: 290 Images Processed: 291 Images Processed: 292 Images Processed: 293 Images Processed: 294 Images Processed: 295 Images Processed: 296 Images Processed: 297 Images Processed: 298 Images Processed: 299 Images Processed: 300 Images Processed: 301 Images Processed: 302 Images Processed: 303 Images Processed: 304 Images Processed: 305 Images Processed: 306 Images Processed: 307 Images Processed: 308 Images Processed: 309 Images Processed: 310 Images Processed: 311 Images Processed: 312 Images Processed: 313 Images Processed: 314 Images Processed: 315 Images Processed: 316 Images Processed: 317 Images Processed: 318 Images Processed: 319 Images Processed: 320 Images Processed: 321 Images Processed: 322 Images Processed: 323 Images Processed: 324 Images Processed: 325 Images Processed: 326 Images Processed: 327 Images Processed: 328 Images Processed: 329 Images Processed: 330 Images Processed: 331 Images Processed: 332 Images Processed: 333 Images Processed: 334 Images Processed: 335 Images Processed: 336 Images Processed: 337 Images Processed: 338 Images Processed: 339 Images Processed: 340 Images Processed: 341 Images Processed: 342 Images Processed: 343 Images Processed: 344 Images Processed: 345 Images Processed: 346 Images Processed: 347 Images Processed: 348 Images Processed: 349 Images Processed: 350 Images Processed: 351 Images Processed: 352 Images Processed: 353 Images Processed: 354 Images Processed: 355 Images Processed: 356 Images Processed: 357 Images Processed: 358 Images Processed: 359 Images Processed: 360 Images Processed: 361 Images Processed: 362 Images Processed: 363 Images Processed: 364 Images Processed: 365 Images Processed: 366 Images Processed: 367 Images Processed: 368 Images Processed: 369 Images Processed: 370 Images Processed: 371 Images Processed: 372 Images Processed: 373 Images Processed: 374 Images Processed: 375 Images Processed: 376 Images Processed: 377 Images Processed: 378 Images Processed: 379 Images Processed: 380 Images Processed: 381 Images Processed: 382 Images Processed: 383 Images Processed: 384 Images Processed: 385 Images Processed: 386 Images Processed: 387 Images Processed: 388 Images Processed: 389 Images Processed: 390 Images Processed: 391 Images Processed: 392 Images Processed: 393 Images Processed: 394 Images Processed: 395 Images Processed: 396 Images Processed: 397 Images Processed: 398 Images Processed: 399 Images Processed: 400 Images Processed: 401 Images Processed: 402 Images Processed: 403 Images Processed: 404 Images Processed: 405 Images Processed: 406 Images Processed: 407 Images Processed: 408 Images Processed: 409 Images Processed: 410 Images Processed: 411 Images Processed: 412 Images Processed: 413 Images Processed: 414 Images Processed: 415 Images Processed: 416 Images Processed: 417 Images Processed: 418 Images Processed: 419 Images Processed: 420 Images Processed: 421 Images Processed: 422 Images Processed: 423 Images Processed: 424 Images Processed: 425 Images Processed: 426 Images Processed: 427 Images Processed: 428 Images Processed: 429 Images Processed: 430 Images Processed: 431 Images Processed: 432 Images Processed: 433 Images Processed: 434 Images Processed: 435 Images Processed: 436 Images Processed: 437 Images Processed: 438 Images Processed: 439 Images Processed: 440 Images Processed: 441 Images Processed: 442 Images Processed: 443 Images Processed: 444 Images Processed: 445 Images Processed: 446 Images Processed: 447 Images Processed: 448 Images Processed: 449 Images Processed: 450 Images Processed: 451 Images Processed: 452 Images Processed: 453 Images Processed: 454 Images Processed: 455 Images Processed: 456 Images Processed: 457 Images Processed: 458 Images Processed: 459 Images Processed: 460 Images Processed: 461 Images Processed: 462 Images Processed: 463 Images Processed: 464 Images Processed: 465 Images Processed: 466 Images Processed: 467 Images Processed: 468 Images Processed: 469 Images Processed: 470 Images Processed: 471 Images Processed: 472 Images Processed: 473 Images Processed: 474 Images Processed: 475 Images Processed: 476 Images Processed: 477 Images Processed: 478 Images Processed: 479 Images Processed: 480 Images Processed: 481 Images Processed: 482 Images Processed: 483 Images Processed: 484 Images Processed: 485 Images Processed: 486 Images Processed: 487 Images Processed: 488 Images Processed: 489 Images Processed: 490 Images Processed: 491 Images Processed: 492 Images Processed: 493 Images Processed: 494 Images Processed: 495 Images Processed: 496 Images Processed: 497 Images Processed: 498 Images Processed: 499 Images Processed: 500 
Matching 500 pairs of images...
Images Processed: 1 Images Processed: 2 Images Processed: 3 Images Processed: 4 Images Processed: 5 Images Processed: 6 Images Processed: 7 Images Processed: 8 Images Processed: 9 Images Processed: 10 Images Processed: 11 Images Processed: 12 Images Processed: 13 Images Processed: 14 Images Processed: 15 Images Processed: 16 Images Processed: 17 Images Processed: 18 Images Processed: 19 Images Processed: 20 Images Processed: 21 Images Processed: 22 Images Processed: 23 Images Processed: 24 Images Processed: 25 Images Processed: 26 Images Processed: 27 Images Processed: 28 Images Processed: 29 Images Processed: 30 Images Processed: 31 Images Processed: 32 Images Processed: 33 Images Processed: 34 Images Processed: 35 Images Processed: 36 Images Processed: 37 Images Processed: 38 Images Processed: 39 Images Processed: 40 Images Processed: 41 Images Processed: 42 Images Processed: 43 Images Processed: 44 Images Processed: 45 Images Processed: 46 Images Processed: 47 Images Processed: 48 Images Processed: 49 Images Processed: 50 Images Processed: 51 Images Processed: 52 Images Processed: 53 Images Processed: 54 Images Processed: 55 Images Processed: 56 Images Processed: 57 Images Processed: 58 Images Processed: 59 Images Processed: 60 Images Processed: 61 Images Processed: 62 Images Processed: 63 Images Processed: 64 Images Processed: 65 Images Processed: 66 Images Processed: 67 Images Processed: 68 Images Processed: 69 Images Processed: 70 Images Processed: 71 Images Processed: 72 Images Processed: 73 Images Processed: 74 Images Processed: 75 Images Processed: 76 Images Processed: 77 Images Processed: 78 Images Processed: 79 Images Processed: 80 Images Processed: 81 Images Processed: 82 Images Processed: 83 Images Processed: 84 Images Processed: 85 Images Processed: 86 Images Processed: 87 Images Processed: 88 Images Processed: 89 Images Processed: 90 Images Processed: 91 Images Processed: 92 Images Processed: 93 Images Processed: 94 Images Processed: 95 Images Processed: 96 Images Processed: 97 Images Processed: 98 Images Processed: 99 Images Processed: 100 Images Processed: 101 Images Processed: 102 Images Processed: 103 Images Processed: 104 Images Processed: 105 Images Processed: 106 Images Processed: 107 Images Processed: 108 Images Processed: 109 Images Processed: 110 Images Processed: 111 Images Processed: 112 Images Processed: 113 Images Processed: 114 Images Processed: 115 Images Processed: 116 Images Processed: 117 Images Processed: 118 Images Processed: 119 Images Processed: 120 Images Processed: 121 Images Processed: 122 Images Processed: 123 Images Processed: 124 Images Processed: 125 Images Processed: 126 Images Processed: 127 Images Processed: 128 Images Processed: 129 Images Processed: 130 Images Processed: 131 Images Processed: 132 Images Processed: 133 Images Processed: 134 Images Processed: 135 Images Processed: 136 Images Processed: 137 Images Processed: 138 Images Processed: 139 Images Processed: 140 Images Processed: 141 Images Processed: 142 Images Processed: 143 Images Processed: 144 Images Processed: 145 Images Processed: 146 Images Processed: 147 Images Processed: 148 Images Processed: 149 Images Processed: 150 Images Processed: 151 Images Processed: 152 Images Processed: 153 Images Processed: 154 Images Processed: 155 Images Processed: 156 Images Processed: 157 Images Processed: 158 Images Processed: 159 Images Processed: 160 Images Processed: 161 Images Processed: 162 Images Processed: 163 Images Processed: 164 Images Processed: 165 Images Processed: 166 Images Processed: 167 Images Processed: 168 Images Processed: 169 Images Processed: 170 Images Processed: 171 Images Processed: 172 Images Processed: 173 Images Processed: 174 Images Processed: 175 Images Processed: 176 Images Processed: 177 Images Processed: 178 Images Processed: 179 Images Processed: 180 Images Processed: 181 Images Processed: 182 Images Processed: 183 Images Processed: 184 Images Processed: 185 Images Processed: 186 Images Processed: 187 Images Processed: 188 Images Processed: 189 Images Processed: 190 Images Processed: 191 Images Processed: 192 Images Processed: 193 Images Processed: 194 Images Processed: 195 Images Processed: 196 Images Processed: 197 Images Processed: 198 Images Processed: 199 Images Processed: 200 Images Processed: 201 Images Processed: 202 Images Processed: 203 Images Processed: 204 Images Processed: 205 Images Processed: 206 Images Processed: 207 Images Processed: 208 Images Processed: 209 Images Processed: 210 Images Processed: 211 Images Processed: 212 Images Processed: 213 Images Processed: 214 Images Processed: 215 Images Processed: 216 Images Processed: 217 Images Processed: 218 Images Processed: 219 Images Processed: 220 Images Processed: 221 Images Processed: 222 Images Processed: 223 Images Processed: 224 Images Processed: 225 Images Processed: 226 Images Processed: 227 Images Processed: 228 Images Processed: 229 Images Processed: 230 Images Processed: 231 Images Processed: 232 Images Processed: 233 Images Processed: 234 Images Processed: 235 Images Processed: 236 Images Processed: 237 Images Processed: 238 Images Processed: 239 Images Processed: 240 Images Processed: 241 Images Processed: 242 Images Processed: 243 Images Processed: 244 Images Processed: 245 Images Processed: 246 Images Processed: 247 Images Processed: 248 Images Processed: 249 Images Processed: 250 Images Processed: 251 Images Processed: 252 Images Processed: 253 Images Processed: 254 Images Processed: 255 Images Processed: 256 Images Processed: 257 Images Processed: 258 Images Processed: 259 Images Processed: 260 Images Processed: 261 Images Processed: 262 Images Processed: 263 Images Processed: 264 Images Processed: 265 Images Processed: 266 Images Processed: 267 Images Processed: 268 Images Processed: 269 Images Processed: 270 Images Processed: 271 Images Processed: 272 Images Processed: 273 Images Processed: 274 Images Processed: 275 Images Processed: 276 Images Processed: 277 Images Processed: 278 Images Processed: 279 Images Processed: 280 Images Processed: 281 Images Processed: 282 Images Processed: 283 Images Processed: 284 Images Processed: 285 Images Processed: 286 Images Processed: 287 Images Processed: 288 Images Processed: 289 Images Processed: 290 Images Processed: 291 Images Processed: 292 Images Processed: 293 Images Processed: 294 Images Processed: 295 Images Processed: 296 Images Processed: 297 Images Processed: 298 Images Processed: 299 Images Processed: 300 Images Processed: 301 Images Processed: 302 Images Processed: 303 Images Processed: 304 Images Processed: 305 Images Processed: 306 Images Processed: 307 Images Processed: 308 Images Processed: 309 Images Processed: 310 Images Processed: 311 Images Processed: 312 Images Processed: 313 Images Processed: 314 Images Processed: 315 Images Processed: 316 Images Processed: 317 Images Processed: 318 Images Processed: 319 Images Processed: 320 Images Processed: 321 Images Processed: 322 Images Processed: 323 Images Processed: 324 Images Processed: 325 Images Processed: 326 Images Processed: 327 Images Processed: 328 Images Processed: 329 Images Processed: 330 Images Processed: 331 Images Processed: 332 Images Processed: 333 Images Processed: 334 Images Processed: 335 Images Processed: 336 Images Processed: 337 Images Processed: 338 Images Processed: 339 Images Processed: 340 Images Processed: 341 Images Processed: 342 Images Processed: 343 Images Processed: 344 Images Processed: 345 Images Processed: 346 Images Processed: 347 Images Processed: 348 Images Processed: 349 Images Processed: 350 Images Processed: 351 Images Processed: 352 Images Processed: 353 Images Processed: 354 Images Processed: 355 Images Processed: 356 Images Processed: 357 Images Processed: 358 Images Processed: 359 Images Processed: 360 Images Processed: 361 Images Processed: 362 Images Processed: 363 Images Processed: 364 Images Processed: 365 Images Processed: 366 Images Processed: 367 Images Processed: 368 Images Processed: 369 Images Processed: 370 Images Processed: 371 Images Processed: 372 Images Processed: 373 Images Processed: 374 Images Processed: 375 Images Processed: 376 Images Processed: 377 Images Processed: 378 Images Processed: 379 Images Processed: 380 Images Processed: 381 Images Processed: 382 Images Processed: 383 Images Processed: 384 Images Processed: 385 Images Processed: 386 Images Processed: 387 Images Processed: 388 Images Processed: 389 Images Processed: 390 Images Processed: 391 Images Processed: 392 Images Processed: 393 Images Processed: 394 Images Processed: 395 Images Processed: 396 Images Processed: 397 Images Processed: 398 Images Processed: 399 Images Processed: 400 Images Processed: 401 Images Processed: 402 Images Processed: 403 Images Processed: 404 Images Processed: 405 Images Processed: 406 Images Processed: 407 Images Processed: 408 Images Processed: 409 Images Processed: 410 Images Processed: 411 Images Processed: 412 Images Processed: 413 Images Processed: 414 Images Processed: 415 Images Processed: 416 Images Processed: 417 Images Processed: 418 Images Processed: 419 Images Processed: 420 Images Processed: 421 Images Processed: 422 Images Processed: 423 Images Processed: 424 Images Processed: 425 Images Processed: 426 Images Processed: 427 Images Processed: 428 Images Processed: 429 Images Processed: 430 Images Processed: 431 Images Processed: 432 Images Processed: 433 Images Processed: 434 Images Processed: 435 Images Processed: 436 Images Processed: 437 Images Processed: 438 Images Processed: 439 Images Processed: 440 Images Processed: 441 Images Processed: 442 Images Processed: 443 Images Processed: 444 Images Processed: 445 Images Processed: 446 Images Processed: 447 Images Processed: 448 Images Processed: 449 Images Processed: 450 Images Processed: 451 Images Processed: 452 Images Processed: 453 Images Processed: 454 Images Processed: 455 Images Processed: 456 Images Processed: 457 Images Processed: 458 Images Processed: 459 Images Processed: 460 Images Processed: 461 Images Processed: 462 Images Processed: 463 Images Processed: 464 Images Processed: 465 Images Processed: 466 Images Processed: 467 Images Processed: 468 Images Processed: 469 Images Processed: 470 Images Processed: 471 Images Processed: 472 Images Processed: 473 Images Processed: 474 Images Processed: 475 Images Processed: 476 Images Processed: 477 Images Processed: 478 Images Processed: 479 Images Processed: 480 Images Processed: 481 Images Processed: 482 Images Processed: 483 Images Processed: 484 Images Processed: 485 Images Processed: 486 Images Processed: 487 Images Processed: 488 Images Processed: 489 Images Processed: 490 Images Processed: 491 Images Processed: 492 Images Processed: 493 Images Processed: 494 Images Processed: 495 Images Processed: 496 Images Processed: 497 Images Processed: 498 Images Processed: 499 Images Processed: 500 

##################################################
what           :             AP         AP_50%
##################################################
person         :          0.000          0.000
rider          :          0.000          0.000
car            :          0.000          0.000
truck          :          0.000          0.000
bus            :          0.000          0.000
train          :          0.000          0.000
motorcycle     :          0.001          0.007
bicycle        :          0.000          0.000
--------------------------------------------------
average        :          0.000          0.001

[32m[06/28 18:43:06 d2.engine.defaults]: [0mEvaluation results for cityscapes_fine_panoptic_val in csv format:
[32m[06/28 18:43:06 d2.evaluation.testing]: [0mcopypaste: Task: panoptic_seg
[32m[06/28 18:43:06 d2.evaluation.testing]: [0mcopypaste: PQ,SQ,RQ,PQ_th,SQ_th,RQ_th,PQ_st,SQ_st,RQ_st
[32m[06/28 18:43:06 d2.evaluation.testing]: [0mcopypaste: 5.9037,29.4467,8.1340,0.0492,13.2954,0.0932,10.1616,41.1931,13.9819
[32m[06/28 18:43:06 d2.evaluation.testing]: [0mcopypaste: Task: sem_seg
[32m[06/28 18:43:06 d2.evaluation.testing]: [0mcopypaste: IoU,iIoU,IoU_sup,iIoU_sup
[32m[06/28 18:43:06 d2.evaluation.testing]: [0mcopypaste: 11.1204,0.3789,27.0989,1.2073
[32m[06/28 18:43:06 d2.evaluation.testing]: [0mcopypaste: Task: segm
[32m[06/28 18:43:06 d2.evaluation.testing]: [0mcopypaste: AP,AP50
[32m[06/28 18:43:06 d2.evaluation.testing]: [0mcopypaste: 0.0084,0.0845
